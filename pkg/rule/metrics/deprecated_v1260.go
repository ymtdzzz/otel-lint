// Code generated by otel-lint. DO NOT EDIT.
package metrics

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesDeprecatedv1260 = []*rule.MetricRule{
	ruleDeprecatedDbClientConnectionsUsagev1260,
	ruleDeprecatedDbClientConnectionsIdleMaxv1260,
	ruleDeprecatedDbClientConnectionsIdleMinv1260,
	ruleDeprecatedDbClientConnectionsMaxv1260,
	ruleDeprecatedDbClientConnectionsPendingRequestsv1260,
	ruleDeprecatedDbClientConnectionsTimeoutsv1260,
	ruleDeprecatedDbClientConnectionsCreateTimev1260,
	ruleDeprecatedDbClientConnectionsWaitTimev1260,
	ruleDeprecatedDbClientConnectionsUseTimev1260,
}

var ruleDeprecatedDbClientConnectionsUsagev1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.usage",
	Title:        "Deprecated, use `db.client.connection.count` instead.",
	Check:        checkDeprecatedDbClientConnectionsUsagev1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsUsagev1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.usage"
}

var ruleDeprecatedDbClientConnectionsIdleMaxv1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.idle.max",
	Title:        "Deprecated, use `db.client.connection.idle.max` instead.",
	Check:        checkDeprecatedDbClientConnectionsIdleMaxv1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsIdleMaxv1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.idle.max"
}

var ruleDeprecatedDbClientConnectionsIdleMinv1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.idle.min",
	Title:        "Deprecated, use `db.client.connection.idle.min` instead.",
	Check:        checkDeprecatedDbClientConnectionsIdleMinv1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsIdleMinv1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.idle.min"
}

var ruleDeprecatedDbClientConnectionsMaxv1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.max",
	Title:        "Deprecated, use `db.client.connection.max` instead.",
	Check:        checkDeprecatedDbClientConnectionsMaxv1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsMaxv1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.max"
}

var ruleDeprecatedDbClientConnectionsPendingRequestsv1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.pending_requests",
	Title:        "Deprecated, use `db.client.connection.pending_requests` instead.",
	Check:        checkDeprecatedDbClientConnectionsPendingRequestsv1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsPendingRequestsv1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.pending_requests"
}

var ruleDeprecatedDbClientConnectionsTimeoutsv1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.timeouts",
	Title:        "Deprecated, use `db.client.connection.timeouts` instead.",
	Check:        checkDeprecatedDbClientConnectionsTimeoutsv1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsTimeoutsv1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.timeouts"
}

var ruleDeprecatedDbClientConnectionsCreateTimev1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.create_time",
	Title:        "Deprecated, use `db.client.connection.create_time` instead. Note: the unit also changed from `ms` to `s`.",
	Check:        checkDeprecatedDbClientConnectionsCreateTimev1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsCreateTimev1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.create_time"
}

var ruleDeprecatedDbClientConnectionsWaitTimev1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.wait_time",
	Title:        "Deprecated, use `db.client.connection.wait_time` instead. Note: the unit also changed from `ms` to `s`.",
	Check:        checkDeprecatedDbClientConnectionsWaitTimev1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsWaitTimev1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.wait_time"
}

var ruleDeprecatedDbClientConnectionsUseTimev1260 = &rule.MetricRule{
	Name:         "deprecated.db.client.connections.use_time",
	Title:        "Deprecated, use `db.client.connection.use_time` instead. Note: the unit also changed from `ms` to `s`.",
	Check:        checkDeprecatedDbClientConnectionsUseTimev1260,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedDbClientConnectionsUseTimev1260(m *rule.Metrics) bool {
  return m.Name() != "db.client.connections.use_time"
}

