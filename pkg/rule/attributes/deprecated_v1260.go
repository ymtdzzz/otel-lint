// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesDeprecatedv1260 = []*rule.AttributeRule{
	ruleDeprecatedContainerLabelsv1260,
	ruleDeprecatedDbCassandraTablev1260,
	ruleDeprecatedDbConnectionStringv1260,
	ruleDeprecatedDbCosmosdbContainerv1260,
	ruleDeprecatedDbInstanceIdv1260,
	ruleDeprecatedDbJdbcDriverClassnamev1260,
	ruleDeprecatedDbMongodbCollectionv1260,
	ruleDeprecatedDbMssqlInstanceNamev1260,
	ruleDeprecatedDbNamev1260,
	ruleDeprecatedDbOperationv1260,
	ruleDeprecatedDbRedisDatabaseIndexv1260,
	ruleDeprecatedDbSqlTablev1260,
	ruleDeprecatedDbStatementv1260,
	ruleDeprecatedDbUserv1260,
	ruleDeprecatedHttpClientIpv1260,
	ruleDeprecatedHttpFlavorv1260,
	ruleDeprecatedHttpHostv1260,
	ruleDeprecatedHttpMethodv1260,
	ruleDeprecatedHttpRequestContentLengthv1260,
	ruleDeprecatedHttpRequestContentLengthUncompressedv1260,
	ruleDeprecatedHttpResponseContentLengthv1260,
	ruleDeprecatedHttpResponseContentLengthUncompressedv1260,
	ruleDeprecatedHttpSchemev1260,
	ruleDeprecatedHttpServerNamev1260,
	ruleDeprecatedHttpStatusCodev1260,
	ruleDeprecatedHttpTargetv1260,
	ruleDeprecatedHttpUrlv1260,
	ruleDeprecatedHttpUserAgentv1260,
	ruleDeprecatedIosStatev1260,
	ruleDeprecatedK8SPodLabelsv1260,
	ruleDeprecatedMessageCompressedSizev1260,
	ruleDeprecatedMessageIdv1260,
	ruleDeprecatedMessageTypev1260,
	ruleDeprecatedMessageUncompressedSizev1260,
	ruleDeprecatedMessagingClientIdv1260,
	ruleDeprecatedMessagingKafkaDestinationPartitionv1260,
	ruleDeprecatedMessagingOperationv1260,
	ruleDeprecatedNetHostIpv1260,
	ruleDeprecatedNetHostNamev1260,
	ruleDeprecatedNetHostPortv1260,
	ruleDeprecatedNetPeerIpv1260,
	ruleDeprecatedNetPeerNamev1260,
	ruleDeprecatedNetPeerPortv1260,
	ruleDeprecatedNetProtocolNamev1260,
	ruleDeprecatedNetProtocolVersionv1260,
	ruleDeprecatedNetSockFamilyv1260,
	ruleDeprecatedNetSockHostAddrv1260,
	ruleDeprecatedNetSockHostPortv1260,
	ruleDeprecatedNetSockPeerAddrv1260,
	ruleDeprecatedNetSockPeerNamev1260,
	ruleDeprecatedNetSockPeerPortv1260,
	ruleDeprecatedNetTransportv1260,
	ruleDeprecatedOtelLibraryNamev1260,
	ruleDeprecatedOtelLibraryVersionv1260,
	ruleDeprecatedPoolNamev1260,
	ruleDeprecatedStatev1260,
	ruleDeprecatedSystemProcessesStatusv1260,
}

var ruleDeprecatedContainerLabelsv1260 = &rule.AttributeRule{
	Name:         "deprecated.container.labels",
	Title:        "Deprecated, use `container.label` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "container.labels") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbCassandraTablev1260 = &rule.AttributeRule{
	Name:         "deprecated.db.cassandra.table",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.cassandra.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbConnectionStringv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.connection_string",
	Title:        "Deprecated, use `server.address`, `server.port` attributes instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.connection_string") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbCosmosdbContainerv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.cosmosdb.container",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.cosmosdb.container") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbInstanceIdv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.instance.id",
	Title:        "Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbJdbcDriverClassnamev1260 = &rule.AttributeRule{
	Name:         "deprecated.db.jdbc.driver_classname",
	Title:        "Removed, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.jdbc.driver_classname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbMongodbCollectionv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.mongodb.collection",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.mongodb.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbMssqlInstanceNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.db.mssql.instance_name",
	Title:        "Deprecated, SQL Server instance is now populated as a part of `db.namespace` attribute.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.mssql.instance_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.db.name",
	Title:        "Deprecated, use `db.namespace` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbOperationv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.operation",
	Title:        "Deprecated, use `db.operation.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbRedisDatabaseIndexv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.redis.database_index",
	Title:        "Deprecated, use `db.namespace` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.redis.database_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbSqlTablev1260 = &rule.AttributeRule{
	Name:         "deprecated.db.sql.table",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.sql.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbStatementv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.statement",
	Title:        "The database statement being executed.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.statement") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedDbUserv1260 = &rule.AttributeRule{
	Name:         "deprecated.db.user",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.user") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpClientIpv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.client_ip",
	Title:        "Deprecated, use `client.address` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.client_ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpFlavorv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.flavor",
	Title:        "Deprecated, use `network.protocol.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.flavor") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpHostv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.host",
	Title:        "Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.host") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpMethodv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.method",
	Title:        "Deprecated, use `http.request.method` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpRequestContentLengthv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.request_content_length",
	Title:        "Deprecated, use `http.request.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpRequestContentLengthUncompressedv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.request_content_length_uncompressed",
	Title:        "Deprecated, use `http.request.body.size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.request_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpResponseContentLengthv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.response_content_length",
	Title:        "Deprecated, use `http.response.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.response_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpResponseContentLengthUncompressedv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.response_content_length_uncompressed",
	Title:        "Deprecated, use `http.response.body.size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.response_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpSchemev1260 = &rule.AttributeRule{
	Name:         "deprecated.http.scheme",
	Title:        "Deprecated, use `url.scheme` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpServerNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.http.server_name",
	Title:        "Deprecated, use `server.address` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpStatusCodev1260 = &rule.AttributeRule{
	Name:         "deprecated.http.status_code",
	Title:        "Deprecated, use `http.response.status_code` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpTargetv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.target",
	Title:        "Deprecated, use `url.path` and `url.query` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.target") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpUrlv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.url",
	Title:        "Deprecated, use `url.full` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.url") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedHttpUserAgentv1260 = &rule.AttributeRule{
	Name:         "deprecated.http.user_agent",
	Title:        "Deprecated, use `user_agent.original` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.user_agent") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedIosStatev1260 = &rule.AttributeRule{
	Name:         "deprecated.ios.state",
	Title:        "Deprecated use the `device.app.lifecycle` event definition including `ios.state` as a payload field instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "ios.state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedK8SPodLabelsv1260 = &rule.AttributeRule{
	Name:         "deprecated.k8s.pod.labels",
	Title:        "Deprecated, use `k8s.pod.label` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "k8s.pod.labels") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedMessageCompressedSizev1260 = &rule.AttributeRule{
	Name:         "deprecated.message.compressed_size",
	Title:        "Deprecated, use `rpc.message.compressed_size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.compressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedMessageIdv1260 = &rule.AttributeRule{
	Name:         "deprecated.message.id",
	Title:        "Deprecated, use `rpc.message.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedMessageTypev1260 = &rule.AttributeRule{
	Name:         "deprecated.message.type",
	Title:        "Deprecated, use `rpc.message.type` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedMessageUncompressedSizev1260 = &rule.AttributeRule{
	Name:         "deprecated.message.uncompressed_size",
	Title:        "Deprecated, use `rpc.message.uncompressed_size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.uncompressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedMessagingClientIdv1260 = &rule.AttributeRule{
	Name:         "deprecated.messaging.client_id",
	Title:        "Deprecated, use `messaging.client.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedMessagingKafkaDestinationPartitionv1260 = &rule.AttributeRule{
	Name:         "deprecated.messaging.kafka.destination.partition",
	Title:        "Deprecated, use `messaging.destination.partition.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.kafka.destination.partition") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedMessagingOperationv1260 = &rule.AttributeRule{
	Name:         "deprecated.messaging.operation",
	Title:        "Deprecated, use `messaging.operation.type` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetHostIpv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.host.ip",
	Title:        "Deprecated, use `network.local.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetHostNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.net.host.name",
	Title:        "Deprecated, use `server.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetHostPortv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.host.port",
	Title:        "Deprecated, use `server.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetPeerIpv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.ip",
	Title:        "Deprecated, use `network.peer.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetPeerNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.name",
	Title:        "Deprecated, use `server.address` on client spans and `client.address` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetPeerPortv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.port",
	Title:        "Deprecated, use `server.port` on client spans and `client.port` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetProtocolNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.name",
	Title:        "Deprecated, use `network.protocol.name`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetProtocolVersionv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.version",
	Title:        "Deprecated, use `network.protocol.version`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetSockFamilyv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.family",
	Title:        "Deprecated, use `network.transport` and `network.type`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetSockHostAddrv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.addr",
	Title:        "Deprecated, use `network.local.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetSockHostPortv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.port",
	Title:        "Deprecated, use `network.local.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetSockPeerAddrv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.addr",
	Title:        "Deprecated, use `network.peer.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetSockPeerNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.name",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetSockPeerPortv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.port",
	Title:        "Deprecated, use `network.peer.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedNetTransportv1260 = &rule.AttributeRule{
	Name:         "deprecated.net.transport",
	Title:        "Deprecated, use `network.transport`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.transport") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedOtelLibraryNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.otel.library.name",
	Title:        "",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "otel.library.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedOtelLibraryVersionv1260 = &rule.AttributeRule{
	Name:         "deprecated.otel.library.version",
	Title:        "",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "otel.library.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedPoolNamev1260 = &rule.AttributeRule{
	Name:         "deprecated.pool.name",
	Title:        "Deprecated, use `db.client.connections.pool.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedStatev1260 = &rule.AttributeRule{
	Name:         "deprecated.state",
	Title:        "Deprecated, use `db.client.connections.state` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

var ruleDeprecatedSystemProcessesStatusv1260 = &rule.AttributeRule{
	Name:         "deprecated.system.processes.status",
	Title:        "Deprecated, use `system.process.status` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "system.processes.status") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
  Version:      "v1.26.0",
}

