// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesDeprecatedv1250 = []*rule.AttributeRule{
	ruleDeprecatedContainerLabelsv1250,
	ruleDeprecatedDbConnectionStringv1250,
	ruleDeprecatedDbElasticsearchNodeNamev1250,
	ruleDeprecatedDbJdbcDriverClassnamev1250,
	ruleDeprecatedHttpFlavorv1250,
	ruleDeprecatedHttpMethodv1250,
	ruleDeprecatedHttpRequestContentLengthv1250,
	ruleDeprecatedHttpResponseContentLengthv1250,
	ruleDeprecatedHttpSchemev1250,
	ruleDeprecatedHttpStatusCodev1250,
	ruleDeprecatedHttpTargetv1250,
	ruleDeprecatedHttpUrlv1250,
	ruleDeprecatedHttpUserAgentv1250,
	ruleDeprecatedK8SPodLabelsv1250,
	ruleDeprecatedMessagingKafkaDestinationPartitionv1250,
	ruleDeprecatedNetHostNamev1250,
	ruleDeprecatedNetHostPortv1250,
	ruleDeprecatedNetPeerNamev1250,
	ruleDeprecatedNetPeerPortv1250,
	ruleDeprecatedNetProtocolNamev1250,
	ruleDeprecatedNetProtocolVersionv1250,
	ruleDeprecatedNetSockFamilyv1250,
	ruleDeprecatedNetSockHostAddrv1250,
	ruleDeprecatedNetSockHostPortv1250,
	ruleDeprecatedNetSockPeerAddrv1250,
	ruleDeprecatedNetSockPeerNamev1250,
	ruleDeprecatedNetSockPeerPortv1250,
	ruleDeprecatedNetTransportv1250,
	ruleDeprecatedOtelLibraryNamev1250,
	ruleDeprecatedOtelLibraryVersionv1250,
	ruleDeprecatedSystemProcessesStatusv1250,
}

var ruleDeprecatedContainerLabelsv1250 = &rule.AttributeRule{
	Name:         "deprecated.container.labels",
	Title:        "Deprecated, use `container.label` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "container.labels") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedDbConnectionStringv1250 = &rule.AttributeRule{
	Name:         "deprecated.db.connection_string",
	Title:        "Deprecated, use `server.address`, `server.port` attributes instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.connection_string") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedDbElasticsearchNodeNamev1250 = &rule.AttributeRule{
	Name:         "deprecated.db.elasticsearch.node.name",
	Title:        "Deprecated, use `db.instance.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.elasticsearch.node.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedDbJdbcDriverClassnamev1250 = &rule.AttributeRule{
	Name:         "deprecated.db.jdbc.driver_classname",
	Title:        "Removed, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.jdbc.driver_classname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpFlavorv1250 = &rule.AttributeRule{
	Name:         "deprecated.http.flavor",
	Title:        "Deprecated, use `network.protocol.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.flavor") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpMethodv1250 = &rule.AttributeRule{
	Name:         "deprecated.http.method",
	Title:        "Deprecated, use `http.request.method` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpRequestContentLengthv1250 = &rule.AttributeRule{
	Name:         "deprecated.http.request_content_length",
	Title:        "Deprecated, use `http.request.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpResponseContentLengthv1250 = &rule.AttributeRule{
	Name:         "deprecated.http.response_content_length",
	Title:        "Deprecated, use `http.response.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.response_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpSchemev1250 = &rule.AttributeRule{
	Name:         "deprecated.http.scheme",
	Title:        "Deprecated, use `url.scheme` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpStatusCodev1250 = &rule.AttributeRule{
	Name:         "deprecated.http.status_code",
	Title:        "Deprecated, use `http.response.status_code` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpTargetv1250 = &rule.AttributeRule{
	Name:         "deprecated.http.target",
	Title:        "Deprecated, use `url.path` and `url.query` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.target") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpUrlv1250 = &rule.AttributeRule{
	Name:         "deprecated.http.url",
	Title:        "Deprecated, use `url.full` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.url") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedHttpUserAgentv1250 = &rule.AttributeRule{
	Name:         "deprecated.http.user_agent",
	Title:        "Deprecated, use `user_agent.original` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.user_agent") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedK8SPodLabelsv1250 = &rule.AttributeRule{
	Name:         "deprecated.k8s.pod.labels",
	Title:        "Deprecated, use `k8s.pod.label` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "k8s.pod.labels") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedMessagingKafkaDestinationPartitionv1250 = &rule.AttributeRule{
	Name:         "deprecated.messaging.kafka.destination.partition",
	Title:        "Deprecated, use `messaging.destination.partition.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.kafka.destination.partition") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetHostNamev1250 = &rule.AttributeRule{
	Name:         "deprecated.net.host.name",
	Title:        "Deprecated, use `server.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetHostPortv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.host.port",
	Title:        "Deprecated, use `server.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetPeerNamev1250 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.name",
	Title:        "Deprecated, use `server.address` on client spans and `client.address` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetPeerPortv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.port",
	Title:        "Deprecated, use `server.port` on client spans and `client.port` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetProtocolNamev1250 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.name",
	Title:        "Deprecated, use `network.protocol.name`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetProtocolVersionv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.version",
	Title:        "Deprecated, use `network.protocol.version`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetSockFamilyv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.family",
	Title:        "Deprecated, use `network.transport` and `network.type`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetSockHostAddrv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.addr",
	Title:        "Deprecated, use `network.local.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetSockHostPortv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.port",
	Title:        "Deprecated, use `network.local.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetSockPeerAddrv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.addr",
	Title:        "Deprecated, use `network.peer.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetSockPeerNamev1250 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.name",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetSockPeerPortv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.port",
	Title:        "Deprecated, use `network.peer.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedNetTransportv1250 = &rule.AttributeRule{
	Name:         "deprecated.net.transport",
	Title:        "Deprecated, use `network.transport`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.transport") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedOtelLibraryNamev1250 = &rule.AttributeRule{
	Name:         "deprecated.otel.library.name",
	Title:        "",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "otel.library.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedOtelLibraryVersionv1250 = &rule.AttributeRule{
	Name:         "deprecated.otel.library.version",
	Title:        "",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "otel.library.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

var ruleDeprecatedSystemProcessesStatusv1250 = &rule.AttributeRule{
	Name:         "deprecated.system.processes.status",
	Title:        "Deprecated, use `system.process.status` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "system.processes.status") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.25.0",
}

