// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesTypev1260 = []*rule.AttributeRule{
	ruleTypeAndroidOsApiLevelv1260,
	ruleTypeAspnetcoreDiagnosticsHandlerTypev1260,
	ruleTypeAspnetcoreRateLimitingPolicyv1260,
	ruleTypeAspnetcoreRequestIsUnhandledv1260,
	ruleTypeAspnetcoreRoutingIsFallbackv1260,
	ruleTypeAwsDynamodbAttributeDefinitionsv1260,
	ruleTypeAwsDynamodbAttributesToGetv1260,
	ruleTypeAwsDynamodbConsistentReadv1260,
	ruleTypeAwsDynamodbConsumedCapacityv1260,
	ruleTypeAwsDynamodbCountv1260,
	ruleTypeAwsDynamodbExclusiveStartTablev1260,
	ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1260,
	ruleTypeAwsDynamodbGlobalSecondaryIndexesv1260,
	ruleTypeAwsDynamodbIndexNamev1260,
	ruleTypeAwsDynamodbItemCollectionMetricsv1260,
	ruleTypeAwsDynamodbLimitv1260,
	ruleTypeAwsDynamodbLocalSecondaryIndexesv1260,
	ruleTypeAwsDynamodbProjectionv1260,
	ruleTypeAwsDynamodbProvisionedReadCapacityv1260,
	ruleTypeAwsDynamodbProvisionedWriteCapacityv1260,
	ruleTypeAwsDynamodbScanForwardv1260,
	ruleTypeAwsDynamodbScannedCountv1260,
	ruleTypeAwsDynamodbSegmentv1260,
	ruleTypeAwsDynamodbSelectv1260,
	ruleTypeAwsDynamodbTableCountv1260,
	ruleTypeAwsDynamodbTableNamesv1260,
	ruleTypeAwsDynamodbTotalSegmentsv1260,
	ruleTypeAwsEcsClusterArnv1260,
	ruleTypeAwsEcsContainerArnv1260,
	ruleTypeAwsEcsTaskArnv1260,
	ruleTypeAwsEcsTaskFamilyv1260,
	ruleTypeAwsEcsTaskIdv1260,
	ruleTypeAwsEcsTaskRevisionv1260,
	ruleTypeAwsEksClusterArnv1260,
	ruleTypeAwsLambdaInvokedArnv1260,
	ruleTypeAwsLogGroupArnsv1260,
	ruleTypeAwsLogGroupNamesv1260,
	ruleTypeAwsLogStreamArnsv1260,
	ruleTypeAwsLogStreamNamesv1260,
	ruleTypeAwsRequestIdv1260,
	ruleTypeAwsS3Bucketv1260,
	ruleTypeAwsS3CopySourcev1260,
	ruleTypeAwsS3Deletev1260,
	ruleTypeAwsS3Keyv1260,
	ruleTypeAwsS3PartNumberv1260,
	ruleTypeAwsS3UploadIdv1260,
	ruleTypeBrowserBrandsv1260,
	ruleTypeBrowserLanguagev1260,
	ruleTypeBrowserMobilev1260,
	ruleTypeBrowserPlatformv1260,
	ruleTypeClientAddressv1260,
	ruleTypeClientPortv1260,
	ruleTypeCloudAccountIdv1260,
	ruleTypeCloudAvailabilityZonev1260,
	ruleTypeCloudRegionv1260,
	ruleTypeCloudResourceIdv1260,
	ruleTypeCloudeventsEventIdv1260,
	ruleTypeCloudeventsEventSourcev1260,
	ruleTypeCloudeventsEventSpecVersionv1260,
	ruleTypeCloudeventsEventSubjectv1260,
	ruleTypeCloudeventsEventTypev1260,
	ruleTypeCodeColumnv1260,
	ruleTypeCodeFilepathv1260,
	ruleTypeCodeFunctionv1260,
	ruleTypeCodeLinenov1260,
	ruleTypeCodeNamespacev1260,
	ruleTypeCodeStacktracev1260,
	ruleTypeContainerCommandv1260,
	ruleTypeContainerCommandArgsv1260,
	ruleTypeContainerCommandLinev1260,
	ruleTypeContainerIdv1260,
	ruleTypeContainerImageIdv1260,
	ruleTypeContainerImageNamev1260,
	ruleTypeContainerImageRepoDigestsv1260,
	ruleTypeContainerImageTagsv1260,
	ruleTypeContainerNamev1260,
	ruleTypeContainerRuntimev1260,
	ruleTypeDbCassandraCoordinatorDcv1260,
	ruleTypeDbCassandraCoordinatorIdv1260,
	ruleTypeDbCassandraIdempotencev1260,
	ruleTypeDbCassandraPageSizev1260,
	ruleTypeDbCassandraSpeculativeExecutionCountv1260,
	ruleTypeDbCassandraTablev1260,
	ruleTypeDbClientConnectionsPoolNamev1260,
	ruleTypeDbCollectionNamev1260,
	ruleTypeDbConnectionStringv1260,
	ruleTypeDbCosmosdbClientIdv1260,
	ruleTypeDbCosmosdbContainerv1260,
	ruleTypeDbCosmosdbRequestChargev1260,
	ruleTypeDbCosmosdbRequestContentLengthv1260,
	ruleTypeDbCosmosdbStatusCodev1260,
	ruleTypeDbCosmosdbSubStatusCodev1260,
	ruleTypeDbElasticsearchClusterNamev1260,
	ruleTypeDbElasticsearchNodeNamev1260,
	ruleTypeDbInstanceIdv1260,
	ruleTypeDbJdbcDriverClassnamev1260,
	ruleTypeDbMongodbCollectionv1260,
	ruleTypeDbMssqlInstanceNamev1260,
	ruleTypeDbNamev1260,
	ruleTypeDbNamespacev1260,
	ruleTypeDbOperationv1260,
	ruleTypeDbOperationNamev1260,
	ruleTypeDbQueryTextv1260,
	ruleTypeDbRedisDatabaseIndexv1260,
	ruleTypeDbSqlTablev1260,
	ruleTypeDbStatementv1260,
	ruleTypeDbUserv1260,
	ruleTypeDeploymentEnvironmentv1260,
	ruleTypeDestinationAddressv1260,
	ruleTypeDestinationPortv1260,
	ruleTypeDeviceIdv1260,
	ruleTypeDeviceManufacturerv1260,
	ruleTypeDeviceModelIdentifierv1260,
	ruleTypeDeviceModelNamev1260,
	ruleTypeDnsQuestionNamev1260,
	ruleTypeEnduserIdv1260,
	ruleTypeEnduserRolev1260,
	ruleTypeEnduserScopev1260,
	ruleTypeEventNamev1260,
	ruleTypeExceptionEscapedv1260,
	ruleTypeExceptionMessagev1260,
	ruleTypeExceptionStacktracev1260,
	ruleTypeExceptionTypev1260,
	ruleTypeFaasColdstartv1260,
	ruleTypeFaasCronv1260,
	ruleTypeFaasDocumentCollectionv1260,
	ruleTypeFaasDocumentNamev1260,
	ruleTypeFaasDocumentTimev1260,
	ruleTypeFaasInstancev1260,
	ruleTypeFaasInvocationIdv1260,
	ruleTypeFaasInvokedNamev1260,
	ruleTypeFaasInvokedRegionv1260,
	ruleTypeFaasMaxMemoryv1260,
	ruleTypeFaasNamev1260,
	ruleTypeFaasTimev1260,
	ruleTypeFaasVersionv1260,
	ruleTypeFeatureFlagKeyv1260,
	ruleTypeFeatureFlagProviderNamev1260,
	ruleTypeFeatureFlagVariantv1260,
	ruleTypeFileDirectoryv1260,
	ruleTypeFileExtensionv1260,
	ruleTypeFileNamev1260,
	ruleTypeFilePathv1260,
	ruleTypeFileSizev1260,
	ruleTypeGcpCloudRunJobExecutionv1260,
	ruleTypeGcpCloudRunJobTaskIndexv1260,
	ruleTypeGcpGceInstanceHostnamev1260,
	ruleTypeGcpGceInstanceNamev1260,
	ruleTypeGenAiCompletionv1260,
	ruleTypeGenAiPromptv1260,
	ruleTypeGenAiRequestMaxTokensv1260,
	ruleTypeGenAiRequestModelv1260,
	ruleTypeGenAiRequestTemperaturev1260,
	ruleTypeGenAiRequestTopPv1260,
	ruleTypeGenAiResponseFinishReasonsv1260,
	ruleTypeGenAiResponseIdv1260,
	ruleTypeGenAiResponseModelv1260,
	ruleTypeGenAiUsageCompletionTokensv1260,
	ruleTypeGenAiUsagePromptTokensv1260,
	ruleTypeGraphqlDocumentv1260,
	ruleTypeGraphqlOperationNamev1260,
	ruleTypeHerokuAppIdv1260,
	ruleTypeHerokuReleaseCommitv1260,
	ruleTypeHerokuReleaseCreationTimestampv1260,
	ruleTypeHostCpuCacheL2Sizev1260,
	ruleTypeHostCpuFamilyv1260,
	ruleTypeHostCpuModelIdv1260,
	ruleTypeHostCpuModelNamev1260,
	ruleTypeHostCpuSteppingv1260,
	ruleTypeHostCpuVendorIdv1260,
	ruleTypeHostIdv1260,
	ruleTypeHostImageIdv1260,
	ruleTypeHostImageNamev1260,
	ruleTypeHostImageVersionv1260,
	ruleTypeHostIpv1260,
	ruleTypeHostMacv1260,
	ruleTypeHostNamev1260,
	ruleTypeHostTypev1260,
	ruleTypeHttpClientIpv1260,
	ruleTypeHttpHostv1260,
	ruleTypeHttpMethodv1260,
	ruleTypeHttpRequestBodySizev1260,
	ruleTypeHttpRequestMethodOriginalv1260,
	ruleTypeHttpRequestResendCountv1260,
	ruleTypeHttpRequestSizev1260,
	ruleTypeHttpRequestContentLengthv1260,
	ruleTypeHttpRequestContentLengthUncompressedv1260,
	ruleTypeHttpResponseBodySizev1260,
	ruleTypeHttpResponseSizev1260,
	ruleTypeHttpResponseStatusCodev1260,
	ruleTypeHttpResponseContentLengthv1260,
	ruleTypeHttpResponseContentLengthUncompressedv1260,
	ruleTypeHttpRoutev1260,
	ruleTypeHttpSchemev1260,
	ruleTypeHttpServerNamev1260,
	ruleTypeHttpStatusCodev1260,
	ruleTypeHttpTargetv1260,
	ruleTypeHttpUrlv1260,
	ruleTypeHttpUserAgentv1260,
	ruleTypeJvmBufferPoolNamev1260,
	ruleTypeJvmGcActionv1260,
	ruleTypeJvmGcNamev1260,
	ruleTypeJvmMemoryPoolNamev1260,
	ruleTypeJvmThreadDaemonv1260,
	ruleTypeK8SClusterNamev1260,
	ruleTypeK8SClusterUidv1260,
	ruleTypeK8SContainerNamev1260,
	ruleTypeK8SContainerRestartCountv1260,
	ruleTypeK8SContainerStatusLastTerminatedReasonv1260,
	ruleTypeK8SCronjobNamev1260,
	ruleTypeK8SCronjobUidv1260,
	ruleTypeK8SDaemonsetNamev1260,
	ruleTypeK8SDaemonsetUidv1260,
	ruleTypeK8SDeploymentNamev1260,
	ruleTypeK8SDeploymentUidv1260,
	ruleTypeK8SJobNamev1260,
	ruleTypeK8SJobUidv1260,
	ruleTypeK8SNamespaceNamev1260,
	ruleTypeK8SNodeNamev1260,
	ruleTypeK8SNodeUidv1260,
	ruleTypeK8SPodNamev1260,
	ruleTypeK8SPodUidv1260,
	ruleTypeK8SReplicasetNamev1260,
	ruleTypeK8SReplicasetUidv1260,
	ruleTypeK8SStatefulsetNamev1260,
	ruleTypeK8SStatefulsetUidv1260,
	ruleTypeLogFileNamev1260,
	ruleTypeLogFileNameResolvedv1260,
	ruleTypeLogFilePathv1260,
	ruleTypeLogFilePathResolvedv1260,
	ruleTypeLogRecordUidv1260,
	ruleTypeMessageCompressedSizev1260,
	ruleTypeMessageIdv1260,
	ruleTypeMessageUncompressedSizev1260,
	ruleTypeMessagingBatchMessageCountv1260,
	ruleTypeMessagingClientIdv1260,
	ruleTypeMessagingClient_Idv1260,
	ruleTypeMessagingDestinationAnonymousv1260,
	ruleTypeMessagingDestinationNamev1260,
	ruleTypeMessagingDestinationPartitionIdv1260,
	ruleTypeMessagingDestinationTemplatev1260,
	ruleTypeMessagingDestinationTemporaryv1260,
	ruleTypeMessagingDestinationPublishAnonymousv1260,
	ruleTypeMessagingDestinationPublishNamev1260,
	ruleTypeMessagingEventhubsConsumerGroupv1260,
	ruleTypeMessagingEventhubsMessageEnqueuedTimev1260,
	ruleTypeMessagingGcpPubsubMessageAckDeadlinev1260,
	ruleTypeMessagingGcpPubsubMessageAckIdv1260,
	ruleTypeMessagingGcpPubsubMessageDeliveryAttemptv1260,
	ruleTypeMessagingGcpPubsubMessageOrderingKeyv1260,
	ruleTypeMessagingKafkaConsumerGroupv1260,
	ruleTypeMessagingKafkaDestinationPartitionv1260,
	ruleTypeMessagingKafkaMessageKeyv1260,
	ruleTypeMessagingKafkaMessageOffsetv1260,
	ruleTypeMessagingKafkaMessageTombstonev1260,
	ruleTypeMessagingMessageBodySizev1260,
	ruleTypeMessagingMessageConversationIdv1260,
	ruleTypeMessagingMessageEnvelopeSizev1260,
	ruleTypeMessagingMessageIdv1260,
	ruleTypeMessagingOperationv1260,
	ruleTypeMessagingOperationNamev1260,
	ruleTypeMessagingRabbitmqDestinationRoutingKeyv1260,
	ruleTypeMessagingRabbitmqMessageDeliveryTagv1260,
	ruleTypeMessagingRocketmqClientGroupv1260,
	ruleTypeMessagingRocketmqMessageDelayTimeLevelv1260,
	ruleTypeMessagingRocketmqMessageDeliveryTimestampv1260,
	ruleTypeMessagingRocketmqMessageGroupv1260,
	ruleTypeMessagingRocketmqMessageKeysv1260,
	ruleTypeMessagingRocketmqMessageTagv1260,
	ruleTypeMessagingRocketmqNamespacev1260,
	ruleTypeMessagingServicebusDestinationSubscriptionNamev1260,
	ruleTypeMessagingServicebusMessageDeliveryCountv1260,
	ruleTypeMessagingServicebusMessageEnqueuedTimev1260,
	ruleTypeNetHostIpv1260,
	ruleTypeNetHostNamev1260,
	ruleTypeNetHostPortv1260,
	ruleTypeNetPeerIpv1260,
	ruleTypeNetPeerNamev1260,
	ruleTypeNetPeerPortv1260,
	ruleTypeNetProtocolNamev1260,
	ruleTypeNetProtocolVersionv1260,
	ruleTypeNetSockHostAddrv1260,
	ruleTypeNetSockHostPortv1260,
	ruleTypeNetSockPeerAddrv1260,
	ruleTypeNetSockPeerNamev1260,
	ruleTypeNetSockPeerPortv1260,
	ruleTypeNetworkCarrierIccv1260,
	ruleTypeNetworkCarrierMccv1260,
	ruleTypeNetworkCarrierMncv1260,
	ruleTypeNetworkCarrierNamev1260,
	ruleTypeNetworkLocalAddressv1260,
	ruleTypeNetworkLocalPortv1260,
	ruleTypeNetworkPeerAddressv1260,
	ruleTypeNetworkPeerPortv1260,
	ruleTypeNetworkProtocolNamev1260,
	ruleTypeNetworkProtocolVersionv1260,
	ruleTypeOciManifestDigestv1260,
	ruleTypeOsBuildIdv1260,
	ruleTypeOsDescriptionv1260,
	ruleTypeOsNamev1260,
	ruleTypeOsVersionv1260,
	ruleTypeOtelLibraryNamev1260,
	ruleTypeOtelLibraryVersionv1260,
	ruleTypeOtelScopeNamev1260,
	ruleTypeOtelScopeVersionv1260,
	ruleTypeOtelStatusDescriptionv1260,
	ruleTypePeerServicev1260,
	ruleTypePoolNamev1260,
	ruleTypeProcessCommandv1260,
	ruleTypeProcessCommandArgsv1260,
	ruleTypeProcessCommandLinev1260,
	ruleTypeProcessCreationTimev1260,
	ruleTypeProcessExecutableNamev1260,
	ruleTypeProcessExecutablePathv1260,
	ruleTypeProcessExitCodev1260,
	ruleTypeProcessExitTimev1260,
	ruleTypeProcessGroupLeaderPidv1260,
	ruleTypeProcessInteractivev1260,
	ruleTypeProcessOwnerv1260,
	ruleTypeProcessParentPidv1260,
	ruleTypeProcessPidv1260,
	ruleTypeProcessRealUserIdv1260,
	ruleTypeProcessRealUserNamev1260,
	ruleTypeProcessRuntimeDescriptionv1260,
	ruleTypeProcessRuntimeNamev1260,
	ruleTypeProcessRuntimeVersionv1260,
	ruleTypeProcessSavedUserIdv1260,
	ruleTypeProcessSavedUserNamev1260,
	ruleTypeProcessSessionLeaderPidv1260,
	ruleTypeProcessUserIdv1260,
	ruleTypeProcessUserNamev1260,
	ruleTypeProcessVpidv1260,
	ruleTypeRpcJsonrpcErrorCodev1260,
	ruleTypeRpcJsonrpcErrorMessagev1260,
	ruleTypeRpcJsonrpcRequestIdv1260,
	ruleTypeRpcJsonrpcVersionv1260,
	ruleTypeRpcMessageCompressedSizev1260,
	ruleTypeRpcMessageIdv1260,
	ruleTypeRpcMessageUncompressedSizev1260,
	ruleTypeRpcMethodv1260,
	ruleTypeRpcServicev1260,
	ruleTypeServerAddressv1260,
	ruleTypeServerPortv1260,
	ruleTypeServiceInstanceIdv1260,
	ruleTypeServiceNamev1260,
	ruleTypeServiceNamespacev1260,
	ruleTypeServiceVersionv1260,
	ruleTypeSessionIdv1260,
	ruleTypeSessionPreviousIdv1260,
	ruleTypeSourceAddressv1260,
	ruleTypeSourcePortv1260,
	ruleTypeSystemCpuLogicalNumberv1260,
	ruleTypeSystemDevicev1260,
	ruleTypeSystemFilesystemModev1260,
	ruleTypeSystemFilesystemMountpointv1260,
	ruleTypeTelemetryDistroNamev1260,
	ruleTypeTelemetryDistroVersionv1260,
	ruleTypeTelemetrySdkNamev1260,
	ruleTypeTelemetrySdkVersionv1260,
	ruleTypeThreadIdv1260,
	ruleTypeThreadNamev1260,
	ruleTypeTlsCipherv1260,
	ruleTypeTlsClientCertificatev1260,
	ruleTypeTlsClientCertificateChainv1260,
	ruleTypeTlsClientHashMd5v1260,
	ruleTypeTlsClientHashSha1v1260,
	ruleTypeTlsClientHashSha256v1260,
	ruleTypeTlsClientIssuerv1260,
	ruleTypeTlsClientJa3v1260,
	ruleTypeTlsClientNotAfterv1260,
	ruleTypeTlsClientNotBeforev1260,
	ruleTypeTlsClientServerNamev1260,
	ruleTypeTlsClientSubjectv1260,
	ruleTypeTlsClientSupportedCiphersv1260,
	ruleTypeTlsCurvev1260,
	ruleTypeTlsEstablishedv1260,
	ruleTypeTlsNextProtocolv1260,
	ruleTypeTlsProtocolVersionv1260,
	ruleTypeTlsResumedv1260,
	ruleTypeTlsServerCertificatev1260,
	ruleTypeTlsServerCertificateChainv1260,
	ruleTypeTlsServerHashMd5v1260,
	ruleTypeTlsServerHashSha1v1260,
	ruleTypeTlsServerHashSha256v1260,
	ruleTypeTlsServerIssuerv1260,
	ruleTypeTlsServerJa3Sv1260,
	ruleTypeTlsServerNotAfterv1260,
	ruleTypeTlsServerNotBeforev1260,
	ruleTypeTlsServerSubjectv1260,
	ruleTypeUrlDomainv1260,
	ruleTypeUrlExtensionv1260,
	ruleTypeUrlFragmentv1260,
	ruleTypeUrlFullv1260,
	ruleTypeUrlOriginalv1260,
	ruleTypeUrlPathv1260,
	ruleTypeUrlPortv1260,
	ruleTypeUrlQueryv1260,
	ruleTypeUrlRegisteredDomainv1260,
	ruleTypeUrlSchemev1260,
	ruleTypeUrlSubdomainv1260,
	ruleTypeUrlTemplatev1260,
	ruleTypeUrlTopLevelDomainv1260,
	ruleTypeUserAgentNamev1260,
	ruleTypeUserAgentOriginalv1260,
	ruleTypeUserAgentVersionv1260,
	ruleTypeWebengineDescriptionv1260,
	ruleTypeWebengineNamev1260,
	ruleTypeWebengineVersionv1260,
}

var ruleTypeAndroidOsApiLevelv1260 = &rule.AttributeRule{
	Name:         "type.android.os.api_level",
	Title:        "The type of `android.os.api_level` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "android.os.api_level") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAspnetcoreDiagnosticsHandlerTypev1260 = &rule.AttributeRule{
	Name:         "type.aspnetcore.diagnostics.handler.type",
	Title:        "The type of `aspnetcore.diagnostics.handler.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aspnetcore.diagnostics.handler.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAspnetcoreRateLimitingPolicyv1260 = &rule.AttributeRule{
	Name:         "type.aspnetcore.rate_limiting.policy",
	Title:        "The type of `aspnetcore.rate_limiting.policy` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aspnetcore.rate_limiting.policy") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAspnetcoreRequestIsUnhandledv1260 = &rule.AttributeRule{
	Name:         "type.aspnetcore.request.is_unhandled",
	Title:        "The type of `aspnetcore.request.is_unhandled` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aspnetcore.request.is_unhandled") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAspnetcoreRoutingIsFallbackv1260 = &rule.AttributeRule{
	Name:         "type.aspnetcore.routing.is_fallback",
	Title:        "The type of `aspnetcore.routing.is_fallback` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aspnetcore.routing.is_fallback") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbAttributeDefinitionsv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attribute_definitions",
	Title:        "The type of `aws.dynamodb.attribute_definitions` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.attribute_definitions") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbAttributesToGetv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attributes_to_get",
	Title:        "The type of `aws.dynamodb.attributes_to_get` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.attributes_to_get") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbConsistentReadv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consistent_read",
	Title:        "The type of `aws.dynamodb.consistent_read` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aws.dynamodb.consistent_read") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbConsumedCapacityv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consumed_capacity",
	Title:        "The type of `aws.dynamodb.consumed_capacity` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.consumed_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbCountv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.count",
	Title:        "The type of `aws.dynamodb.count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbExclusiveStartTablev1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.exclusive_start_table",
	Title:        "The type of `aws.dynamodb.exclusive_start_table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.exclusive_start_table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_index_updates",
	Title:        "The type of `aws.dynamodb.global_secondary_index_updates` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.global_secondary_index_updates") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexesv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_indexes",
	Title:        "The type of `aws.dynamodb.global_secondary_indexes` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.global_secondary_indexes") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbIndexNamev1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.index_name",
	Title:        "The type of `aws.dynamodb.index_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.index_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbItemCollectionMetricsv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.item_collection_metrics",
	Title:        "The type of `aws.dynamodb.item_collection_metrics` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.item_collection_metrics") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbLimitv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.limit",
	Title:        "The type of `aws.dynamodb.limit` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.limit") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbLocalSecondaryIndexesv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.local_secondary_indexes",
	Title:        "The type of `aws.dynamodb.local_secondary_indexes` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.local_secondary_indexes") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbProjectionv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.projection",
	Title:        "The type of `aws.dynamodb.projection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.projection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbProvisionedReadCapacityv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_read_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_read_capacity` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "aws.dynamodb.provisioned_read_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbProvisionedWriteCapacityv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_write_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_write_capacity` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "aws.dynamodb.provisioned_write_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbScanForwardv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scan_forward",
	Title:        "The type of `aws.dynamodb.scan_forward` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aws.dynamodb.scan_forward") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbScannedCountv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scanned_count",
	Title:        "The type of `aws.dynamodb.scanned_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.scanned_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbSegmentv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.segment",
	Title:        "The type of `aws.dynamodb.segment` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.segment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbSelectv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.select",
	Title:        "The type of `aws.dynamodb.select` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.select") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbTableCountv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_count",
	Title:        "The type of `aws.dynamodb.table_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.table_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbTableNamesv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_names",
	Title:        "The type of `aws.dynamodb.table_names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.table_names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsDynamodbTotalSegmentsv1260 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.total_segments",
	Title:        "The type of `aws.dynamodb.total_segments` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.total_segments") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsEcsClusterArnv1260 = &rule.AttributeRule{
	Name:         "type.aws.ecs.cluster.arn",
	Title:        "The type of `aws.ecs.cluster.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.cluster.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsEcsContainerArnv1260 = &rule.AttributeRule{
	Name:         "type.aws.ecs.container.arn",
	Title:        "The type of `aws.ecs.container.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.container.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsEcsTaskArnv1260 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.arn",
	Title:        "The type of `aws.ecs.task.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsEcsTaskFamilyv1260 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.family",
	Title:        "The type of `aws.ecs.task.family` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsEcsTaskIdv1260 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.id",
	Title:        "The type of `aws.ecs.task.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsEcsTaskRevisionv1260 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.revision",
	Title:        "The type of `aws.ecs.task.revision` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.revision") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsEksClusterArnv1260 = &rule.AttributeRule{
	Name:         "type.aws.eks.cluster.arn",
	Title:        "The type of `aws.eks.cluster.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.eks.cluster.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsLambdaInvokedArnv1260 = &rule.AttributeRule{
	Name:         "type.aws.lambda.invoked_arn",
	Title:        "The type of `aws.lambda.invoked_arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.lambda.invoked_arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsLogGroupArnsv1260 = &rule.AttributeRule{
	Name:         "type.aws.log.group.arns",
	Title:        "The type of `aws.log.group.arns` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.group.arns") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsLogGroupNamesv1260 = &rule.AttributeRule{
	Name:         "type.aws.log.group.names",
	Title:        "The type of `aws.log.group.names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.group.names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsLogStreamArnsv1260 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.arns",
	Title:        "The type of `aws.log.stream.arns` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.stream.arns") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsLogStreamNamesv1260 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.names",
	Title:        "The type of `aws.log.stream.names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.stream.names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsRequestIdv1260 = &rule.AttributeRule{
	Name:         "type.aws.request_id",
	Title:        "The type of `aws.request_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.request_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsS3Bucketv1260 = &rule.AttributeRule{
	Name:         "type.aws.s3.bucket",
	Title:        "The type of `aws.s3.bucket` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.bucket") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsS3CopySourcev1260 = &rule.AttributeRule{
	Name:         "type.aws.s3.copy_source",
	Title:        "The type of `aws.s3.copy_source` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.copy_source") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsS3Deletev1260 = &rule.AttributeRule{
	Name:         "type.aws.s3.delete",
	Title:        "The type of `aws.s3.delete` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.delete") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsS3Keyv1260 = &rule.AttributeRule{
	Name:         "type.aws.s3.key",
	Title:        "The type of `aws.s3.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsS3PartNumberv1260 = &rule.AttributeRule{
	Name:         "type.aws.s3.part_number",
	Title:        "The type of `aws.s3.part_number` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.s3.part_number") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeAwsS3UploadIdv1260 = &rule.AttributeRule{
	Name:         "type.aws.s3.upload_id",
	Title:        "The type of `aws.s3.upload_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.upload_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeBrowserBrandsv1260 = &rule.AttributeRule{
	Name:         "type.browser.brands",
	Title:        "The type of `browser.brands` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "browser.brands") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeBrowserLanguagev1260 = &rule.AttributeRule{
	Name:         "type.browser.language",
	Title:        "The type of `browser.language` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "browser.language") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeBrowserMobilev1260 = &rule.AttributeRule{
	Name:         "type.browser.mobile",
	Title:        "The type of `browser.mobile` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "browser.mobile") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeBrowserPlatformv1260 = &rule.AttributeRule{
	Name:         "type.browser.platform",
	Title:        "The type of `browser.platform` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "browser.platform") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeClientAddressv1260 = &rule.AttributeRule{
	Name:         "type.client.address",
	Title:        "The type of `client.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "client.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeClientPortv1260 = &rule.AttributeRule{
	Name:         "type.client.port",
	Title:        "The type of `client.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "client.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudAccountIdv1260 = &rule.AttributeRule{
	Name:         "type.cloud.account.id",
	Title:        "The type of `cloud.account.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.account.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudAvailabilityZonev1260 = &rule.AttributeRule{
	Name:         "type.cloud.availability_zone",
	Title:        "The type of `cloud.availability_zone` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.availability_zone") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudRegionv1260 = &rule.AttributeRule{
	Name:         "type.cloud.region",
	Title:        "The type of `cloud.region` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.region") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudResourceIdv1260 = &rule.AttributeRule{
	Name:         "type.cloud.resource_id",
	Title:        "The type of `cloud.resource_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.resource_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudeventsEventIdv1260 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_id",
	Title:        "The type of `cloudevents.event_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudeventsEventSourcev1260 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_source",
	Title:        "The type of `cloudevents.event_source` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_source") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudeventsEventSpecVersionv1260 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_spec_version",
	Title:        "The type of `cloudevents.event_spec_version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_spec_version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudeventsEventSubjectv1260 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_subject",
	Title:        "The type of `cloudevents.event_subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCloudeventsEventTypev1260 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_type",
	Title:        "The type of `cloudevents.event_type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCodeColumnv1260 = &rule.AttributeRule{
	Name:         "type.code.column",
	Title:        "The type of `code.column` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "code.column") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCodeFilepathv1260 = &rule.AttributeRule{
	Name:         "type.code.filepath",
	Title:        "The type of `code.filepath` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.filepath") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCodeFunctionv1260 = &rule.AttributeRule{
	Name:         "type.code.function",
	Title:        "The type of `code.function` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.function") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCodeLinenov1260 = &rule.AttributeRule{
	Name:         "type.code.lineno",
	Title:        "The type of `code.lineno` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "code.lineno") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCodeNamespacev1260 = &rule.AttributeRule{
	Name:         "type.code.namespace",
	Title:        "The type of `code.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeCodeStacktracev1260 = &rule.AttributeRule{
	Name:         "type.code.stacktrace",
	Title:        "The type of `code.stacktrace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.stacktrace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerCommandv1260 = &rule.AttributeRule{
	Name:         "type.container.command",
	Title:        "The type of `container.command` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.command") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerCommandArgsv1260 = &rule.AttributeRule{
	Name:         "type.container.command_args",
	Title:        "The type of `container.command_args` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.command_args") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerCommandLinev1260 = &rule.AttributeRule{
	Name:         "type.container.command_line",
	Title:        "The type of `container.command_line` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.command_line") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerIdv1260 = &rule.AttributeRule{
	Name:         "type.container.id",
	Title:        "The type of `container.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerImageIdv1260 = &rule.AttributeRule{
	Name:         "type.container.image.id",
	Title:        "The type of `container.image.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.image.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerImageNamev1260 = &rule.AttributeRule{
	Name:         "type.container.image.name",
	Title:        "The type of `container.image.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.image.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerImageRepoDigestsv1260 = &rule.AttributeRule{
	Name:         "type.container.image.repo_digests",
	Title:        "The type of `container.image.repo_digests` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.image.repo_digests") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerImageTagsv1260 = &rule.AttributeRule{
	Name:         "type.container.image.tags",
	Title:        "The type of `container.image.tags` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.image.tags") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerNamev1260 = &rule.AttributeRule{
	Name:         "type.container.name",
	Title:        "The type of `container.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeContainerRuntimev1260 = &rule.AttributeRule{
	Name:         "type.container.runtime",
	Title:        "The type of `container.runtime` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.runtime") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCassandraCoordinatorDcv1260 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.dc",
	Title:        "The type of `db.cassandra.coordinator.dc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.coordinator.dc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCassandraCoordinatorIdv1260 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.id",
	Title:        "The type of `db.cassandra.coordinator.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.coordinator.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCassandraIdempotencev1260 = &rule.AttributeRule{
	Name:         "type.db.cassandra.idempotence",
	Title:        "The type of `db.cassandra.idempotence` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "db.cassandra.idempotence") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCassandraPageSizev1260 = &rule.AttributeRule{
	Name:         "type.db.cassandra.page_size",
	Title:        "The type of `db.cassandra.page_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cassandra.page_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCassandraSpeculativeExecutionCountv1260 = &rule.AttributeRule{
	Name:         "type.db.cassandra.speculative_execution_count",
	Title:        "The type of `db.cassandra.speculative_execution_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cassandra.speculative_execution_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCassandraTablev1260 = &rule.AttributeRule{
	Name:         "type.db.cassandra.table",
	Title:        "The type of `db.cassandra.table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbClientConnectionsPoolNamev1260 = &rule.AttributeRule{
	Name:         "type.db.client.connections.pool.name",
	Title:        "The type of `db.client.connections.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.client.connections.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCollectionNamev1260 = &rule.AttributeRule{
	Name:         "type.db.collection.name",
	Title:        "The type of `db.collection.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.collection.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbConnectionStringv1260 = &rule.AttributeRule{
	Name:         "type.db.connection_string",
	Title:        "The type of `db.connection_string` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.connection_string") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCosmosdbClientIdv1260 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.client_id",
	Title:        "The type of `db.cosmosdb.client_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cosmosdb.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCosmosdbContainerv1260 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.container",
	Title:        "The type of `db.cosmosdb.container` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cosmosdb.container") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCosmosdbRequestChargev1260 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_charge",
	Title:        "The type of `db.cosmosdb.request_charge` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "db.cosmosdb.request_charge") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCosmosdbRequestContentLengthv1260 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_content_length",
	Title:        "The type of `db.cosmosdb.request_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCosmosdbStatusCodev1260 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.status_code",
	Title:        "The type of `db.cosmosdb.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbCosmosdbSubStatusCodev1260 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.sub_status_code",
	Title:        "The type of `db.cosmosdb.sub_status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.sub_status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbElasticsearchClusterNamev1260 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.cluster.name",
	Title:        "The type of `db.elasticsearch.cluster.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.elasticsearch.cluster.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbElasticsearchNodeNamev1260 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.node.name",
	Title:        "The type of `db.elasticsearch.node.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.elasticsearch.node.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbInstanceIdv1260 = &rule.AttributeRule{
	Name:         "type.db.instance.id",
	Title:        "The type of `db.instance.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbJdbcDriverClassnamev1260 = &rule.AttributeRule{
	Name:         "type.db.jdbc.driver_classname",
	Title:        "The type of `db.jdbc.driver_classname` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.jdbc.driver_classname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbMongodbCollectionv1260 = &rule.AttributeRule{
	Name:         "type.db.mongodb.collection",
	Title:        "The type of `db.mongodb.collection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.mongodb.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbMssqlInstanceNamev1260 = &rule.AttributeRule{
	Name:         "type.db.mssql.instance_name",
	Title:        "The type of `db.mssql.instance_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.mssql.instance_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbNamev1260 = &rule.AttributeRule{
	Name:         "type.db.name",
	Title:        "The type of `db.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbNamespacev1260 = &rule.AttributeRule{
	Name:         "type.db.namespace",
	Title:        "The type of `db.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbOperationv1260 = &rule.AttributeRule{
	Name:         "type.db.operation",
	Title:        "The type of `db.operation` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbOperationNamev1260 = &rule.AttributeRule{
	Name:         "type.db.operation.name",
	Title:        "The type of `db.operation.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.operation.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbQueryTextv1260 = &rule.AttributeRule{
	Name:         "type.db.query.text",
	Title:        "The type of `db.query.text` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.query.text") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbRedisDatabaseIndexv1260 = &rule.AttributeRule{
	Name:         "type.db.redis.database_index",
	Title:        "The type of `db.redis.database_index` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.redis.database_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbSqlTablev1260 = &rule.AttributeRule{
	Name:         "type.db.sql.table",
	Title:        "The type of `db.sql.table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.sql.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbStatementv1260 = &rule.AttributeRule{
	Name:         "type.db.statement",
	Title:        "The type of `db.statement` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.statement") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDbUserv1260 = &rule.AttributeRule{
	Name:         "type.db.user",
	Title:        "The type of `db.user` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.user") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDeploymentEnvironmentv1260 = &rule.AttributeRule{
	Name:         "type.deployment.environment",
	Title:        "The type of `deployment.environment` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "deployment.environment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDestinationAddressv1260 = &rule.AttributeRule{
	Name:         "type.destination.address",
	Title:        "The type of `destination.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "destination.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDestinationPortv1260 = &rule.AttributeRule{
	Name:         "type.destination.port",
	Title:        "The type of `destination.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "destination.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDeviceIdv1260 = &rule.AttributeRule{
	Name:         "type.device.id",
	Title:        "The type of `device.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDeviceManufacturerv1260 = &rule.AttributeRule{
	Name:         "type.device.manufacturer",
	Title:        "The type of `device.manufacturer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.manufacturer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDeviceModelIdentifierv1260 = &rule.AttributeRule{
	Name:         "type.device.model.identifier",
	Title:        "The type of `device.model.identifier` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.model.identifier") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDeviceModelNamev1260 = &rule.AttributeRule{
	Name:         "type.device.model.name",
	Title:        "The type of `device.model.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.model.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeDnsQuestionNamev1260 = &rule.AttributeRule{
	Name:         "type.dns.question.name",
	Title:        "The type of `dns.question.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "dns.question.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeEnduserIdv1260 = &rule.AttributeRule{
	Name:         "type.enduser.id",
	Title:        "The type of `enduser.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeEnduserRolev1260 = &rule.AttributeRule{
	Name:         "type.enduser.role",
	Title:        "The type of `enduser.role` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.role") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeEnduserScopev1260 = &rule.AttributeRule{
	Name:         "type.enduser.scope",
	Title:        "The type of `enduser.scope` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.scope") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeEventNamev1260 = &rule.AttributeRule{
	Name:         "type.event.name",
	Title:        "The type of `event.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "event.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeExceptionEscapedv1260 = &rule.AttributeRule{
	Name:         "type.exception.escaped",
	Title:        "The type of `exception.escaped` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "exception.escaped") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeExceptionMessagev1260 = &rule.AttributeRule{
	Name:         "type.exception.message",
	Title:        "The type of `exception.message` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.message") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeExceptionStacktracev1260 = &rule.AttributeRule{
	Name:         "type.exception.stacktrace",
	Title:        "The type of `exception.stacktrace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.stacktrace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeExceptionTypev1260 = &rule.AttributeRule{
	Name:         "type.exception.type",
	Title:        "The type of `exception.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasColdstartv1260 = &rule.AttributeRule{
	Name:         "type.faas.coldstart",
	Title:        "The type of `faas.coldstart` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "faas.coldstart") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasCronv1260 = &rule.AttributeRule{
	Name:         "type.faas.cron",
	Title:        "The type of `faas.cron` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.cron") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasDocumentCollectionv1260 = &rule.AttributeRule{
	Name:         "type.faas.document.collection",
	Title:        "The type of `faas.document.collection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasDocumentNamev1260 = &rule.AttributeRule{
	Name:         "type.faas.document.name",
	Title:        "The type of `faas.document.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasDocumentTimev1260 = &rule.AttributeRule{
	Name:         "type.faas.document.time",
	Title:        "The type of `faas.document.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasInstancev1260 = &rule.AttributeRule{
	Name:         "type.faas.instance",
	Title:        "The type of `faas.instance` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.instance") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasInvocationIdv1260 = &rule.AttributeRule{
	Name:         "type.faas.invocation_id",
	Title:        "The type of `faas.invocation_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invocation_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasInvokedNamev1260 = &rule.AttributeRule{
	Name:         "type.faas.invoked_name",
	Title:        "The type of `faas.invoked_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invoked_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasInvokedRegionv1260 = &rule.AttributeRule{
	Name:         "type.faas.invoked_region",
	Title:        "The type of `faas.invoked_region` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invoked_region") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasMaxMemoryv1260 = &rule.AttributeRule{
	Name:         "type.faas.max_memory",
	Title:        "The type of `faas.max_memory` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "faas.max_memory") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasNamev1260 = &rule.AttributeRule{
	Name:         "type.faas.name",
	Title:        "The type of `faas.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasTimev1260 = &rule.AttributeRule{
	Name:         "type.faas.time",
	Title:        "The type of `faas.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFaasVersionv1260 = &rule.AttributeRule{
	Name:         "type.faas.version",
	Title:        "The type of `faas.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFeatureFlagKeyv1260 = &rule.AttributeRule{
	Name:         "type.feature_flag.key",
	Title:        "The type of `feature_flag.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFeatureFlagProviderNamev1260 = &rule.AttributeRule{
	Name:         "type.feature_flag.provider_name",
	Title:        "The type of `feature_flag.provider_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.provider_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFeatureFlagVariantv1260 = &rule.AttributeRule{
	Name:         "type.feature_flag.variant",
	Title:        "The type of `feature_flag.variant` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.variant") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFileDirectoryv1260 = &rule.AttributeRule{
	Name:         "type.file.directory",
	Title:        "The type of `file.directory` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.directory") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFileExtensionv1260 = &rule.AttributeRule{
	Name:         "type.file.extension",
	Title:        "The type of `file.extension` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.extension") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFileNamev1260 = &rule.AttributeRule{
	Name:         "type.file.name",
	Title:        "The type of `file.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFilePathv1260 = &rule.AttributeRule{
	Name:         "type.file.path",
	Title:        "The type of `file.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeFileSizev1260 = &rule.AttributeRule{
	Name:         "type.file.size",
	Title:        "The type of `file.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "file.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGcpCloudRunJobExecutionv1260 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.execution",
	Title:        "The type of `gcp.cloud_run.job.execution` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.cloud_run.job.execution") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGcpCloudRunJobTaskIndexv1260 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.task_index",
	Title:        "The type of `gcp.cloud_run.job.task_index` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gcp.cloud_run.job.task_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGcpGceInstanceHostnamev1260 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.hostname",
	Title:        "The type of `gcp.gce.instance.hostname` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.gce.instance.hostname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGcpGceInstanceNamev1260 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.name",
	Title:        "The type of `gcp.gce.instance.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.gce.instance.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiCompletionv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.completion",
	Title:        "The type of `gen_ai.completion` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.completion") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiPromptv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.prompt",
	Title:        "The type of `gen_ai.prompt` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.prompt") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiRequestMaxTokensv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.max_tokens",
	Title:        "The type of `gen_ai.request.max_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.request.max_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiRequestModelv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.model",
	Title:        "The type of `gen_ai.request.model` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.request.model") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiRequestTemperaturev1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.temperature",
	Title:        "The type of `gen_ai.request.temperature` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "gen_ai.request.temperature") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiRequestTopPv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.top_p",
	Title:        "The type of `gen_ai.request.top_p` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "gen_ai.request.top_p") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiResponseFinishReasonsv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.response.finish_reasons",
	Title:        "The type of `gen_ai.response.finish_reasons` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "gen_ai.response.finish_reasons") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiResponseIdv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.response.id",
	Title:        "The type of `gen_ai.response.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.response.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiResponseModelv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.response.model",
	Title:        "The type of `gen_ai.response.model` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.response.model") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiUsageCompletionTokensv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.usage.completion_tokens",
	Title:        "The type of `gen_ai.usage.completion_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.usage.completion_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGenAiUsagePromptTokensv1260 = &rule.AttributeRule{
	Name:         "type.gen_ai.usage.prompt_tokens",
	Title:        "The type of `gen_ai.usage.prompt_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.usage.prompt_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGraphqlDocumentv1260 = &rule.AttributeRule{
	Name:         "type.graphql.document",
	Title:        "The type of `graphql.document` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "graphql.document") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeGraphqlOperationNamev1260 = &rule.AttributeRule{
	Name:         "type.graphql.operation.name",
	Title:        "The type of `graphql.operation.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "graphql.operation.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHerokuAppIdv1260 = &rule.AttributeRule{
	Name:         "type.heroku.app.id",
	Title:        "The type of `heroku.app.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.app.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHerokuReleaseCommitv1260 = &rule.AttributeRule{
	Name:         "type.heroku.release.commit",
	Title:        "The type of `heroku.release.commit` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.release.commit") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHerokuReleaseCreationTimestampv1260 = &rule.AttributeRule{
	Name:         "type.heroku.release.creation_timestamp",
	Title:        "The type of `heroku.release.creation_timestamp` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.release.creation_timestamp") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostCpuCacheL2Sizev1260 = &rule.AttributeRule{
	Name:         "type.host.cpu.cache.l2.size",
	Title:        "The type of `host.cpu.cache.l2.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "host.cpu.cache.l2.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostCpuFamilyv1260 = &rule.AttributeRule{
	Name:         "type.host.cpu.family",
	Title:        "The type of `host.cpu.family` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostCpuModelIdv1260 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.id",
	Title:        "The type of `host.cpu.model.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.model.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostCpuModelNamev1260 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.name",
	Title:        "The type of `host.cpu.model.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.model.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostCpuSteppingv1260 = &rule.AttributeRule{
	Name:         "type.host.cpu.stepping",
	Title:        "The type of `host.cpu.stepping` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.stepping") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostCpuVendorIdv1260 = &rule.AttributeRule{
	Name:         "type.host.cpu.vendor.id",
	Title:        "The type of `host.cpu.vendor.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.vendor.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostIdv1260 = &rule.AttributeRule{
	Name:         "type.host.id",
	Title:        "The type of `host.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostImageIdv1260 = &rule.AttributeRule{
	Name:         "type.host.image.id",
	Title:        "The type of `host.image.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostImageNamev1260 = &rule.AttributeRule{
	Name:         "type.host.image.name",
	Title:        "The type of `host.image.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostImageVersionv1260 = &rule.AttributeRule{
	Name:         "type.host.image.version",
	Title:        "The type of `host.image.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostIpv1260 = &rule.AttributeRule{
	Name:         "type.host.ip",
	Title:        "The type of `host.ip` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "host.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostMacv1260 = &rule.AttributeRule{
	Name:         "type.host.mac",
	Title:        "The type of `host.mac` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "host.mac") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostNamev1260 = &rule.AttributeRule{
	Name:         "type.host.name",
	Title:        "The type of `host.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHostTypev1260 = &rule.AttributeRule{
	Name:         "type.host.type",
	Title:        "The type of `host.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpClientIpv1260 = &rule.AttributeRule{
	Name:         "type.http.client_ip",
	Title:        "The type of `http.client_ip` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.client_ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpHostv1260 = &rule.AttributeRule{
	Name:         "type.http.host",
	Title:        "The type of `http.host` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.host") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpMethodv1260 = &rule.AttributeRule{
	Name:         "type.http.method",
	Title:        "The type of `http.method` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpRequestBodySizev1260 = &rule.AttributeRule{
	Name:         "type.http.request.body.size",
	Title:        "The type of `http.request.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpRequestMethodOriginalv1260 = &rule.AttributeRule{
	Name:         "type.http.request.method_original",
	Title:        "The type of `http.request.method_original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.request.method_original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpRequestResendCountv1260 = &rule.AttributeRule{
	Name:         "type.http.request.resend_count",
	Title:        "The type of `http.request.resend_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.resend_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpRequestSizev1260 = &rule.AttributeRule{
	Name:         "type.http.request.size",
	Title:        "The type of `http.request.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpRequestContentLengthv1260 = &rule.AttributeRule{
	Name:         "type.http.request_content_length",
	Title:        "The type of `http.request_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpRequestContentLengthUncompressedv1260 = &rule.AttributeRule{
	Name:         "type.http.request_content_length_uncompressed",
	Title:        "The type of `http.request_content_length_uncompressed` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpResponseBodySizev1260 = &rule.AttributeRule{
	Name:         "type.http.response.body.size",
	Title:        "The type of `http.response.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpResponseSizev1260 = &rule.AttributeRule{
	Name:         "type.http.response.size",
	Title:        "The type of `http.response.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpResponseStatusCodev1260 = &rule.AttributeRule{
	Name:         "type.http.response.status_code",
	Title:        "The type of `http.response.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpResponseContentLengthv1260 = &rule.AttributeRule{
	Name:         "type.http.response_content_length",
	Title:        "The type of `http.response_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpResponseContentLengthUncompressedv1260 = &rule.AttributeRule{
	Name:         "type.http.response_content_length_uncompressed",
	Title:        "The type of `http.response_content_length_uncompressed` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpRoutev1260 = &rule.AttributeRule{
	Name:         "type.http.route",
	Title:        "The type of `http.route` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.route") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpSchemev1260 = &rule.AttributeRule{
	Name:         "type.http.scheme",
	Title:        "The type of `http.scheme` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpServerNamev1260 = &rule.AttributeRule{
	Name:         "type.http.server_name",
	Title:        "The type of `http.server_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpStatusCodev1260 = &rule.AttributeRule{
	Name:         "type.http.status_code",
	Title:        "The type of `http.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpTargetv1260 = &rule.AttributeRule{
	Name:         "type.http.target",
	Title:        "The type of `http.target` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.target") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpUrlv1260 = &rule.AttributeRule{
	Name:         "type.http.url",
	Title:        "The type of `http.url` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.url") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeHttpUserAgentv1260 = &rule.AttributeRule{
	Name:         "type.http.user_agent",
	Title:        "The type of `http.user_agent` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.user_agent") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeJvmBufferPoolNamev1260 = &rule.AttributeRule{
	Name:         "type.jvm.buffer.pool.name",
	Title:        "The type of `jvm.buffer.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.buffer.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeJvmGcActionv1260 = &rule.AttributeRule{
	Name:         "type.jvm.gc.action",
	Title:        "The type of `jvm.gc.action` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.gc.action") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeJvmGcNamev1260 = &rule.AttributeRule{
	Name:         "type.jvm.gc.name",
	Title:        "The type of `jvm.gc.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.gc.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeJvmMemoryPoolNamev1260 = &rule.AttributeRule{
	Name:         "type.jvm.memory.pool.name",
	Title:        "The type of `jvm.memory.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.memory.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeJvmThreadDaemonv1260 = &rule.AttributeRule{
	Name:         "type.jvm.thread.daemon",
	Title:        "The type of `jvm.thread.daemon` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "jvm.thread.daemon") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SClusterNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.name",
	Title:        "The type of `k8s.cluster.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cluster.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SClusterUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.uid",
	Title:        "The type of `k8s.cluster.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cluster.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SContainerNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.container.name",
	Title:        "The type of `k8s.container.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.container.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SContainerRestartCountv1260 = &rule.AttributeRule{
	Name:         "type.k8s.container.restart_count",
	Title:        "The type of `k8s.container.restart_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "k8s.container.restart_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SContainerStatusLastTerminatedReasonv1260 = &rule.AttributeRule{
	Name:         "type.k8s.container.status.last_terminated_reason",
	Title:        "The type of `k8s.container.status.last_terminated_reason` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.container.status.last_terminated_reason") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SCronjobNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.name",
	Title:        "The type of `k8s.cronjob.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cronjob.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SCronjobUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.uid",
	Title:        "The type of `k8s.cronjob.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cronjob.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SDaemonsetNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.name",
	Title:        "The type of `k8s.daemonset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.daemonset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SDaemonsetUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.uid",
	Title:        "The type of `k8s.daemonset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.daemonset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SDeploymentNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.name",
	Title:        "The type of `k8s.deployment.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.deployment.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SDeploymentUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.uid",
	Title:        "The type of `k8s.deployment.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.deployment.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SJobNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.job.name",
	Title:        "The type of `k8s.job.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.job.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SJobUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.job.uid",
	Title:        "The type of `k8s.job.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.job.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SNamespaceNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.namespace.name",
	Title:        "The type of `k8s.namespace.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.namespace.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SNodeNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.node.name",
	Title:        "The type of `k8s.node.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.node.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SNodeUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.node.uid",
	Title:        "The type of `k8s.node.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.node.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SPodNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.pod.name",
	Title:        "The type of `k8s.pod.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.pod.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SPodUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.pod.uid",
	Title:        "The type of `k8s.pod.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.pod.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SReplicasetNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.name",
	Title:        "The type of `k8s.replicaset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.replicaset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SReplicasetUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.uid",
	Title:        "The type of `k8s.replicaset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.replicaset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SStatefulsetNamev1260 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.name",
	Title:        "The type of `k8s.statefulset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.statefulset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeK8SStatefulsetUidv1260 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.uid",
	Title:        "The type of `k8s.statefulset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.statefulset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeLogFileNamev1260 = &rule.AttributeRule{
	Name:         "type.log.file.name",
	Title:        "The type of `log.file.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeLogFileNameResolvedv1260 = &rule.AttributeRule{
	Name:         "type.log.file.name_resolved",
	Title:        "The type of `log.file.name_resolved` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.name_resolved") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeLogFilePathv1260 = &rule.AttributeRule{
	Name:         "type.log.file.path",
	Title:        "The type of `log.file.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeLogFilePathResolvedv1260 = &rule.AttributeRule{
	Name:         "type.log.file.path_resolved",
	Title:        "The type of `log.file.path_resolved` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.path_resolved") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeLogRecordUidv1260 = &rule.AttributeRule{
	Name:         "type.log.record.uid",
	Title:        "The type of `log.record.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.record.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessageCompressedSizev1260 = &rule.AttributeRule{
	Name:         "type.message.compressed_size",
	Title:        "The type of `message.compressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.compressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessageIdv1260 = &rule.AttributeRule{
	Name:         "type.message.id",
	Title:        "The type of `message.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessageUncompressedSizev1260 = &rule.AttributeRule{
	Name:         "type.message.uncompressed_size",
	Title:        "The type of `message.uncompressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.uncompressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingBatchMessageCountv1260 = &rule.AttributeRule{
	Name:         "type.messaging.batch.message_count",
	Title:        "The type of `messaging.batch.message_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.batch.message_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingClientIdv1260 = &rule.AttributeRule{
	Name:         "type.messaging.client.id",
	Title:        "The type of `messaging.client.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.client.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingClient_Idv1260 = &rule.AttributeRule{
	Name:         "type.messaging.client_id",
	Title:        "The type of `messaging.client_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingDestinationAnonymousv1260 = &rule.AttributeRule{
	Name:         "type.messaging.destination.anonymous",
	Title:        "The type of `messaging.destination.anonymous` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination.anonymous") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingDestinationNamev1260 = &rule.AttributeRule{
	Name:         "type.messaging.destination.name",
	Title:        "The type of `messaging.destination.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingDestinationPartitionIdv1260 = &rule.AttributeRule{
	Name:         "type.messaging.destination.partition.id",
	Title:        "The type of `messaging.destination.partition.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.partition.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingDestinationTemplatev1260 = &rule.AttributeRule{
	Name:         "type.messaging.destination.template",
	Title:        "The type of `messaging.destination.template` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.template") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingDestinationTemporaryv1260 = &rule.AttributeRule{
	Name:         "type.messaging.destination.temporary",
	Title:        "The type of `messaging.destination.temporary` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination.temporary") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingDestinationPublishAnonymousv1260 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.anonymous",
	Title:        "The type of `messaging.destination_publish.anonymous` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination_publish.anonymous") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingDestinationPublishNamev1260 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.name",
	Title:        "The type of `messaging.destination_publish.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination_publish.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingEventhubsConsumerGroupv1260 = &rule.AttributeRule{
	Name:         "type.messaging.eventhubs.consumer.group",
	Title:        "The type of `messaging.eventhubs.consumer.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.eventhubs.consumer.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingEventhubsMessageEnqueuedTimev1260 = &rule.AttributeRule{
	Name:         "type.messaging.eventhubs.message.enqueued_time",
	Title:        "The type of `messaging.eventhubs.message.enqueued_time` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.eventhubs.message.enqueued_time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingGcpPubsubMessageAckDeadlinev1260 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ack_deadline",
	Title:        "The type of `messaging.gcp_pubsub.message.ack_deadline` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.gcp_pubsub.message.ack_deadline") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingGcpPubsubMessageAckIdv1260 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ack_id",
	Title:        "The type of `messaging.gcp_pubsub.message.ack_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.gcp_pubsub.message.ack_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingGcpPubsubMessageDeliveryAttemptv1260 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.delivery_attempt",
	Title:        "The type of `messaging.gcp_pubsub.message.delivery_attempt` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.gcp_pubsub.message.delivery_attempt") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingGcpPubsubMessageOrderingKeyv1260 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ordering_key",
	Title:        "The type of `messaging.gcp_pubsub.message.ordering_key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.gcp_pubsub.message.ordering_key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingKafkaConsumerGroupv1260 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.consumer.group",
	Title:        "The type of `messaging.kafka.consumer.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.kafka.consumer.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingKafkaDestinationPartitionv1260 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.destination.partition",
	Title:        "The type of `messaging.kafka.destination.partition` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.kafka.destination.partition") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingKafkaMessageKeyv1260 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.key",
	Title:        "The type of `messaging.kafka.message.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.kafka.message.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingKafkaMessageOffsetv1260 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.offset",
	Title:        "The type of `messaging.kafka.message.offset` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.kafka.message.offset") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingKafkaMessageTombstonev1260 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.tombstone",
	Title:        "The type of `messaging.kafka.message.tombstone` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.kafka.message.tombstone") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingMessageBodySizev1260 = &rule.AttributeRule{
	Name:         "type.messaging.message.body.size",
	Title:        "The type of `messaging.message.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.message.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingMessageConversationIdv1260 = &rule.AttributeRule{
	Name:         "type.messaging.message.conversation_id",
	Title:        "The type of `messaging.message.conversation_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.message.conversation_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingMessageEnvelopeSizev1260 = &rule.AttributeRule{
	Name:         "type.messaging.message.envelope.size",
	Title:        "The type of `messaging.message.envelope.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.message.envelope.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingMessageIdv1260 = &rule.AttributeRule{
	Name:         "type.messaging.message.id",
	Title:        "The type of `messaging.message.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingOperationv1260 = &rule.AttributeRule{
	Name:         "type.messaging.operation",
	Title:        "The type of `messaging.operation` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingOperationNamev1260 = &rule.AttributeRule{
	Name:         "type.messaging.operation.name",
	Title:        "The type of `messaging.operation.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.operation.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRabbitmqDestinationRoutingKeyv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.destination.routing_key",
	Title:        "The type of `messaging.rabbitmq.destination.routing_key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rabbitmq.destination.routing_key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRabbitmqMessageDeliveryTagv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.message.delivery_tag",
	Title:        "The type of `messaging.rabbitmq.message.delivery_tag` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rabbitmq.message.delivery_tag") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRocketmqClientGroupv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.client_group",
	Title:        "The type of `messaging.rocketmq.client_group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.client_group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRocketmqMessageDelayTimeLevelv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delay_time_level",
	Title:        "The type of `messaging.rocketmq.message.delay_time_level` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rocketmq.message.delay_time_level") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRocketmqMessageDeliveryTimestampv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delivery_timestamp",
	Title:        "The type of `messaging.rocketmq.message.delivery_timestamp` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rocketmq.message.delivery_timestamp") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRocketmqMessageGroupv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.group",
	Title:        "The type of `messaging.rocketmq.message.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.message.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRocketmqMessageKeysv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.keys",
	Title:        "The type of `messaging.rocketmq.message.keys` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "messaging.rocketmq.message.keys") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRocketmqMessageTagv1260 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.tag",
	Title:        "The type of `messaging.rocketmq.message.tag` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.message.tag") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingRocketmqNamespacev1260 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.namespace",
	Title:        "The type of `messaging.rocketmq.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingServicebusDestinationSubscriptionNamev1260 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.destination.subscription_name",
	Title:        "The type of `messaging.servicebus.destination.subscription_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.servicebus.destination.subscription_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingServicebusMessageDeliveryCountv1260 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.message.delivery_count",
	Title:        "The type of `messaging.servicebus.message.delivery_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.servicebus.message.delivery_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeMessagingServicebusMessageEnqueuedTimev1260 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.message.enqueued_time",
	Title:        "The type of `messaging.servicebus.message.enqueued_time` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.servicebus.message.enqueued_time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetHostIpv1260 = &rule.AttributeRule{
	Name:         "type.net.host.ip",
	Title:        "The type of `net.host.ip` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.host.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetHostNamev1260 = &rule.AttributeRule{
	Name:         "type.net.host.name",
	Title:        "The type of `net.host.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetHostPortv1260 = &rule.AttributeRule{
	Name:         "type.net.host.port",
	Title:        "The type of `net.host.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetPeerIpv1260 = &rule.AttributeRule{
	Name:         "type.net.peer.ip",
	Title:        "The type of `net.peer.ip` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.peer.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetPeerNamev1260 = &rule.AttributeRule{
	Name:         "type.net.peer.name",
	Title:        "The type of `net.peer.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetPeerPortv1260 = &rule.AttributeRule{
	Name:         "type.net.peer.port",
	Title:        "The type of `net.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetProtocolNamev1260 = &rule.AttributeRule{
	Name:         "type.net.protocol.name",
	Title:        "The type of `net.protocol.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetProtocolVersionv1260 = &rule.AttributeRule{
	Name:         "type.net.protocol.version",
	Title:        "The type of `net.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetSockHostAddrv1260 = &rule.AttributeRule{
	Name:         "type.net.sock.host.addr",
	Title:        "The type of `net.sock.host.addr` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.host.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetSockHostPortv1260 = &rule.AttributeRule{
	Name:         "type.net.sock.host.port",
	Title:        "The type of `net.sock.host.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.sock.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetSockPeerAddrv1260 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.addr",
	Title:        "The type of `net.sock.peer.addr` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.peer.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetSockPeerNamev1260 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.name",
	Title:        "The type of `net.sock.peer.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetSockPeerPortv1260 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.port",
	Title:        "The type of `net.sock.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.sock.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkCarrierIccv1260 = &rule.AttributeRule{
	Name:         "type.network.carrier.icc",
	Title:        "The type of `network.carrier.icc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.icc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkCarrierMccv1260 = &rule.AttributeRule{
	Name:         "type.network.carrier.mcc",
	Title:        "The type of `network.carrier.mcc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.mcc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkCarrierMncv1260 = &rule.AttributeRule{
	Name:         "type.network.carrier.mnc",
	Title:        "The type of `network.carrier.mnc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.mnc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkCarrierNamev1260 = &rule.AttributeRule{
	Name:         "type.network.carrier.name",
	Title:        "The type of `network.carrier.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkLocalAddressv1260 = &rule.AttributeRule{
	Name:         "type.network.local.address",
	Title:        "The type of `network.local.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.local.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkLocalPortv1260 = &rule.AttributeRule{
	Name:         "type.network.local.port",
	Title:        "The type of `network.local.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "network.local.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkPeerAddressv1260 = &rule.AttributeRule{
	Name:         "type.network.peer.address",
	Title:        "The type of `network.peer.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.peer.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkPeerPortv1260 = &rule.AttributeRule{
	Name:         "type.network.peer.port",
	Title:        "The type of `network.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "network.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkProtocolNamev1260 = &rule.AttributeRule{
	Name:         "type.network.protocol.name",
	Title:        "The type of `network.protocol.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeNetworkProtocolVersionv1260 = &rule.AttributeRule{
	Name:         "type.network.protocol.version",
	Title:        "The type of `network.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOciManifestDigestv1260 = &rule.AttributeRule{
	Name:         "type.oci.manifest.digest",
	Title:        "The type of `oci.manifest.digest` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "oci.manifest.digest") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOsBuildIdv1260 = &rule.AttributeRule{
	Name:         "type.os.build_id",
	Title:        "The type of `os.build_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.build_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOsDescriptionv1260 = &rule.AttributeRule{
	Name:         "type.os.description",
	Title:        "The type of `os.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOsNamev1260 = &rule.AttributeRule{
	Name:         "type.os.name",
	Title:        "The type of `os.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOsVersionv1260 = &rule.AttributeRule{
	Name:         "type.os.version",
	Title:        "The type of `os.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOtelLibraryNamev1260 = &rule.AttributeRule{
	Name:         "type.otel.library.name",
	Title:        "The type of `otel.library.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.library.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOtelLibraryVersionv1260 = &rule.AttributeRule{
	Name:         "type.otel.library.version",
	Title:        "The type of `otel.library.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.library.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOtelScopeNamev1260 = &rule.AttributeRule{
	Name:         "type.otel.scope.name",
	Title:        "The type of `otel.scope.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.scope.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOtelScopeVersionv1260 = &rule.AttributeRule{
	Name:         "type.otel.scope.version",
	Title:        "The type of `otel.scope.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.scope.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeOtelStatusDescriptionv1260 = &rule.AttributeRule{
	Name:         "type.otel.status_description",
	Title:        "The type of `otel.status_description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.status_description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypePeerServicev1260 = &rule.AttributeRule{
	Name:         "type.peer.service",
	Title:        "The type of `peer.service` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "peer.service") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypePoolNamev1260 = &rule.AttributeRule{
	Name:         "type.pool.name",
	Title:        "The type of `pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessCommandv1260 = &rule.AttributeRule{
	Name:         "type.process.command",
	Title:        "The type of `process.command` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.command") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessCommandArgsv1260 = &rule.AttributeRule{
	Name:         "type.process.command_args",
	Title:        "The type of `process.command_args` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "process.command_args") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessCommandLinev1260 = &rule.AttributeRule{
	Name:         "type.process.command_line",
	Title:        "The type of `process.command_line` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.command_line") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessCreationTimev1260 = &rule.AttributeRule{
	Name:         "type.process.creation.time",
	Title:        "The type of `process.creation.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.creation.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessExecutableNamev1260 = &rule.AttributeRule{
	Name:         "type.process.executable.name",
	Title:        "The type of `process.executable.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.executable.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessExecutablePathv1260 = &rule.AttributeRule{
	Name:         "type.process.executable.path",
	Title:        "The type of `process.executable.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.executable.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessExitCodev1260 = &rule.AttributeRule{
	Name:         "type.process.exit.code",
	Title:        "The type of `process.exit.code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.exit.code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessExitTimev1260 = &rule.AttributeRule{
	Name:         "type.process.exit.time",
	Title:        "The type of `process.exit.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.exit.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessGroupLeaderPidv1260 = &rule.AttributeRule{
	Name:         "type.process.group_leader.pid",
	Title:        "The type of `process.group_leader.pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.group_leader.pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessInteractivev1260 = &rule.AttributeRule{
	Name:         "type.process.interactive",
	Title:        "The type of `process.interactive` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "process.interactive") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessOwnerv1260 = &rule.AttributeRule{
	Name:         "type.process.owner",
	Title:        "The type of `process.owner` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.owner") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessParentPidv1260 = &rule.AttributeRule{
	Name:         "type.process.parent_pid",
	Title:        "The type of `process.parent_pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.parent_pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessPidv1260 = &rule.AttributeRule{
	Name:         "type.process.pid",
	Title:        "The type of `process.pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessRealUserIdv1260 = &rule.AttributeRule{
	Name:         "type.process.real_user.id",
	Title:        "The type of `process.real_user.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.real_user.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessRealUserNamev1260 = &rule.AttributeRule{
	Name:         "type.process.real_user.name",
	Title:        "The type of `process.real_user.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.real_user.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessRuntimeDescriptionv1260 = &rule.AttributeRule{
	Name:         "type.process.runtime.description",
	Title:        "The type of `process.runtime.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessRuntimeNamev1260 = &rule.AttributeRule{
	Name:         "type.process.runtime.name",
	Title:        "The type of `process.runtime.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessRuntimeVersionv1260 = &rule.AttributeRule{
	Name:         "type.process.runtime.version",
	Title:        "The type of `process.runtime.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessSavedUserIdv1260 = &rule.AttributeRule{
	Name:         "type.process.saved_user.id",
	Title:        "The type of `process.saved_user.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.saved_user.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessSavedUserNamev1260 = &rule.AttributeRule{
	Name:         "type.process.saved_user.name",
	Title:        "The type of `process.saved_user.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.saved_user.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessSessionLeaderPidv1260 = &rule.AttributeRule{
	Name:         "type.process.session_leader.pid",
	Title:        "The type of `process.session_leader.pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.session_leader.pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessUserIdv1260 = &rule.AttributeRule{
	Name:         "type.process.user.id",
	Title:        "The type of `process.user.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.user.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessUserNamev1260 = &rule.AttributeRule{
	Name:         "type.process.user.name",
	Title:        "The type of `process.user.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.user.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeProcessVpidv1260 = &rule.AttributeRule{
	Name:         "type.process.vpid",
	Title:        "The type of `process.vpid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.vpid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcJsonrpcErrorCodev1260 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_code",
	Title:        "The type of `rpc.jsonrpc.error_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.jsonrpc.error_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcJsonrpcErrorMessagev1260 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_message",
	Title:        "The type of `rpc.jsonrpc.error_message` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.error_message") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcJsonrpcRequestIdv1260 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.request_id",
	Title:        "The type of `rpc.jsonrpc.request_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.request_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcJsonrpcVersionv1260 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.version",
	Title:        "The type of `rpc.jsonrpc.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcMessageCompressedSizev1260 = &rule.AttributeRule{
	Name:         "type.rpc.message.compressed_size",
	Title:        "The type of `rpc.message.compressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.message.compressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcMessageIdv1260 = &rule.AttributeRule{
	Name:         "type.rpc.message.id",
	Title:        "The type of `rpc.message.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcMessageUncompressedSizev1260 = &rule.AttributeRule{
	Name:         "type.rpc.message.uncompressed_size",
	Title:        "The type of `rpc.message.uncompressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.message.uncompressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcMethodv1260 = &rule.AttributeRule{
	Name:         "type.rpc.method",
	Title:        "The type of `rpc.method` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeRpcServicev1260 = &rule.AttributeRule{
	Name:         "type.rpc.service",
	Title:        "The type of `rpc.service` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.service") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeServerAddressv1260 = &rule.AttributeRule{
	Name:         "type.server.address",
	Title:        "The type of `server.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "server.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeServerPortv1260 = &rule.AttributeRule{
	Name:         "type.server.port",
	Title:        "The type of `server.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "server.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeServiceInstanceIdv1260 = &rule.AttributeRule{
	Name:         "type.service.instance.id",
	Title:        "The type of `service.instance.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeServiceNamev1260 = &rule.AttributeRule{
	Name:         "type.service.name",
	Title:        "The type of `service.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeServiceNamespacev1260 = &rule.AttributeRule{
	Name:         "type.service.namespace",
	Title:        "The type of `service.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeServiceVersionv1260 = &rule.AttributeRule{
	Name:         "type.service.version",
	Title:        "The type of `service.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSessionIdv1260 = &rule.AttributeRule{
	Name:         "type.session.id",
	Title:        "The type of `session.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "session.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSessionPreviousIdv1260 = &rule.AttributeRule{
	Name:         "type.session.previous_id",
	Title:        "The type of `session.previous_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "session.previous_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSourceAddressv1260 = &rule.AttributeRule{
	Name:         "type.source.address",
	Title:        "The type of `source.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "source.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSourcePortv1260 = &rule.AttributeRule{
	Name:         "type.source.port",
	Title:        "The type of `source.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "source.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSystemCpuLogicalNumberv1260 = &rule.AttributeRule{
	Name:         "type.system.cpu.logical_number",
	Title:        "The type of `system.cpu.logical_number` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "system.cpu.logical_number") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSystemDevicev1260 = &rule.AttributeRule{
	Name:         "type.system.device",
	Title:        "The type of `system.device` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.device") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSystemFilesystemModev1260 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mode",
	Title:        "The type of `system.filesystem.mode` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.filesystem.mode") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeSystemFilesystemMountpointv1260 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mountpoint",
	Title:        "The type of `system.filesystem.mountpoint` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.filesystem.mountpoint") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTelemetryDistroNamev1260 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.name",
	Title:        "The type of `telemetry.distro.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.distro.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTelemetryDistroVersionv1260 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.version",
	Title:        "The type of `telemetry.distro.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.distro.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTelemetrySdkNamev1260 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.name",
	Title:        "The type of `telemetry.sdk.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.sdk.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTelemetrySdkVersionv1260 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.version",
	Title:        "The type of `telemetry.sdk.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.sdk.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeThreadIdv1260 = &rule.AttributeRule{
	Name:         "type.thread.id",
	Title:        "The type of `thread.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "thread.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeThreadNamev1260 = &rule.AttributeRule{
	Name:         "type.thread.name",
	Title:        "The type of `thread.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "thread.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsCipherv1260 = &rule.AttributeRule{
	Name:         "type.tls.cipher",
	Title:        "The type of `tls.cipher` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.cipher") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientCertificatev1260 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate",
	Title:        "The type of `tls.client.certificate` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.certificate") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientCertificateChainv1260 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate_chain",
	Title:        "The type of `tls.client.certificate_chain` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.client.certificate_chain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientHashMd5v1260 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.md5",
	Title:        "The type of `tls.client.hash.md5` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.md5") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientHashSha1v1260 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha1",
	Title:        "The type of `tls.client.hash.sha1` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.sha1") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientHashSha256v1260 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha256",
	Title:        "The type of `tls.client.hash.sha256` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.sha256") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientIssuerv1260 = &rule.AttributeRule{
	Name:         "type.tls.client.issuer",
	Title:        "The type of `tls.client.issuer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.issuer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientJa3v1260 = &rule.AttributeRule{
	Name:         "type.tls.client.ja3",
	Title:        "The type of `tls.client.ja3` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.ja3") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientNotAfterv1260 = &rule.AttributeRule{
	Name:         "type.tls.client.not_after",
	Title:        "The type of `tls.client.not_after` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.not_after") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientNotBeforev1260 = &rule.AttributeRule{
	Name:         "type.tls.client.not_before",
	Title:        "The type of `tls.client.not_before` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.not_before") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientServerNamev1260 = &rule.AttributeRule{
	Name:         "type.tls.client.server_name",
	Title:        "The type of `tls.client.server_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientSubjectv1260 = &rule.AttributeRule{
	Name:         "type.tls.client.subject",
	Title:        "The type of `tls.client.subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsClientSupportedCiphersv1260 = &rule.AttributeRule{
	Name:         "type.tls.client.supported_ciphers",
	Title:        "The type of `tls.client.supported_ciphers` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.client.supported_ciphers") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsCurvev1260 = &rule.AttributeRule{
	Name:         "type.tls.curve",
	Title:        "The type of `tls.curve` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.curve") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsEstablishedv1260 = &rule.AttributeRule{
	Name:         "type.tls.established",
	Title:        "The type of `tls.established` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "tls.established") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsNextProtocolv1260 = &rule.AttributeRule{
	Name:         "type.tls.next_protocol",
	Title:        "The type of `tls.next_protocol` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.next_protocol") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsProtocolVersionv1260 = &rule.AttributeRule{
	Name:         "type.tls.protocol.version",
	Title:        "The type of `tls.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsResumedv1260 = &rule.AttributeRule{
	Name:         "type.tls.resumed",
	Title:        "The type of `tls.resumed` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "tls.resumed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerCertificatev1260 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate",
	Title:        "The type of `tls.server.certificate` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.certificate") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerCertificateChainv1260 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate_chain",
	Title:        "The type of `tls.server.certificate_chain` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.server.certificate_chain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerHashMd5v1260 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.md5",
	Title:        "The type of `tls.server.hash.md5` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.md5") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerHashSha1v1260 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha1",
	Title:        "The type of `tls.server.hash.sha1` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.sha1") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerHashSha256v1260 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha256",
	Title:        "The type of `tls.server.hash.sha256` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.sha256") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerIssuerv1260 = &rule.AttributeRule{
	Name:         "type.tls.server.issuer",
	Title:        "The type of `tls.server.issuer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.issuer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerJa3Sv1260 = &rule.AttributeRule{
	Name:         "type.tls.server.ja3s",
	Title:        "The type of `tls.server.ja3s` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.ja3s") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerNotAfterv1260 = &rule.AttributeRule{
	Name:         "type.tls.server.not_after",
	Title:        "The type of `tls.server.not_after` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.not_after") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerNotBeforev1260 = &rule.AttributeRule{
	Name:         "type.tls.server.not_before",
	Title:        "The type of `tls.server.not_before` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.not_before") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeTlsServerSubjectv1260 = &rule.AttributeRule{
	Name:         "type.tls.server.subject",
	Title:        "The type of `tls.server.subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlDomainv1260 = &rule.AttributeRule{
	Name:         "type.url.domain",
	Title:        "The type of `url.domain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.domain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlExtensionv1260 = &rule.AttributeRule{
	Name:         "type.url.extension",
	Title:        "The type of `url.extension` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.extension") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlFragmentv1260 = &rule.AttributeRule{
	Name:         "type.url.fragment",
	Title:        "The type of `url.fragment` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.fragment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlFullv1260 = &rule.AttributeRule{
	Name:         "type.url.full",
	Title:        "The type of `url.full` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.full") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlOriginalv1260 = &rule.AttributeRule{
	Name:         "type.url.original",
	Title:        "The type of `url.original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlPathv1260 = &rule.AttributeRule{
	Name:         "type.url.path",
	Title:        "The type of `url.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlPortv1260 = &rule.AttributeRule{
	Name:         "type.url.port",
	Title:        "The type of `url.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "url.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlQueryv1260 = &rule.AttributeRule{
	Name:         "type.url.query",
	Title:        "The type of `url.query` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.query") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlRegisteredDomainv1260 = &rule.AttributeRule{
	Name:         "type.url.registered_domain",
	Title:        "The type of `url.registered_domain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.registered_domain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlSchemev1260 = &rule.AttributeRule{
	Name:         "type.url.scheme",
	Title:        "The type of `url.scheme` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlSubdomainv1260 = &rule.AttributeRule{
	Name:         "type.url.subdomain",
	Title:        "The type of `url.subdomain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.subdomain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlTemplatev1260 = &rule.AttributeRule{
	Name:         "type.url.template",
	Title:        "The type of `url.template` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.template") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUrlTopLevelDomainv1260 = &rule.AttributeRule{
	Name:         "type.url.top_level_domain",
	Title:        "The type of `url.top_level_domain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.top_level_domain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUserAgentNamev1260 = &rule.AttributeRule{
	Name:         "type.user_agent.name",
	Title:        "The type of `user_agent.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user_agent.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUserAgentOriginalv1260 = &rule.AttributeRule{
	Name:         "type.user_agent.original",
	Title:        "The type of `user_agent.original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user_agent.original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeUserAgentVersionv1260 = &rule.AttributeRule{
	Name:         "type.user_agent.version",
	Title:        "The type of `user_agent.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user_agent.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeWebengineDescriptionv1260 = &rule.AttributeRule{
	Name:         "type.webengine.description",
	Title:        "The type of `webengine.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeWebengineNamev1260 = &rule.AttributeRule{
	Name:         "type.webengine.name",
	Title:        "The type of `webengine.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

var ruleTypeWebengineVersionv1260 = &rule.AttributeRule{
	Name:         "type.webengine.version",
	Title:        "The type of `webengine.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.26.0",
}

