// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesDeprecatedv1270 = []*rule.AttributeRule{
	ruleDeprecatedContainerCpuStatev1270,
	ruleDeprecatedContainerLabelsv1270,
	ruleDeprecatedDbCassandraTablev1270,
	ruleDeprecatedDbClientConnectionsPoolNamev1270,
	ruleDeprecatedDbClientConnectionsStatev1270,
	ruleDeprecatedDbConnectionStringv1270,
	ruleDeprecatedDbCosmosdbContainerv1270,
	ruleDeprecatedDbElasticsearchClusterNamev1270,
	ruleDeprecatedDbInstanceIdv1270,
	ruleDeprecatedDbJdbcDriverClassnamev1270,
	ruleDeprecatedDbMongodbCollectionv1270,
	ruleDeprecatedDbMssqlInstanceNamev1270,
	ruleDeprecatedDbNamev1270,
	ruleDeprecatedDbOperationv1270,
	ruleDeprecatedDbRedisDatabaseIndexv1270,
	ruleDeprecatedDbSqlTablev1270,
	ruleDeprecatedDbStatementv1270,
	ruleDeprecatedDbUserv1270,
	ruleDeprecatedDeploymentEnvironmentv1270,
	ruleDeprecatedEnduserIdv1270,
	ruleDeprecatedEnduserRolev1270,
	ruleDeprecatedEnduserScopev1270,
	ruleDeprecatedGenAiUsageCompletionTokensv1270,
	ruleDeprecatedGenAiUsagePromptTokensv1270,
	ruleDeprecatedHttpClientIpv1270,
	ruleDeprecatedHttpFlavorv1270,
	ruleDeprecatedHttpHostv1270,
	ruleDeprecatedHttpMethodv1270,
	ruleDeprecatedHttpRequestContentLengthv1270,
	ruleDeprecatedHttpRequestContentLengthUncompressedv1270,
	ruleDeprecatedHttpResponseContentLengthv1270,
	ruleDeprecatedHttpResponseContentLengthUncompressedv1270,
	ruleDeprecatedHttpSchemev1270,
	ruleDeprecatedHttpServerNamev1270,
	ruleDeprecatedHttpStatusCodev1270,
	ruleDeprecatedHttpTargetv1270,
	ruleDeprecatedHttpUrlv1270,
	ruleDeprecatedHttpUserAgentv1270,
	ruleDeprecatedIosStatev1270,
	ruleDeprecatedK8SPodLabelsv1270,
	ruleDeprecatedMessageCompressedSizev1270,
	ruleDeprecatedMessageIdv1270,
	ruleDeprecatedMessageTypev1270,
	ruleDeprecatedMessageUncompressedSizev1270,
	ruleDeprecatedMessagingClientIdv1270,
	ruleDeprecatedMessagingDestinationPublishAnonymousv1270,
	ruleDeprecatedMessagingDestinationPublishNamev1270,
	ruleDeprecatedMessagingEventhubsConsumerGroupv1270,
	ruleDeprecatedMessagingKafkaConsumerGroupv1270,
	ruleDeprecatedMessagingKafkaDestinationPartitionv1270,
	ruleDeprecatedMessagingKafkaMessageOffsetv1270,
	ruleDeprecatedMessagingOperationv1270,
	ruleDeprecatedMessagingRocketmqClientGroupv1270,
	ruleDeprecatedMessagingServicebusDestinationSubscriptionNamev1270,
	ruleDeprecatedNetHostIpv1270,
	ruleDeprecatedNetHostNamev1270,
	ruleDeprecatedNetHostPortv1270,
	ruleDeprecatedNetPeerIpv1270,
	ruleDeprecatedNetPeerNamev1270,
	ruleDeprecatedNetPeerPortv1270,
	ruleDeprecatedNetProtocolNamev1270,
	ruleDeprecatedNetProtocolVersionv1270,
	ruleDeprecatedNetSockFamilyv1270,
	ruleDeprecatedNetSockHostAddrv1270,
	ruleDeprecatedNetSockHostPortv1270,
	ruleDeprecatedNetSockPeerAddrv1270,
	ruleDeprecatedNetSockPeerNamev1270,
	ruleDeprecatedNetSockPeerPortv1270,
	ruleDeprecatedNetTransportv1270,
	ruleDeprecatedOtelLibraryNamev1270,
	ruleDeprecatedOtelLibraryVersionv1270,
	ruleDeprecatedPoolNamev1270,
	ruleDeprecatedProcessCpuStatev1270,
	ruleDeprecatedStatev1270,
	ruleDeprecatedSystemCpuStatev1270,
	ruleDeprecatedSystemProcessesStatusv1270,
	ruleDeprecatedTlsClientServerNamev1270,
}

var ruleDeprecatedContainerCpuStatev1270 = &rule.AttributeRule{
	Name:         "deprecated.container.cpu.state",
	Title:        "Deprecated, use `cpu.mode` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "container.cpu.state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedContainerLabelsv1270 = &rule.AttributeRule{
	Name:         "deprecated.container.labels",
	Title:        "Deprecated, use `container.label` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "container.labels") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbCassandraTablev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.cassandra.table",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.cassandra.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbClientConnectionsPoolNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.client.connections.pool.name",
	Title:        "Deprecated, use `db.client.connection.pool.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.client.connections.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbClientConnectionsStatev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.client.connections.state",
	Title:        "Deprecated, use `db.client.connection.state` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.client.connections.state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbConnectionStringv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.connection_string",
	Title:        "Deprecated, use `server.address`, `server.port` attributes instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.connection_string") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbCosmosdbContainerv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.cosmosdb.container",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.cosmosdb.container") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbElasticsearchClusterNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.elasticsearch.cluster.name",
	Title:        "Deprecated, use `db.namespace` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.elasticsearch.cluster.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbInstanceIdv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.instance.id",
	Title:        "Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbJdbcDriverClassnamev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.jdbc.driver_classname",
	Title:        "Removed, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.jdbc.driver_classname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbMongodbCollectionv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.mongodb.collection",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.mongodb.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbMssqlInstanceNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.mssql.instance_name",
	Title:        "Deprecated, SQL Server instance is now populated as a part of `db.namespace` attribute.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.mssql.instance_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.name",
	Title:        "Deprecated, use `db.namespace` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbOperationv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.operation",
	Title:        "Deprecated, use `db.operation.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbRedisDatabaseIndexv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.redis.database_index",
	Title:        "Deprecated, use `db.namespace` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.redis.database_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbSqlTablev1270 = &rule.AttributeRule{
	Name:         "deprecated.db.sql.table",
	Title:        "Deprecated, use `db.collection.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.sql.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbStatementv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.statement",
	Title:        "The database statement being executed.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.statement") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDbUserv1270 = &rule.AttributeRule{
	Name:         "deprecated.db.user",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "db.user") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedDeploymentEnvironmentv1270 = &rule.AttributeRule{
	Name:         "deprecated.deployment.environment",
	Title:        "'Deprecated, use `deployment.environment.name` instead.'",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "deployment.environment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedEnduserIdv1270 = &rule.AttributeRule{
	Name:         "deprecated.enduser.id",
	Title:        "Deprecated, use `user.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "enduser.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedEnduserRolev1270 = &rule.AttributeRule{
	Name:         "deprecated.enduser.role",
	Title:        "Deprecated, use `user.roles` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "enduser.role") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedEnduserScopev1270 = &rule.AttributeRule{
	Name:         "deprecated.enduser.scope",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "enduser.scope") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedGenAiUsageCompletionTokensv1270 = &rule.AttributeRule{
	Name:         "deprecated.gen_ai.usage.completion_tokens",
	Title:        "Deprecated, use `gen_ai.usage.output_tokens` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "gen_ai.usage.completion_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedGenAiUsagePromptTokensv1270 = &rule.AttributeRule{
	Name:         "deprecated.gen_ai.usage.prompt_tokens",
	Title:        "Deprecated, use `gen_ai.usage.input_tokens` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "gen_ai.usage.prompt_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpClientIpv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.client_ip",
	Title:        "Deprecated, use `client.address` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.client_ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpFlavorv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.flavor",
	Title:        "Deprecated, use `network.protocol.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.flavor") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpHostv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.host",
	Title:        "Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.host") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpMethodv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.method",
	Title:        "Deprecated, use `http.request.method` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpRequestContentLengthv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.request_content_length",
	Title:        "Deprecated, use `http.request.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpRequestContentLengthUncompressedv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.request_content_length_uncompressed",
	Title:        "Deprecated, use `http.request.body.size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.request_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpResponseContentLengthv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.response_content_length",
	Title:        "Deprecated, use `http.response.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.response_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpResponseContentLengthUncompressedv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.response_content_length_uncompressed",
	Title:        "Deprecated, use `http.response.body.size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.response_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpSchemev1270 = &rule.AttributeRule{
	Name:         "deprecated.http.scheme",
	Title:        "Deprecated, use `url.scheme` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpServerNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.http.server_name",
	Title:        "Deprecated, use `server.address` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpStatusCodev1270 = &rule.AttributeRule{
	Name:         "deprecated.http.status_code",
	Title:        "Deprecated, use `http.response.status_code` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpTargetv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.target",
	Title:        "Deprecated, use `url.path` and `url.query` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.target") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpUrlv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.url",
	Title:        "Deprecated, use `url.full` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.url") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedHttpUserAgentv1270 = &rule.AttributeRule{
	Name:         "deprecated.http.user_agent",
	Title:        "Deprecated, use `user_agent.original` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.user_agent") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedIosStatev1270 = &rule.AttributeRule{
	Name:         "deprecated.ios.state",
	Title:        "Deprecated use the `device.app.lifecycle` event definition including `ios.state` as a payload field instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "ios.state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedK8SPodLabelsv1270 = &rule.AttributeRule{
	Name:         "deprecated.k8s.pod.labels",
	Title:        "Deprecated, use `k8s.pod.label` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "k8s.pod.labels") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessageCompressedSizev1270 = &rule.AttributeRule{
	Name:         "deprecated.message.compressed_size",
	Title:        "Deprecated, use `rpc.message.compressed_size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.compressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessageIdv1270 = &rule.AttributeRule{
	Name:         "deprecated.message.id",
	Title:        "Deprecated, use `rpc.message.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessageTypev1270 = &rule.AttributeRule{
	Name:         "deprecated.message.type",
	Title:        "Deprecated, use `rpc.message.type` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessageUncompressedSizev1270 = &rule.AttributeRule{
	Name:         "deprecated.message.uncompressed_size",
	Title:        "Deprecated, use `rpc.message.uncompressed_size` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "message.uncompressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingClientIdv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.client_id",
	Title:        "Deprecated, use `messaging.client.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingDestinationPublishAnonymousv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.destination_publish.anonymous",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.destination_publish.anonymous") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingDestinationPublishNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.destination_publish.name",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.destination_publish.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingEventhubsConsumerGroupv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.eventhubs.consumer.group",
	Title:        "Deprecated, use `messaging.consumer.group.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.eventhubs.consumer.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingKafkaConsumerGroupv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.kafka.consumer.group",
	Title:        "Deprecated, use `messaging.consumer.group.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.kafka.consumer.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingKafkaDestinationPartitionv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.kafka.destination.partition",
	Title:        "Deprecated, use `messaging.destination.partition.id` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.kafka.destination.partition") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingKafkaMessageOffsetv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.kafka.message.offset",
	Title:        "Deprecated, use `messaging.kafka.offset` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.kafka.message.offset") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingOperationv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.operation",
	Title:        "Deprecated, use `messaging.operation.type` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingRocketmqClientGroupv1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.rocketmq.client_group",
	Title:        "Deprecated, use `messaging.consumer.group.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.rocketmq.client_group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedMessagingServicebusDestinationSubscriptionNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.messaging.servicebus.destination.subscription_name",
	Title:        "Deprecated, use `messaging.servicebus.destination.subscription_name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "messaging.servicebus.destination.subscription_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetHostIpv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.host.ip",
	Title:        "Deprecated, use `network.local.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetHostNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.net.host.name",
	Title:        "Deprecated, use `server.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetHostPortv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.host.port",
	Title:        "Deprecated, use `server.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetPeerIpv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.ip",
	Title:        "Deprecated, use `network.peer.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetPeerNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.name",
	Title:        "Deprecated, use `server.address` on client spans and `client.address` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetPeerPortv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.port",
	Title:        "Deprecated, use `server.port` on client spans and `client.port` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetProtocolNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.name",
	Title:        "Deprecated, use `network.protocol.name`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetProtocolVersionv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.version",
	Title:        "Deprecated, use `network.protocol.version`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetSockFamilyv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.family",
	Title:        "Deprecated, use `network.transport` and `network.type`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetSockHostAddrv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.addr",
	Title:        "Deprecated, use `network.local.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetSockHostPortv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.port",
	Title:        "Deprecated, use `network.local.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetSockPeerAddrv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.addr",
	Title:        "Deprecated, use `network.peer.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetSockPeerNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.name",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetSockPeerPortv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.port",
	Title:        "Deprecated, use `network.peer.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedNetTransportv1270 = &rule.AttributeRule{
	Name:         "deprecated.net.transport",
	Title:        "Deprecated, use `network.transport`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.transport") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedOtelLibraryNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.otel.library.name",
	Title:        "",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "otel.library.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedOtelLibraryVersionv1270 = &rule.AttributeRule{
	Name:         "deprecated.otel.library.version",
	Title:        "",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "otel.library.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedPoolNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.pool.name",
	Title:        "Deprecated, use `db.client.connection.pool.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedProcessCpuStatev1270 = &rule.AttributeRule{
	Name:         "deprecated.process.cpu.state",
	Title:        "Deprecated, use `cpu.mode` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "process.cpu.state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedStatev1270 = &rule.AttributeRule{
	Name:         "deprecated.state",
	Title:        "Deprecated, use `db.client.connection.state` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedSystemCpuStatev1270 = &rule.AttributeRule{
	Name:         "deprecated.system.cpu.state",
	Title:        "Deprecated, use `cpu.mode` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "system.cpu.state") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedSystemProcessesStatusv1270 = &rule.AttributeRule{
	Name:         "deprecated.system.processes.status",
	Title:        "Deprecated, use `system.process.status` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "system.processes.status") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleDeprecatedTlsClientServerNamev1270 = &rule.AttributeRule{
	Name:         "deprecated.tls.client.server_name",
	Title:        "Deprecated, use `server.address` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "tls.client.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

