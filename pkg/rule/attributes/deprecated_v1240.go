// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesDeprecatedv1240 = []*rule.AttributeRule{
	ruleDeprecatedHttpFlavorv1240,
	ruleDeprecatedHttpMethodv1240,
	ruleDeprecatedHttpRequestContentLengthv1240,
	ruleDeprecatedHttpResponseContentLengthv1240,
	ruleDeprecatedHttpSchemev1240,
	ruleDeprecatedHttpStatusCodev1240,
	ruleDeprecatedHttpTargetv1240,
	ruleDeprecatedHttpUrlv1240,
	ruleDeprecatedHttpUserAgentv1240,
	ruleDeprecatedNetHostNamev1240,
	ruleDeprecatedNetHostPortv1240,
	ruleDeprecatedNetPeerNamev1240,
	ruleDeprecatedNetPeerPortv1240,
	ruleDeprecatedNetProtocolNamev1240,
	ruleDeprecatedNetProtocolVersionv1240,
	ruleDeprecatedNetSockFamilyv1240,
	ruleDeprecatedNetSockHostAddrv1240,
	ruleDeprecatedNetSockHostPortv1240,
	ruleDeprecatedNetSockPeerAddrv1240,
	ruleDeprecatedNetSockPeerNamev1240,
	ruleDeprecatedNetSockPeerPortv1240,
	ruleDeprecatedNetTransportv1240,
}

var ruleDeprecatedHttpFlavorv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.flavor",
	Title:        "Deprecated, use `network.protocol.name` instead.",
	Check:        checkDeprecatedHttpFlavorv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpFlavorv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.flavor")
}

var ruleDeprecatedHttpMethodv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.method",
	Title:        "Deprecated, use `http.request.method` instead.",
	Check:        checkDeprecatedHttpMethodv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpMethodv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.method")
}

var ruleDeprecatedHttpRequestContentLengthv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.request_content_length",
	Title:        "Deprecated, use `http.request.header.content-length` instead.",
	Check:        checkDeprecatedHttpRequestContentLengthv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpRequestContentLengthv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.request_content_length")
}

var ruleDeprecatedHttpResponseContentLengthv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.response_content_length",
	Title:        "Deprecated, use `http.response.header.content-length` instead.",
	Check:        checkDeprecatedHttpResponseContentLengthv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpResponseContentLengthv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.response_content_length")
}

var ruleDeprecatedHttpSchemev1240 = &rule.AttributeRule{
	Name:         "deprecated.http.scheme",
	Title:        "Deprecated, use `url.scheme` instead.",
	Check:        checkDeprecatedHttpSchemev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpSchemev1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.scheme")
}

var ruleDeprecatedHttpStatusCodev1240 = &rule.AttributeRule{
	Name:         "deprecated.http.status_code",
	Title:        "Deprecated, use `http.response.status_code` instead.",
	Check:        checkDeprecatedHttpStatusCodev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpStatusCodev1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.status_code")
}

var ruleDeprecatedHttpTargetv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.target",
	Title:        "Deprecated, use `url.path` and `url.query` instead.",
	Check:        checkDeprecatedHttpTargetv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpTargetv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.target")
}

var ruleDeprecatedHttpUrlv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.url",
	Title:        "Deprecated, use `url.full` instead.",
	Check:        checkDeprecatedHttpUrlv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpUrlv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.url")
}

var ruleDeprecatedHttpUserAgentv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.user_agent",
	Title:        "Deprecated, use `user_agent.original` instead.",
	Check:        checkDeprecatedHttpUserAgentv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedHttpUserAgentv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("http.user_agent")
}

var ruleDeprecatedNetHostNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.host.name",
	Title:        "Deprecated, use `server.address`.",
	Check:        checkDeprecatedNetHostNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetHostNamev1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.host.name")
}

var ruleDeprecatedNetHostPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.host.port",
	Title:        "Deprecated, use `server.port`.",
	Check:        checkDeprecatedNetHostPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetHostPortv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.host.port")
}

var ruleDeprecatedNetPeerNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.name",
	Title:        "Deprecated, use `server.address` on client spans and `client.address` on server spans.",
	Check:        checkDeprecatedNetPeerNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetPeerNamev1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.peer.name")
}

var ruleDeprecatedNetPeerPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.port",
	Title:        "Deprecated, use `server.port` on client spans and `client.port` on server spans.",
	Check:        checkDeprecatedNetPeerPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetPeerPortv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.peer.port")
}

var ruleDeprecatedNetProtocolNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.name",
	Title:        "Deprecated, use `network.protocol.name`.",
	Check:        checkDeprecatedNetProtocolNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetProtocolNamev1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.protocol.name")
}

var ruleDeprecatedNetProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.version",
	Title:        "Deprecated, use `network.protocol.version`.",
	Check:        checkDeprecatedNetProtocolVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetProtocolVersionv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.protocol.version")
}

var ruleDeprecatedNetSockFamilyv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.family",
	Title:        "Deprecated, use `network.transport` and `network.type`.",
	Check:        checkDeprecatedNetSockFamilyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetSockFamilyv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.sock.family")
}

var ruleDeprecatedNetSockHostAddrv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.addr",
	Title:        "Deprecated, use `network.local.address`.",
	Check:        checkDeprecatedNetSockHostAddrv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetSockHostAddrv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.sock.host.addr")
}

var ruleDeprecatedNetSockHostPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.port",
	Title:        "Deprecated, use `network.local.port`.",
	Check:        checkDeprecatedNetSockHostPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetSockHostPortv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.sock.host.port")
}

var ruleDeprecatedNetSockPeerAddrv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.addr",
	Title:        "Deprecated, use `network.peer.address`.",
	Check:        checkDeprecatedNetSockPeerAddrv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetSockPeerAddrv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.sock.peer.addr")
}

var ruleDeprecatedNetSockPeerNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.name",
	Title:        "Deprecated, no replacement at this time.",
	Check:        checkDeprecatedNetSockPeerNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetSockPeerNamev1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.sock.peer.name")
}

var ruleDeprecatedNetSockPeerPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.port",
	Title:        "Deprecated, use `network.peer.port`.",
	Check:        checkDeprecatedNetSockPeerPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetSockPeerPortv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.sock.peer.port")
}

var ruleDeprecatedNetTransportv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.transport",
	Title:        "Deprecated, use `network.transport`.",
	Check:        checkDeprecatedNetTransportv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkDeprecatedNetTransportv1240(a *rule.SignalAttributes) bool {
	return !a.KeyExists("net.transport")
}

