// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesDeprecatedv1240 = []*rule.AttributeRule{
	ruleDeprecatedHttpFlavorv1240,
	ruleDeprecatedHttpMethodv1240,
	ruleDeprecatedHttpRequestContentLengthv1240,
	ruleDeprecatedHttpResponseContentLengthv1240,
	ruleDeprecatedHttpSchemev1240,
	ruleDeprecatedHttpStatusCodev1240,
	ruleDeprecatedHttpTargetv1240,
	ruleDeprecatedHttpUrlv1240,
	ruleDeprecatedHttpUserAgentv1240,
	ruleDeprecatedNetHostNamev1240,
	ruleDeprecatedNetHostPortv1240,
	ruleDeprecatedNetPeerNamev1240,
	ruleDeprecatedNetPeerPortv1240,
	ruleDeprecatedNetProtocolNamev1240,
	ruleDeprecatedNetProtocolVersionv1240,
	ruleDeprecatedNetSockFamilyv1240,
	ruleDeprecatedNetSockHostAddrv1240,
	ruleDeprecatedNetSockHostPortv1240,
	ruleDeprecatedNetSockPeerAddrv1240,
	ruleDeprecatedNetSockPeerNamev1240,
	ruleDeprecatedNetSockPeerPortv1240,
	ruleDeprecatedNetTransportv1240,
}

var ruleDeprecatedHttpFlavorv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.flavor",
	Title:        "Deprecated, use `network.protocol.name` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.flavor") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpMethodv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.method",
	Title:        "Deprecated, use `http.request.method` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpRequestContentLengthv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.request_content_length",
	Title:        "Deprecated, use `http.request.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpResponseContentLengthv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.response_content_length",
	Title:        "Deprecated, use `http.response.header.content-length` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.response_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpSchemev1240 = &rule.AttributeRule{
	Name:         "deprecated.http.scheme",
	Title:        "Deprecated, use `url.scheme` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpStatusCodev1240 = &rule.AttributeRule{
	Name:         "deprecated.http.status_code",
	Title:        "Deprecated, use `http.response.status_code` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpTargetv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.target",
	Title:        "Deprecated, use `url.path` and `url.query` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.target") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpUrlv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.url",
	Title:        "Deprecated, use `url.full` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.url") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedHttpUserAgentv1240 = &rule.AttributeRule{
	Name:         "deprecated.http.user_agent",
	Title:        "Deprecated, use `user_agent.original` instead.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "http.user_agent") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetHostNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.host.name",
	Title:        "Deprecated, use `server.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetHostPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.host.port",
	Title:        "Deprecated, use `server.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetPeerNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.name",
	Title:        "Deprecated, use `server.address` on client spans and `client.address` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetPeerPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.peer.port",
	Title:        "Deprecated, use `server.port` on client spans and `client.port` on server spans.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetProtocolNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.name",
	Title:        "Deprecated, use `network.protocol.name`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.protocol.version",
	Title:        "Deprecated, use `network.protocol.version`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetSockFamilyv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.family",
	Title:        "Deprecated, use `network.transport` and `network.type`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetSockHostAddrv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.addr",
	Title:        "Deprecated, use `network.local.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetSockHostPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.host.port",
	Title:        "Deprecated, use `network.local.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetSockPeerAddrv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.addr",
	Title:        "Deprecated, use `network.peer.address`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetSockPeerNamev1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.name",
	Title:        "Deprecated, no replacement at this time.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetSockPeerPortv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.sock.peer.port",
	Title:        "Deprecated, use `network.peer.port`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.sock.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleDeprecatedNetTransportv1240 = &rule.AttributeRule{
	Name:         "deprecated.net.transport",
	Title:        "Deprecated, use `network.transport`.",
	Check:        func(sa *rule.SignalAttributes) bool { return keyNotExists(sa, "net.transport") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

