// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesTypev1240 = []*rule.AttributeRule{
	ruleTypeAndroidOsApiLevelv1240,
	ruleTypeAspnetcoreDiagnosticsHandlerTypev1240,
	ruleTypeAspnetcoreRateLimitingPolicyv1240,
	ruleTypeAspnetcoreRequestIsUnhandledv1240,
	ruleTypeAspnetcoreRoutingIsFallbackv1240,
	ruleTypeAwsDynamodbAttributeDefinitionsv1240,
	ruleTypeAwsDynamodbAttributesToGetv1240,
	ruleTypeAwsDynamodbConsistentReadv1240,
	ruleTypeAwsDynamodbConsumedCapacityv1240,
	ruleTypeAwsDynamodbCountv1240,
	ruleTypeAwsDynamodbExclusiveStartTablev1240,
	ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1240,
	ruleTypeAwsDynamodbGlobalSecondaryIndexesv1240,
	ruleTypeAwsDynamodbIndexNamev1240,
	ruleTypeAwsDynamodbItemCollectionMetricsv1240,
	ruleTypeAwsDynamodbLimitv1240,
	ruleTypeAwsDynamodbLocalSecondaryIndexesv1240,
	ruleTypeAwsDynamodbProjectionv1240,
	ruleTypeAwsDynamodbProvisionedReadCapacityv1240,
	ruleTypeAwsDynamodbProvisionedWriteCapacityv1240,
	ruleTypeAwsDynamodbScanForwardv1240,
	ruleTypeAwsDynamodbScannedCountv1240,
	ruleTypeAwsDynamodbSegmentv1240,
	ruleTypeAwsDynamodbSelectv1240,
	ruleTypeAwsDynamodbTableCountv1240,
	ruleTypeAwsDynamodbTableNamesv1240,
	ruleTypeAwsDynamodbTotalSegmentsv1240,
	ruleTypeAwsEcsClusterArnv1240,
	ruleTypeAwsEcsContainerArnv1240,
	ruleTypeAwsEcsTaskArnv1240,
	ruleTypeAwsEcsTaskFamilyv1240,
	ruleTypeAwsEcsTaskRevisionv1240,
	ruleTypeAwsEksClusterArnv1240,
	ruleTypeAwsLambdaInvokedArnv1240,
	ruleTypeAwsLogGroupArnsv1240,
	ruleTypeAwsLogGroupNamesv1240,
	ruleTypeAwsLogStreamArnsv1240,
	ruleTypeAwsLogStreamNamesv1240,
	ruleTypeAwsRequestIdv1240,
	ruleTypeAwsS3Bucketv1240,
	ruleTypeAwsS3CopySourcev1240,
	ruleTypeAwsS3Deletev1240,
	ruleTypeAwsS3Keyv1240,
	ruleTypeAwsS3PartNumberv1240,
	ruleTypeAwsS3UploadIdv1240,
	ruleTypeBrowserBrandsv1240,
	ruleTypeBrowserLanguagev1240,
	ruleTypeBrowserMobilev1240,
	ruleTypeBrowserPlatformv1240,
	ruleTypeClientAddressv1240,
	ruleTypeClientPortv1240,
	ruleTypeCloudAccountIdv1240,
	ruleTypeCloudAvailabilityZonev1240,
	ruleTypeCloudRegionv1240,
	ruleTypeCloudResourceIdv1240,
	ruleTypeCloudeventsEventIdv1240,
	ruleTypeCloudeventsEventSourcev1240,
	ruleTypeCloudeventsEventSpecVersionv1240,
	ruleTypeCloudeventsEventSubjectv1240,
	ruleTypeCloudeventsEventTypev1240,
	ruleTypeCodeColumnv1240,
	ruleTypeCodeFilepathv1240,
	ruleTypeCodeFunctionv1240,
	ruleTypeCodeLinenov1240,
	ruleTypeCodeNamespacev1240,
	ruleTypeCodeStacktracev1240,
	ruleTypeContainerCommandv1240,
	ruleTypeContainerCommandArgsv1240,
	ruleTypeContainerCommandLinev1240,
	ruleTypeContainerIdv1240,
	ruleTypeContainerImageIdv1240,
	ruleTypeContainerImageNamev1240,
	ruleTypeContainerImageRepoDigestsv1240,
	ruleTypeContainerImageTagsv1240,
	ruleTypeContainerNamev1240,
	ruleTypeContainerRuntimev1240,
	ruleTypeDbCassandraCoordinatorDcv1240,
	ruleTypeDbCassandraCoordinatorIdv1240,
	ruleTypeDbCassandraIdempotencev1240,
	ruleTypeDbCassandraPageSizev1240,
	ruleTypeDbCassandraSpeculativeExecutionCountv1240,
	ruleTypeDbCassandraTablev1240,
	ruleTypeDbConnectionStringv1240,
	ruleTypeDbCosmosdbClientIdv1240,
	ruleTypeDbCosmosdbContainerv1240,
	ruleTypeDbCosmosdbRequestChargev1240,
	ruleTypeDbCosmosdbRequestContentLengthv1240,
	ruleTypeDbCosmosdbStatusCodev1240,
	ruleTypeDbCosmosdbSubStatusCodev1240,
	ruleTypeDbElasticsearchClusterNamev1240,
	ruleTypeDbElasticsearchNodeNamev1240,
	ruleTypeDbInstanceIdv1240,
	ruleTypeDbJdbcDriverClassnamev1240,
	ruleTypeDbMongodbCollectionv1240,
	ruleTypeDbMssqlInstanceNamev1240,
	ruleTypeDbNamev1240,
	ruleTypeDbOperationv1240,
	ruleTypeDbRedisDatabaseIndexv1240,
	ruleTypeDbSqlTablev1240,
	ruleTypeDbStatementv1240,
	ruleTypeDbUserv1240,
	ruleTypeDeploymentEnvironmentv1240,
	ruleTypeDestinationAddressv1240,
	ruleTypeDestinationPortv1240,
	ruleTypeDeviceIdv1240,
	ruleTypeDeviceManufacturerv1240,
	ruleTypeDeviceModelIdentifierv1240,
	ruleTypeDeviceModelNamev1240,
	ruleTypeDnsQuestionNamev1240,
	ruleTypeEnduserIdv1240,
	ruleTypeEnduserRolev1240,
	ruleTypeEnduserScopev1240,
	ruleTypeEventNamev1240,
	ruleTypeExceptionEscapedv1240,
	ruleTypeExceptionMessagev1240,
	ruleTypeExceptionStacktracev1240,
	ruleTypeExceptionTypev1240,
	ruleTypeFaasColdstartv1240,
	ruleTypeFaasCronv1240,
	ruleTypeFaasDocumentCollectionv1240,
	ruleTypeFaasDocumentNamev1240,
	ruleTypeFaasDocumentTimev1240,
	ruleTypeFaasInstancev1240,
	ruleTypeFaasInvocationIdv1240,
	ruleTypeFaasInvokedNamev1240,
	ruleTypeFaasInvokedRegionv1240,
	ruleTypeFaasMaxMemoryv1240,
	ruleTypeFaasNamev1240,
	ruleTypeFaasTimev1240,
	ruleTypeFaasVersionv1240,
	ruleTypeFeatureFlagKeyv1240,
	ruleTypeFeatureFlagProviderNamev1240,
	ruleTypeFeatureFlagVariantv1240,
	ruleTypeGcpCloudRunJobExecutionv1240,
	ruleTypeGcpCloudRunJobTaskIndexv1240,
	ruleTypeGcpGceInstanceHostnamev1240,
	ruleTypeGcpGceInstanceNamev1240,
	ruleTypeGraphqlDocumentv1240,
	ruleTypeGraphqlOperationNamev1240,
	ruleTypeHerokuAppIdv1240,
	ruleTypeHerokuReleaseCommitv1240,
	ruleTypeHerokuReleaseCreationTimestampv1240,
	ruleTypeHostCpuCacheL2Sizev1240,
	ruleTypeHostCpuFamilyv1240,
	ruleTypeHostCpuModelIdv1240,
	ruleTypeHostCpuModelNamev1240,
	ruleTypeHostCpuSteppingv1240,
	ruleTypeHostCpuVendorIdv1240,
	ruleTypeHostIdv1240,
	ruleTypeHostImageIdv1240,
	ruleTypeHostImageNamev1240,
	ruleTypeHostImageVersionv1240,
	ruleTypeHostIpv1240,
	ruleTypeHostMacv1240,
	ruleTypeHostNamev1240,
	ruleTypeHostTypev1240,
	ruleTypeHttpMethodv1240,
	ruleTypeHttpRequestBodySizev1240,
	ruleTypeHttpRequestMethodOriginalv1240,
	ruleTypeHttpRequestResendCountv1240,
	ruleTypeHttpRequestContentLengthv1240,
	ruleTypeHttpResponseBodySizev1240,
	ruleTypeHttpResponseStatusCodev1240,
	ruleTypeHttpResponseContentLengthv1240,
	ruleTypeHttpRoutev1240,
	ruleTypeHttpSchemev1240,
	ruleTypeHttpStatusCodev1240,
	ruleTypeHttpTargetv1240,
	ruleTypeHttpUrlv1240,
	ruleTypeHttpUserAgentv1240,
	ruleTypeJvmBufferPoolNamev1240,
	ruleTypeJvmGcActionv1240,
	ruleTypeJvmGcNamev1240,
	ruleTypeJvmMemoryPoolNamev1240,
	ruleTypeJvmThreadDaemonv1240,
	ruleTypeK8SClusterNamev1240,
	ruleTypeK8SClusterUidv1240,
	ruleTypeK8SContainerNamev1240,
	ruleTypeK8SContainerRestartCountv1240,
	ruleTypeK8SCronjobNamev1240,
	ruleTypeK8SCronjobUidv1240,
	ruleTypeK8SDaemonsetNamev1240,
	ruleTypeK8SDaemonsetUidv1240,
	ruleTypeK8SDeploymentNamev1240,
	ruleTypeK8SDeploymentUidv1240,
	ruleTypeK8SJobNamev1240,
	ruleTypeK8SJobUidv1240,
	ruleTypeK8SNamespaceNamev1240,
	ruleTypeK8SNodeNamev1240,
	ruleTypeK8SNodeUidv1240,
	ruleTypeK8SPodNamev1240,
	ruleTypeK8SPodUidv1240,
	ruleTypeK8SReplicasetNamev1240,
	ruleTypeK8SReplicasetUidv1240,
	ruleTypeK8SStatefulsetNamev1240,
	ruleTypeK8SStatefulsetUidv1240,
	ruleTypeLogFileNamev1240,
	ruleTypeLogFileNameResolvedv1240,
	ruleTypeLogFilePathv1240,
	ruleTypeLogFilePathResolvedv1240,
	ruleTypeLogRecordUidv1240,
	ruleTypeMessageCompressedSizev1240,
	ruleTypeMessageIdv1240,
	ruleTypeMessageUncompressedSizev1240,
	ruleTypeMessagingBatchMessageCountv1240,
	ruleTypeMessagingClient_Idv1240,
	ruleTypeMessagingDestinationAnonymousv1240,
	ruleTypeMessagingDestinationNamev1240,
	ruleTypeMessagingDestinationTemplatev1240,
	ruleTypeMessagingDestinationTemporaryv1240,
	ruleTypeMessagingDestinationPublishAnonymousv1240,
	ruleTypeMessagingDestinationPublishNamev1240,
	ruleTypeMessagingGcpPubsubMessageOrderingKeyv1240,
	ruleTypeMessagingKafkaConsumerGroupv1240,
	ruleTypeMessagingKafkaDestinationPartitionv1240,
	ruleTypeMessagingKafkaMessageKeyv1240,
	ruleTypeMessagingKafkaMessageOffsetv1240,
	ruleTypeMessagingKafkaMessageTombstonev1240,
	ruleTypeMessagingMessageBodySizev1240,
	ruleTypeMessagingMessageConversationIdv1240,
	ruleTypeMessagingMessageEnvelopeSizev1240,
	ruleTypeMessagingMessageIdv1240,
	ruleTypeMessagingRabbitmqDestinationRoutingKeyv1240,
	ruleTypeMessagingRocketmqClientGroupv1240,
	ruleTypeMessagingRocketmqMessageDelayTimeLevelv1240,
	ruleTypeMessagingRocketmqMessageDeliveryTimestampv1240,
	ruleTypeMessagingRocketmqMessageGroupv1240,
	ruleTypeMessagingRocketmqMessageKeysv1240,
	ruleTypeMessagingRocketmqMessageTagv1240,
	ruleTypeMessagingRocketmqNamespacev1240,
	ruleTypeNetHostNamev1240,
	ruleTypeNetHostPortv1240,
	ruleTypeNetPeerNamev1240,
	ruleTypeNetPeerPortv1240,
	ruleTypeNetProtocolNamev1240,
	ruleTypeNetProtocolVersionv1240,
	ruleTypeNetSockHostAddrv1240,
	ruleTypeNetSockHostPortv1240,
	ruleTypeNetSockPeerAddrv1240,
	ruleTypeNetSockPeerNamev1240,
	ruleTypeNetSockPeerPortv1240,
	ruleTypeNetworkCarrierIccv1240,
	ruleTypeNetworkCarrierMccv1240,
	ruleTypeNetworkCarrierMncv1240,
	ruleTypeNetworkCarrierNamev1240,
	ruleTypeNetworkLocalAddressv1240,
	ruleTypeNetworkLocalPortv1240,
	ruleTypeNetworkPeerAddressv1240,
	ruleTypeNetworkPeerPortv1240,
	ruleTypeNetworkProtocolNamev1240,
	ruleTypeNetworkProtocolVersionv1240,
	ruleTypeOciManifestDigestv1240,
	ruleTypeOsBuildIdv1240,
	ruleTypeOsDescriptionv1240,
	ruleTypeOsNamev1240,
	ruleTypeOsVersionv1240,
	ruleTypeOtelLibraryNamev1240,
	ruleTypeOtelLibraryVersionv1240,
	ruleTypeOtelScopeNamev1240,
	ruleTypeOtelScopeVersionv1240,
	ruleTypeOtelStatusDescriptionv1240,
	ruleTypePeerServicev1240,
	ruleTypePoolNamev1240,
	ruleTypeProcessCommandv1240,
	ruleTypeProcessCommandArgsv1240,
	ruleTypeProcessCommandLinev1240,
	ruleTypeProcessExecutableNamev1240,
	ruleTypeProcessExecutablePathv1240,
	ruleTypeProcessOwnerv1240,
	ruleTypeProcessParentPidv1240,
	ruleTypeProcessPidv1240,
	ruleTypeProcessRuntimeDescriptionv1240,
	ruleTypeProcessRuntimeNamev1240,
	ruleTypeProcessRuntimeVersionv1240,
	ruleTypeRpcJsonrpcErrorCodev1240,
	ruleTypeRpcJsonrpcErrorMessagev1240,
	ruleTypeRpcJsonrpcRequestIdv1240,
	ruleTypeRpcJsonrpcVersionv1240,
	ruleTypeRpcMethodv1240,
	ruleTypeRpcServicev1240,
	ruleTypeServerAddressv1240,
	ruleTypeServerPortv1240,
	ruleTypeServiceInstanceIdv1240,
	ruleTypeServiceNamev1240,
	ruleTypeServiceNamespacev1240,
	ruleTypeServiceVersionv1240,
	ruleTypeSessionIdv1240,
	ruleTypeSessionPreviousIdv1240,
	ruleTypeSourceAddressv1240,
	ruleTypeSourcePortv1240,
	ruleTypeSystemCpuLogicalNumberv1240,
	ruleTypeSystemDevicev1240,
	ruleTypeSystemFilesystemModev1240,
	ruleTypeSystemFilesystemMountpointv1240,
	ruleTypeTelemetryDistroNamev1240,
	ruleTypeTelemetryDistroVersionv1240,
	ruleTypeTelemetrySdkNamev1240,
	ruleTypeTelemetrySdkVersionv1240,
	ruleTypeThreadIdv1240,
	ruleTypeThreadNamev1240,
	ruleTypeTlsCipherv1240,
	ruleTypeTlsClientCertificatev1240,
	ruleTypeTlsClientCertificateChainv1240,
	ruleTypeTlsClientHashMd5v1240,
	ruleTypeTlsClientHashSha1v1240,
	ruleTypeTlsClientHashSha256v1240,
	ruleTypeTlsClientIssuerv1240,
	ruleTypeTlsClientJa3v1240,
	ruleTypeTlsClientNotAfterv1240,
	ruleTypeTlsClientNotBeforev1240,
	ruleTypeTlsClientServerNamev1240,
	ruleTypeTlsClientSubjectv1240,
	ruleTypeTlsClientSupportedCiphersv1240,
	ruleTypeTlsCurvev1240,
	ruleTypeTlsEstablishedv1240,
	ruleTypeTlsNextProtocolv1240,
	ruleTypeTlsProtocolVersionv1240,
	ruleTypeTlsResumedv1240,
	ruleTypeTlsServerCertificatev1240,
	ruleTypeTlsServerCertificateChainv1240,
	ruleTypeTlsServerHashMd5v1240,
	ruleTypeTlsServerHashSha1v1240,
	ruleTypeTlsServerHashSha256v1240,
	ruleTypeTlsServerIssuerv1240,
	ruleTypeTlsServerJa3Sv1240,
	ruleTypeTlsServerNotAfterv1240,
	ruleTypeTlsServerNotBeforev1240,
	ruleTypeTlsServerSubjectv1240,
	ruleTypeUrlFragmentv1240,
	ruleTypeUrlFullv1240,
	ruleTypeUrlPathv1240,
	ruleTypeUrlQueryv1240,
	ruleTypeUrlSchemev1240,
	ruleTypeUserAgentOriginalv1240,
	ruleTypeWebengineDescriptionv1240,
	ruleTypeWebengineNamev1240,
	ruleTypeWebengineVersionv1240,
}

var ruleTypeAndroidOsApiLevelv1240 = &rule.AttributeRule{
	Name:         "type.android.os.api_level",
	Title:        "The type of `android.os.api_level` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "android.os.api_level") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAspnetcoreDiagnosticsHandlerTypev1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.diagnostics.handler.type",
	Title:        "The type of `aspnetcore.diagnostics.handler.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aspnetcore.diagnostics.handler.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAspnetcoreRateLimitingPolicyv1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.rate_limiting.policy",
	Title:        "The type of `aspnetcore.rate_limiting.policy` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aspnetcore.rate_limiting.policy") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAspnetcoreRequestIsUnhandledv1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.request.is_unhandled",
	Title:        "The type of `aspnetcore.request.is_unhandled` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aspnetcore.request.is_unhandled") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAspnetcoreRoutingIsFallbackv1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.routing.is_fallback",
	Title:        "The type of `aspnetcore.routing.is_fallback` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aspnetcore.routing.is_fallback") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbAttributeDefinitionsv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attribute_definitions",
	Title:        "The type of `aws.dynamodb.attribute_definitions` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.attribute_definitions") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbAttributesToGetv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attributes_to_get",
	Title:        "The type of `aws.dynamodb.attributes_to_get` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.attributes_to_get") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbConsistentReadv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consistent_read",
	Title:        "The type of `aws.dynamodb.consistent_read` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aws.dynamodb.consistent_read") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbConsumedCapacityv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consumed_capacity",
	Title:        "The type of `aws.dynamodb.consumed_capacity` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.consumed_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbCountv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.count",
	Title:        "The type of `aws.dynamodb.count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbExclusiveStartTablev1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.exclusive_start_table",
	Title:        "The type of `aws.dynamodb.exclusive_start_table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.exclusive_start_table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_index_updates",
	Title:        "The type of `aws.dynamodb.global_secondary_index_updates` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.global_secondary_index_updates") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_indexes",
	Title:        "The type of `aws.dynamodb.global_secondary_indexes` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.global_secondary_indexes") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbIndexNamev1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.index_name",
	Title:        "The type of `aws.dynamodb.index_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.index_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbItemCollectionMetricsv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.item_collection_metrics",
	Title:        "The type of `aws.dynamodb.item_collection_metrics` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.item_collection_metrics") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbLimitv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.limit",
	Title:        "The type of `aws.dynamodb.limit` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.limit") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbLocalSecondaryIndexesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.local_secondary_indexes",
	Title:        "The type of `aws.dynamodb.local_secondary_indexes` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.local_secondary_indexes") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbProjectionv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.projection",
	Title:        "The type of `aws.dynamodb.projection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.projection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbProvisionedReadCapacityv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_read_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_read_capacity` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "aws.dynamodb.provisioned_read_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbProvisionedWriteCapacityv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_write_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_write_capacity` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "aws.dynamodb.provisioned_write_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbScanForwardv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scan_forward",
	Title:        "The type of `aws.dynamodb.scan_forward` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aws.dynamodb.scan_forward") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbScannedCountv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scanned_count",
	Title:        "The type of `aws.dynamodb.scanned_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.scanned_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbSegmentv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.segment",
	Title:        "The type of `aws.dynamodb.segment` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.segment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbSelectv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.select",
	Title:        "The type of `aws.dynamodb.select` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.select") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbTableCountv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_count",
	Title:        "The type of `aws.dynamodb.table_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.table_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbTableNamesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_names",
	Title:        "The type of `aws.dynamodb.table_names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.table_names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsDynamodbTotalSegmentsv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.total_segments",
	Title:        "The type of `aws.dynamodb.total_segments` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.total_segments") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsEcsClusterArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.cluster.arn",
	Title:        "The type of `aws.ecs.cluster.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.cluster.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsEcsContainerArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.container.arn",
	Title:        "The type of `aws.ecs.container.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.container.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsEcsTaskArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.arn",
	Title:        "The type of `aws.ecs.task.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsEcsTaskFamilyv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.family",
	Title:        "The type of `aws.ecs.task.family` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsEcsTaskRevisionv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.revision",
	Title:        "The type of `aws.ecs.task.revision` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.revision") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsEksClusterArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.eks.cluster.arn",
	Title:        "The type of `aws.eks.cluster.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.eks.cluster.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsLambdaInvokedArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.lambda.invoked_arn",
	Title:        "The type of `aws.lambda.invoked_arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.lambda.invoked_arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsLogGroupArnsv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.group.arns",
	Title:        "The type of `aws.log.group.arns` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.group.arns") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsLogGroupNamesv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.group.names",
	Title:        "The type of `aws.log.group.names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.group.names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsLogStreamArnsv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.arns",
	Title:        "The type of `aws.log.stream.arns` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.stream.arns") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsLogStreamNamesv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.names",
	Title:        "The type of `aws.log.stream.names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.stream.names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsRequestIdv1240 = &rule.AttributeRule{
	Name:         "type.aws.request_id",
	Title:        "The type of `aws.request_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.request_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsS3Bucketv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.bucket",
	Title:        "The type of `aws.s3.bucket` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.bucket") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsS3CopySourcev1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.copy_source",
	Title:        "The type of `aws.s3.copy_source` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.copy_source") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsS3Deletev1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.delete",
	Title:        "The type of `aws.s3.delete` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.delete") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsS3Keyv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.key",
	Title:        "The type of `aws.s3.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsS3PartNumberv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.part_number",
	Title:        "The type of `aws.s3.part_number` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.s3.part_number") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeAwsS3UploadIdv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.upload_id",
	Title:        "The type of `aws.s3.upload_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.upload_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeBrowserBrandsv1240 = &rule.AttributeRule{
	Name:         "type.browser.brands",
	Title:        "The type of `browser.brands` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "browser.brands") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeBrowserLanguagev1240 = &rule.AttributeRule{
	Name:         "type.browser.language",
	Title:        "The type of `browser.language` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "browser.language") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeBrowserMobilev1240 = &rule.AttributeRule{
	Name:         "type.browser.mobile",
	Title:        "The type of `browser.mobile` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "browser.mobile") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeBrowserPlatformv1240 = &rule.AttributeRule{
	Name:         "type.browser.platform",
	Title:        "The type of `browser.platform` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "browser.platform") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeClientAddressv1240 = &rule.AttributeRule{
	Name:         "type.client.address",
	Title:        "The type of `client.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "client.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeClientPortv1240 = &rule.AttributeRule{
	Name:         "type.client.port",
	Title:        "The type of `client.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "client.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudAccountIdv1240 = &rule.AttributeRule{
	Name:         "type.cloud.account.id",
	Title:        "The type of `cloud.account.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.account.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudAvailabilityZonev1240 = &rule.AttributeRule{
	Name:         "type.cloud.availability_zone",
	Title:        "The type of `cloud.availability_zone` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.availability_zone") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudRegionv1240 = &rule.AttributeRule{
	Name:         "type.cloud.region",
	Title:        "The type of `cloud.region` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.region") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudResourceIdv1240 = &rule.AttributeRule{
	Name:         "type.cloud.resource_id",
	Title:        "The type of `cloud.resource_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.resource_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudeventsEventIdv1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_id",
	Title:        "The type of `cloudevents.event_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudeventsEventSourcev1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_source",
	Title:        "The type of `cloudevents.event_source` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_source") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudeventsEventSpecVersionv1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_spec_version",
	Title:        "The type of `cloudevents.event_spec_version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_spec_version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudeventsEventSubjectv1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_subject",
	Title:        "The type of `cloudevents.event_subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCloudeventsEventTypev1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_type",
	Title:        "The type of `cloudevents.event_type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCodeColumnv1240 = &rule.AttributeRule{
	Name:         "type.code.column",
	Title:        "The type of `code.column` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "code.column") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCodeFilepathv1240 = &rule.AttributeRule{
	Name:         "type.code.filepath",
	Title:        "The type of `code.filepath` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.filepath") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCodeFunctionv1240 = &rule.AttributeRule{
	Name:         "type.code.function",
	Title:        "The type of `code.function` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.function") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCodeLinenov1240 = &rule.AttributeRule{
	Name:         "type.code.lineno",
	Title:        "The type of `code.lineno` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "code.lineno") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCodeNamespacev1240 = &rule.AttributeRule{
	Name:         "type.code.namespace",
	Title:        "The type of `code.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeCodeStacktracev1240 = &rule.AttributeRule{
	Name:         "type.code.stacktrace",
	Title:        "The type of `code.stacktrace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.stacktrace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerCommandv1240 = &rule.AttributeRule{
	Name:         "type.container.command",
	Title:        "The type of `container.command` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.command") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerCommandArgsv1240 = &rule.AttributeRule{
	Name:         "type.container.command_args",
	Title:        "The type of `container.command_args` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.command_args") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerCommandLinev1240 = &rule.AttributeRule{
	Name:         "type.container.command_line",
	Title:        "The type of `container.command_line` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.command_line") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerIdv1240 = &rule.AttributeRule{
	Name:         "type.container.id",
	Title:        "The type of `container.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerImageIdv1240 = &rule.AttributeRule{
	Name:         "type.container.image.id",
	Title:        "The type of `container.image.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.image.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerImageNamev1240 = &rule.AttributeRule{
	Name:         "type.container.image.name",
	Title:        "The type of `container.image.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.image.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerImageRepoDigestsv1240 = &rule.AttributeRule{
	Name:         "type.container.image.repo_digests",
	Title:        "The type of `container.image.repo_digests` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.image.repo_digests") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerImageTagsv1240 = &rule.AttributeRule{
	Name:         "type.container.image.tags",
	Title:        "The type of `container.image.tags` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.image.tags") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerNamev1240 = &rule.AttributeRule{
	Name:         "type.container.name",
	Title:        "The type of `container.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeContainerRuntimev1240 = &rule.AttributeRule{
	Name:         "type.container.runtime",
	Title:        "The type of `container.runtime` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.runtime") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCassandraCoordinatorDcv1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.dc",
	Title:        "The type of `db.cassandra.coordinator.dc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.coordinator.dc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCassandraCoordinatorIdv1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.id",
	Title:        "The type of `db.cassandra.coordinator.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.coordinator.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCassandraIdempotencev1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.idempotence",
	Title:        "The type of `db.cassandra.idempotence` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "db.cassandra.idempotence") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCassandraPageSizev1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.page_size",
	Title:        "The type of `db.cassandra.page_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cassandra.page_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCassandraSpeculativeExecutionCountv1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.speculative_execution_count",
	Title:        "The type of `db.cassandra.speculative_execution_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cassandra.speculative_execution_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCassandraTablev1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.table",
	Title:        "The type of `db.cassandra.table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbConnectionStringv1240 = &rule.AttributeRule{
	Name:         "type.db.connection_string",
	Title:        "The type of `db.connection_string` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.connection_string") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCosmosdbClientIdv1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.client_id",
	Title:        "The type of `db.cosmosdb.client_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cosmosdb.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCosmosdbContainerv1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.container",
	Title:        "The type of `db.cosmosdb.container` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cosmosdb.container") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCosmosdbRequestChargev1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_charge",
	Title:        "The type of `db.cosmosdb.request_charge` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "db.cosmosdb.request_charge") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCosmosdbRequestContentLengthv1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_content_length",
	Title:        "The type of `db.cosmosdb.request_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCosmosdbStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.status_code",
	Title:        "The type of `db.cosmosdb.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbCosmosdbSubStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.sub_status_code",
	Title:        "The type of `db.cosmosdb.sub_status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.sub_status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbElasticsearchClusterNamev1240 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.cluster.name",
	Title:        "The type of `db.elasticsearch.cluster.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.elasticsearch.cluster.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbElasticsearchNodeNamev1240 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.node.name",
	Title:        "The type of `db.elasticsearch.node.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.elasticsearch.node.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbInstanceIdv1240 = &rule.AttributeRule{
	Name:         "type.db.instance.id",
	Title:        "The type of `db.instance.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbJdbcDriverClassnamev1240 = &rule.AttributeRule{
	Name:         "type.db.jdbc.driver_classname",
	Title:        "The type of `db.jdbc.driver_classname` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.jdbc.driver_classname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbMongodbCollectionv1240 = &rule.AttributeRule{
	Name:         "type.db.mongodb.collection",
	Title:        "The type of `db.mongodb.collection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.mongodb.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbMssqlInstanceNamev1240 = &rule.AttributeRule{
	Name:         "type.db.mssql.instance_name",
	Title:        "The type of `db.mssql.instance_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.mssql.instance_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbNamev1240 = &rule.AttributeRule{
	Name:         "type.db.name",
	Title:        "The type of `db.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbOperationv1240 = &rule.AttributeRule{
	Name:         "type.db.operation",
	Title:        "The type of `db.operation` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbRedisDatabaseIndexv1240 = &rule.AttributeRule{
	Name:         "type.db.redis.database_index",
	Title:        "The type of `db.redis.database_index` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.redis.database_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbSqlTablev1240 = &rule.AttributeRule{
	Name:         "type.db.sql.table",
	Title:        "The type of `db.sql.table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.sql.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbStatementv1240 = &rule.AttributeRule{
	Name:         "type.db.statement",
	Title:        "The type of `db.statement` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.statement") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDbUserv1240 = &rule.AttributeRule{
	Name:         "type.db.user",
	Title:        "The type of `db.user` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.user") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDeploymentEnvironmentv1240 = &rule.AttributeRule{
	Name:         "type.deployment.environment",
	Title:        "The type of `deployment.environment` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "deployment.environment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDestinationAddressv1240 = &rule.AttributeRule{
	Name:         "type.destination.address",
	Title:        "The type of `destination.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "destination.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDestinationPortv1240 = &rule.AttributeRule{
	Name:         "type.destination.port",
	Title:        "The type of `destination.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "destination.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDeviceIdv1240 = &rule.AttributeRule{
	Name:         "type.device.id",
	Title:        "The type of `device.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDeviceManufacturerv1240 = &rule.AttributeRule{
	Name:         "type.device.manufacturer",
	Title:        "The type of `device.manufacturer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.manufacturer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDeviceModelIdentifierv1240 = &rule.AttributeRule{
	Name:         "type.device.model.identifier",
	Title:        "The type of `device.model.identifier` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.model.identifier") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDeviceModelNamev1240 = &rule.AttributeRule{
	Name:         "type.device.model.name",
	Title:        "The type of `device.model.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.model.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeDnsQuestionNamev1240 = &rule.AttributeRule{
	Name:         "type.dns.question.name",
	Title:        "The type of `dns.question.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "dns.question.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeEnduserIdv1240 = &rule.AttributeRule{
	Name:         "type.enduser.id",
	Title:        "The type of `enduser.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeEnduserRolev1240 = &rule.AttributeRule{
	Name:         "type.enduser.role",
	Title:        "The type of `enduser.role` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.role") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeEnduserScopev1240 = &rule.AttributeRule{
	Name:         "type.enduser.scope",
	Title:        "The type of `enduser.scope` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.scope") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeEventNamev1240 = &rule.AttributeRule{
	Name:         "type.event.name",
	Title:        "The type of `event.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "event.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeExceptionEscapedv1240 = &rule.AttributeRule{
	Name:         "type.exception.escaped",
	Title:        "The type of `exception.escaped` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "exception.escaped") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeExceptionMessagev1240 = &rule.AttributeRule{
	Name:         "type.exception.message",
	Title:        "The type of `exception.message` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.message") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeExceptionStacktracev1240 = &rule.AttributeRule{
	Name:         "type.exception.stacktrace",
	Title:        "The type of `exception.stacktrace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.stacktrace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeExceptionTypev1240 = &rule.AttributeRule{
	Name:         "type.exception.type",
	Title:        "The type of `exception.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasColdstartv1240 = &rule.AttributeRule{
	Name:         "type.faas.coldstart",
	Title:        "The type of `faas.coldstart` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "faas.coldstart") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasCronv1240 = &rule.AttributeRule{
	Name:         "type.faas.cron",
	Title:        "The type of `faas.cron` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.cron") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasDocumentCollectionv1240 = &rule.AttributeRule{
	Name:         "type.faas.document.collection",
	Title:        "The type of `faas.document.collection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasDocumentNamev1240 = &rule.AttributeRule{
	Name:         "type.faas.document.name",
	Title:        "The type of `faas.document.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasDocumentTimev1240 = &rule.AttributeRule{
	Name:         "type.faas.document.time",
	Title:        "The type of `faas.document.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasInstancev1240 = &rule.AttributeRule{
	Name:         "type.faas.instance",
	Title:        "The type of `faas.instance` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.instance") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasInvocationIdv1240 = &rule.AttributeRule{
	Name:         "type.faas.invocation_id",
	Title:        "The type of `faas.invocation_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invocation_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasInvokedNamev1240 = &rule.AttributeRule{
	Name:         "type.faas.invoked_name",
	Title:        "The type of `faas.invoked_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invoked_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasInvokedRegionv1240 = &rule.AttributeRule{
	Name:         "type.faas.invoked_region",
	Title:        "The type of `faas.invoked_region` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invoked_region") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasMaxMemoryv1240 = &rule.AttributeRule{
	Name:         "type.faas.max_memory",
	Title:        "The type of `faas.max_memory` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "faas.max_memory") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasNamev1240 = &rule.AttributeRule{
	Name:         "type.faas.name",
	Title:        "The type of `faas.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasTimev1240 = &rule.AttributeRule{
	Name:         "type.faas.time",
	Title:        "The type of `faas.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFaasVersionv1240 = &rule.AttributeRule{
	Name:         "type.faas.version",
	Title:        "The type of `faas.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFeatureFlagKeyv1240 = &rule.AttributeRule{
	Name:         "type.feature_flag.key",
	Title:        "The type of `feature_flag.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFeatureFlagProviderNamev1240 = &rule.AttributeRule{
	Name:         "type.feature_flag.provider_name",
	Title:        "The type of `feature_flag.provider_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.provider_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeFeatureFlagVariantv1240 = &rule.AttributeRule{
	Name:         "type.feature_flag.variant",
	Title:        "The type of `feature_flag.variant` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.variant") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeGcpCloudRunJobExecutionv1240 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.execution",
	Title:        "The type of `gcp.cloud_run.job.execution` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.cloud_run.job.execution") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeGcpCloudRunJobTaskIndexv1240 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.task_index",
	Title:        "The type of `gcp.cloud_run.job.task_index` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gcp.cloud_run.job.task_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeGcpGceInstanceHostnamev1240 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.hostname",
	Title:        "The type of `gcp.gce.instance.hostname` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.gce.instance.hostname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeGcpGceInstanceNamev1240 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.name",
	Title:        "The type of `gcp.gce.instance.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.gce.instance.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeGraphqlDocumentv1240 = &rule.AttributeRule{
	Name:         "type.graphql.document",
	Title:        "The type of `graphql.document` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "graphql.document") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeGraphqlOperationNamev1240 = &rule.AttributeRule{
	Name:         "type.graphql.operation.name",
	Title:        "The type of `graphql.operation.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "graphql.operation.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHerokuAppIdv1240 = &rule.AttributeRule{
	Name:         "type.heroku.app.id",
	Title:        "The type of `heroku.app.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.app.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHerokuReleaseCommitv1240 = &rule.AttributeRule{
	Name:         "type.heroku.release.commit",
	Title:        "The type of `heroku.release.commit` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.release.commit") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHerokuReleaseCreationTimestampv1240 = &rule.AttributeRule{
	Name:         "type.heroku.release.creation_timestamp",
	Title:        "The type of `heroku.release.creation_timestamp` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.release.creation_timestamp") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostCpuCacheL2Sizev1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.cache.l2.size",
	Title:        "The type of `host.cpu.cache.l2.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "host.cpu.cache.l2.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostCpuFamilyv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.family",
	Title:        "The type of `host.cpu.family` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostCpuModelIdv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.id",
	Title:        "The type of `host.cpu.model.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.model.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostCpuModelNamev1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.name",
	Title:        "The type of `host.cpu.model.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.model.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostCpuSteppingv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.stepping",
	Title:        "The type of `host.cpu.stepping` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "host.cpu.stepping") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostCpuVendorIdv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.vendor.id",
	Title:        "The type of `host.cpu.vendor.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.vendor.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostIdv1240 = &rule.AttributeRule{
	Name:         "type.host.id",
	Title:        "The type of `host.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostImageIdv1240 = &rule.AttributeRule{
	Name:         "type.host.image.id",
	Title:        "The type of `host.image.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostImageNamev1240 = &rule.AttributeRule{
	Name:         "type.host.image.name",
	Title:        "The type of `host.image.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostImageVersionv1240 = &rule.AttributeRule{
	Name:         "type.host.image.version",
	Title:        "The type of `host.image.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostIpv1240 = &rule.AttributeRule{
	Name:         "type.host.ip",
	Title:        "The type of `host.ip` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "host.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostMacv1240 = &rule.AttributeRule{
	Name:         "type.host.mac",
	Title:        "The type of `host.mac` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "host.mac") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostNamev1240 = &rule.AttributeRule{
	Name:         "type.host.name",
	Title:        "The type of `host.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHostTypev1240 = &rule.AttributeRule{
	Name:         "type.host.type",
	Title:        "The type of `host.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpMethodv1240 = &rule.AttributeRule{
	Name:         "type.http.method",
	Title:        "The type of `http.method` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpRequestBodySizev1240 = &rule.AttributeRule{
	Name:         "type.http.request.body.size",
	Title:        "The type of `http.request.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpRequestMethodOriginalv1240 = &rule.AttributeRule{
	Name:         "type.http.request.method_original",
	Title:        "The type of `http.request.method_original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.request.method_original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpRequestResendCountv1240 = &rule.AttributeRule{
	Name:         "type.http.request.resend_count",
	Title:        "The type of `http.request.resend_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.resend_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpRequestContentLengthv1240 = &rule.AttributeRule{
	Name:         "type.http.request_content_length",
	Title:        "The type of `http.request_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpResponseBodySizev1240 = &rule.AttributeRule{
	Name:         "type.http.response.body.size",
	Title:        "The type of `http.response.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpResponseStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.http.response.status_code",
	Title:        "The type of `http.response.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpResponseContentLengthv1240 = &rule.AttributeRule{
	Name:         "type.http.response_content_length",
	Title:        "The type of `http.response_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpRoutev1240 = &rule.AttributeRule{
	Name:         "type.http.route",
	Title:        "The type of `http.route` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.route") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpSchemev1240 = &rule.AttributeRule{
	Name:         "type.http.scheme",
	Title:        "The type of `http.scheme` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.http.status_code",
	Title:        "The type of `http.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpTargetv1240 = &rule.AttributeRule{
	Name:         "type.http.target",
	Title:        "The type of `http.target` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.target") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpUrlv1240 = &rule.AttributeRule{
	Name:         "type.http.url",
	Title:        "The type of `http.url` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.url") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeHttpUserAgentv1240 = &rule.AttributeRule{
	Name:         "type.http.user_agent",
	Title:        "The type of `http.user_agent` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.user_agent") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeJvmBufferPoolNamev1240 = &rule.AttributeRule{
	Name:         "type.jvm.buffer.pool.name",
	Title:        "The type of `jvm.buffer.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.buffer.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeJvmGcActionv1240 = &rule.AttributeRule{
	Name:         "type.jvm.gc.action",
	Title:        "The type of `jvm.gc.action` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.gc.action") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeJvmGcNamev1240 = &rule.AttributeRule{
	Name:         "type.jvm.gc.name",
	Title:        "The type of `jvm.gc.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.gc.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeJvmMemoryPoolNamev1240 = &rule.AttributeRule{
	Name:         "type.jvm.memory.pool.name",
	Title:        "The type of `jvm.memory.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.memory.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeJvmThreadDaemonv1240 = &rule.AttributeRule{
	Name:         "type.jvm.thread.daemon",
	Title:        "The type of `jvm.thread.daemon` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "jvm.thread.daemon") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SClusterNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.name",
	Title:        "The type of `k8s.cluster.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cluster.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SClusterUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.uid",
	Title:        "The type of `k8s.cluster.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cluster.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SContainerNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.container.name",
	Title:        "The type of `k8s.container.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.container.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SContainerRestartCountv1240 = &rule.AttributeRule{
	Name:         "type.k8s.container.restart_count",
	Title:        "The type of `k8s.container.restart_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "k8s.container.restart_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SCronjobNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.name",
	Title:        "The type of `k8s.cronjob.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cronjob.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SCronjobUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.uid",
	Title:        "The type of `k8s.cronjob.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cronjob.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SDaemonsetNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.name",
	Title:        "The type of `k8s.daemonset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.daemonset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SDaemonsetUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.uid",
	Title:        "The type of `k8s.daemonset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.daemonset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SDeploymentNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.name",
	Title:        "The type of `k8s.deployment.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.deployment.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SDeploymentUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.uid",
	Title:        "The type of `k8s.deployment.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.deployment.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SJobNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.job.name",
	Title:        "The type of `k8s.job.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.job.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SJobUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.job.uid",
	Title:        "The type of `k8s.job.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.job.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SNamespaceNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.namespace.name",
	Title:        "The type of `k8s.namespace.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.namespace.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SNodeNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.node.name",
	Title:        "The type of `k8s.node.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.node.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SNodeUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.node.uid",
	Title:        "The type of `k8s.node.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.node.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SPodNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.pod.name",
	Title:        "The type of `k8s.pod.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.pod.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SPodUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.pod.uid",
	Title:        "The type of `k8s.pod.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.pod.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SReplicasetNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.name",
	Title:        "The type of `k8s.replicaset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.replicaset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SReplicasetUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.uid",
	Title:        "The type of `k8s.replicaset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.replicaset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SStatefulsetNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.name",
	Title:        "The type of `k8s.statefulset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.statefulset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeK8SStatefulsetUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.uid",
	Title:        "The type of `k8s.statefulset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.statefulset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeLogFileNamev1240 = &rule.AttributeRule{
	Name:         "type.log.file.name",
	Title:        "The type of `log.file.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeLogFileNameResolvedv1240 = &rule.AttributeRule{
	Name:         "type.log.file.name_resolved",
	Title:        "The type of `log.file.name_resolved` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.name_resolved") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeLogFilePathv1240 = &rule.AttributeRule{
	Name:         "type.log.file.path",
	Title:        "The type of `log.file.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeLogFilePathResolvedv1240 = &rule.AttributeRule{
	Name:         "type.log.file.path_resolved",
	Title:        "The type of `log.file.path_resolved` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.path_resolved") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeLogRecordUidv1240 = &rule.AttributeRule{
	Name:         "type.log.record.uid",
	Title:        "The type of `log.record.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.record.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessageCompressedSizev1240 = &rule.AttributeRule{
	Name:         "type.message.compressed_size",
	Title:        "The type of `message.compressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.compressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessageIdv1240 = &rule.AttributeRule{
	Name:         "type.message.id",
	Title:        "The type of `message.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessageUncompressedSizev1240 = &rule.AttributeRule{
	Name:         "type.message.uncompressed_size",
	Title:        "The type of `message.uncompressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.uncompressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingBatchMessageCountv1240 = &rule.AttributeRule{
	Name:         "type.messaging.batch.message_count",
	Title:        "The type of `messaging.batch.message_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.batch.message_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingClient_Idv1240 = &rule.AttributeRule{
	Name:         "type.messaging.client_id",
	Title:        "The type of `messaging.client_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingDestinationAnonymousv1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.anonymous",
	Title:        "The type of `messaging.destination.anonymous` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination.anonymous") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingDestinationNamev1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.name",
	Title:        "The type of `messaging.destination.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingDestinationTemplatev1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.template",
	Title:        "The type of `messaging.destination.template` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.template") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingDestinationTemporaryv1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.temporary",
	Title:        "The type of `messaging.destination.temporary` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination.temporary") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingDestinationPublishAnonymousv1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.anonymous",
	Title:        "The type of `messaging.destination_publish.anonymous` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination_publish.anonymous") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingDestinationPublishNamev1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.name",
	Title:        "The type of `messaging.destination_publish.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination_publish.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingGcpPubsubMessageOrderingKeyv1240 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ordering_key",
	Title:        "The type of `messaging.gcp_pubsub.message.ordering_key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.gcp_pubsub.message.ordering_key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingKafkaConsumerGroupv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.consumer.group",
	Title:        "The type of `messaging.kafka.consumer.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.kafka.consumer.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingKafkaDestinationPartitionv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.destination.partition",
	Title:        "The type of `messaging.kafka.destination.partition` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.kafka.destination.partition") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingKafkaMessageKeyv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.key",
	Title:        "The type of `messaging.kafka.message.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.kafka.message.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingKafkaMessageOffsetv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.offset",
	Title:        "The type of `messaging.kafka.message.offset` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.kafka.message.offset") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingKafkaMessageTombstonev1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.tombstone",
	Title:        "The type of `messaging.kafka.message.tombstone` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.kafka.message.tombstone") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingMessageBodySizev1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.body.size",
	Title:        "The type of `messaging.message.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.message.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingMessageConversationIdv1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.conversation_id",
	Title:        "The type of `messaging.message.conversation_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.message.conversation_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingMessageEnvelopeSizev1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.envelope.size",
	Title:        "The type of `messaging.message.envelope.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.message.envelope.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingMessageIdv1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.id",
	Title:        "The type of `messaging.message.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRabbitmqDestinationRoutingKeyv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.destination.routing_key",
	Title:        "The type of `messaging.rabbitmq.destination.routing_key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rabbitmq.destination.routing_key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRocketmqClientGroupv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.client_group",
	Title:        "The type of `messaging.rocketmq.client_group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.client_group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRocketmqMessageDelayTimeLevelv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delay_time_level",
	Title:        "The type of `messaging.rocketmq.message.delay_time_level` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rocketmq.message.delay_time_level") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRocketmqMessageDeliveryTimestampv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delivery_timestamp",
	Title:        "The type of `messaging.rocketmq.message.delivery_timestamp` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rocketmq.message.delivery_timestamp") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRocketmqMessageGroupv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.group",
	Title:        "The type of `messaging.rocketmq.message.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.message.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRocketmqMessageKeysv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.keys",
	Title:        "The type of `messaging.rocketmq.message.keys` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "messaging.rocketmq.message.keys") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRocketmqMessageTagv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.tag",
	Title:        "The type of `messaging.rocketmq.message.tag` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.message.tag") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeMessagingRocketmqNamespacev1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.namespace",
	Title:        "The type of `messaging.rocketmq.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetHostNamev1240 = &rule.AttributeRule{
	Name:         "type.net.host.name",
	Title:        "The type of `net.host.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetHostPortv1240 = &rule.AttributeRule{
	Name:         "type.net.host.port",
	Title:        "The type of `net.host.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetPeerNamev1240 = &rule.AttributeRule{
	Name:         "type.net.peer.name",
	Title:        "The type of `net.peer.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetPeerPortv1240 = &rule.AttributeRule{
	Name:         "type.net.peer.port",
	Title:        "The type of `net.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetProtocolNamev1240 = &rule.AttributeRule{
	Name:         "type.net.protocol.name",
	Title:        "The type of `net.protocol.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "type.net.protocol.version",
	Title:        "The type of `net.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetSockHostAddrv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.host.addr",
	Title:        "The type of `net.sock.host.addr` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.host.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetSockHostPortv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.host.port",
	Title:        "The type of `net.sock.host.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.sock.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetSockPeerAddrv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.addr",
	Title:        "The type of `net.sock.peer.addr` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.peer.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetSockPeerNamev1240 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.name",
	Title:        "The type of `net.sock.peer.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetSockPeerPortv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.port",
	Title:        "The type of `net.sock.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.sock.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkCarrierIccv1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.icc",
	Title:        "The type of `network.carrier.icc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.icc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkCarrierMccv1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.mcc",
	Title:        "The type of `network.carrier.mcc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.mcc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkCarrierMncv1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.mnc",
	Title:        "The type of `network.carrier.mnc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.mnc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkCarrierNamev1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.name",
	Title:        "The type of `network.carrier.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkLocalAddressv1240 = &rule.AttributeRule{
	Name:         "type.network.local.address",
	Title:        "The type of `network.local.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.local.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkLocalPortv1240 = &rule.AttributeRule{
	Name:         "type.network.local.port",
	Title:        "The type of `network.local.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "network.local.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkPeerAddressv1240 = &rule.AttributeRule{
	Name:         "type.network.peer.address",
	Title:        "The type of `network.peer.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.peer.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkPeerPortv1240 = &rule.AttributeRule{
	Name:         "type.network.peer.port",
	Title:        "The type of `network.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "network.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkProtocolNamev1240 = &rule.AttributeRule{
	Name:         "type.network.protocol.name",
	Title:        "The type of `network.protocol.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeNetworkProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "type.network.protocol.version",
	Title:        "The type of `network.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOciManifestDigestv1240 = &rule.AttributeRule{
	Name:         "type.oci.manifest.digest",
	Title:        "The type of `oci.manifest.digest` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "oci.manifest.digest") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOsBuildIdv1240 = &rule.AttributeRule{
	Name:         "type.os.build_id",
	Title:        "The type of `os.build_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.build_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOsDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.os.description",
	Title:        "The type of `os.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOsNamev1240 = &rule.AttributeRule{
	Name:         "type.os.name",
	Title:        "The type of `os.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOsVersionv1240 = &rule.AttributeRule{
	Name:         "type.os.version",
	Title:        "The type of `os.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOtelLibraryNamev1240 = &rule.AttributeRule{
	Name:         "type.otel.library.name",
	Title:        "The type of `otel.library.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.library.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOtelLibraryVersionv1240 = &rule.AttributeRule{
	Name:         "type.otel.library.version",
	Title:        "The type of `otel.library.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.library.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOtelScopeNamev1240 = &rule.AttributeRule{
	Name:         "type.otel.scope.name",
	Title:        "The type of `otel.scope.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.scope.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOtelScopeVersionv1240 = &rule.AttributeRule{
	Name:         "type.otel.scope.version",
	Title:        "The type of `otel.scope.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.scope.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeOtelStatusDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.otel.status_description",
	Title:        "The type of `otel.status_description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.status_description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypePeerServicev1240 = &rule.AttributeRule{
	Name:         "type.peer.service",
	Title:        "The type of `peer.service` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "peer.service") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypePoolNamev1240 = &rule.AttributeRule{
	Name:         "type.pool.name",
	Title:        "The type of `pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessCommandv1240 = &rule.AttributeRule{
	Name:         "type.process.command",
	Title:        "The type of `process.command` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.command") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessCommandArgsv1240 = &rule.AttributeRule{
	Name:         "type.process.command_args",
	Title:        "The type of `process.command_args` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "process.command_args") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessCommandLinev1240 = &rule.AttributeRule{
	Name:         "type.process.command_line",
	Title:        "The type of `process.command_line` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.command_line") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessExecutableNamev1240 = &rule.AttributeRule{
	Name:         "type.process.executable.name",
	Title:        "The type of `process.executable.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.executable.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessExecutablePathv1240 = &rule.AttributeRule{
	Name:         "type.process.executable.path",
	Title:        "The type of `process.executable.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.executable.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessOwnerv1240 = &rule.AttributeRule{
	Name:         "type.process.owner",
	Title:        "The type of `process.owner` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.owner") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessParentPidv1240 = &rule.AttributeRule{
	Name:         "type.process.parent_pid",
	Title:        "The type of `process.parent_pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.parent_pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessPidv1240 = &rule.AttributeRule{
	Name:         "type.process.pid",
	Title:        "The type of `process.pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessRuntimeDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.process.runtime.description",
	Title:        "The type of `process.runtime.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessRuntimeNamev1240 = &rule.AttributeRule{
	Name:         "type.process.runtime.name",
	Title:        "The type of `process.runtime.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeProcessRuntimeVersionv1240 = &rule.AttributeRule{
	Name:         "type.process.runtime.version",
	Title:        "The type of `process.runtime.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeRpcJsonrpcErrorCodev1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_code",
	Title:        "The type of `rpc.jsonrpc.error_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.jsonrpc.error_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeRpcJsonrpcErrorMessagev1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_message",
	Title:        "The type of `rpc.jsonrpc.error_message` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.error_message") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeRpcJsonrpcRequestIdv1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.request_id",
	Title:        "The type of `rpc.jsonrpc.request_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.request_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeRpcJsonrpcVersionv1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.version",
	Title:        "The type of `rpc.jsonrpc.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeRpcMethodv1240 = &rule.AttributeRule{
	Name:         "type.rpc.method",
	Title:        "The type of `rpc.method` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeRpcServicev1240 = &rule.AttributeRule{
	Name:         "type.rpc.service",
	Title:        "The type of `rpc.service` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.service") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeServerAddressv1240 = &rule.AttributeRule{
	Name:         "type.server.address",
	Title:        "The type of `server.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "server.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeServerPortv1240 = &rule.AttributeRule{
	Name:         "type.server.port",
	Title:        "The type of `server.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "server.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeServiceInstanceIdv1240 = &rule.AttributeRule{
	Name:         "type.service.instance.id",
	Title:        "The type of `service.instance.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeServiceNamev1240 = &rule.AttributeRule{
	Name:         "type.service.name",
	Title:        "The type of `service.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeServiceNamespacev1240 = &rule.AttributeRule{
	Name:         "type.service.namespace",
	Title:        "The type of `service.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeServiceVersionv1240 = &rule.AttributeRule{
	Name:         "type.service.version",
	Title:        "The type of `service.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSessionIdv1240 = &rule.AttributeRule{
	Name:         "type.session.id",
	Title:        "The type of `session.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "session.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSessionPreviousIdv1240 = &rule.AttributeRule{
	Name:         "type.session.previous_id",
	Title:        "The type of `session.previous_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "session.previous_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSourceAddressv1240 = &rule.AttributeRule{
	Name:         "type.source.address",
	Title:        "The type of `source.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "source.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSourcePortv1240 = &rule.AttributeRule{
	Name:         "type.source.port",
	Title:        "The type of `source.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "source.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSystemCpuLogicalNumberv1240 = &rule.AttributeRule{
	Name:         "type.system.cpu.logical_number",
	Title:        "The type of `system.cpu.logical_number` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "system.cpu.logical_number") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSystemDevicev1240 = &rule.AttributeRule{
	Name:         "type.system.device",
	Title:        "The type of `system.device` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.device") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSystemFilesystemModev1240 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mode",
	Title:        "The type of `system.filesystem.mode` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.filesystem.mode") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeSystemFilesystemMountpointv1240 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mountpoint",
	Title:        "The type of `system.filesystem.mountpoint` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.filesystem.mountpoint") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTelemetryDistroNamev1240 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.name",
	Title:        "The type of `telemetry.distro.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.distro.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTelemetryDistroVersionv1240 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.version",
	Title:        "The type of `telemetry.distro.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.distro.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTelemetrySdkNamev1240 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.name",
	Title:        "The type of `telemetry.sdk.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.sdk.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTelemetrySdkVersionv1240 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.version",
	Title:        "The type of `telemetry.sdk.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.sdk.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeThreadIdv1240 = &rule.AttributeRule{
	Name:         "type.thread.id",
	Title:        "The type of `thread.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "thread.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeThreadNamev1240 = &rule.AttributeRule{
	Name:         "type.thread.name",
	Title:        "The type of `thread.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "thread.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsCipherv1240 = &rule.AttributeRule{
	Name:         "type.tls.cipher",
	Title:        "The type of `tls.cipher` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.cipher") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientCertificatev1240 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate",
	Title:        "The type of `tls.client.certificate` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.certificate") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientCertificateChainv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate_chain",
	Title:        "The type of `tls.client.certificate_chain` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.client.certificate_chain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientHashMd5v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.md5",
	Title:        "The type of `tls.client.hash.md5` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.md5") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientHashSha1v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha1",
	Title:        "The type of `tls.client.hash.sha1` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.sha1") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientHashSha256v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha256",
	Title:        "The type of `tls.client.hash.sha256` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.sha256") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientIssuerv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.issuer",
	Title:        "The type of `tls.client.issuer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.issuer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientJa3v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.ja3",
	Title:        "The type of `tls.client.ja3` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.ja3") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientNotAfterv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.not_after",
	Title:        "The type of `tls.client.not_after` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.not_after") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientNotBeforev1240 = &rule.AttributeRule{
	Name:         "type.tls.client.not_before",
	Title:        "The type of `tls.client.not_before` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.not_before") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientServerNamev1240 = &rule.AttributeRule{
	Name:         "type.tls.client.server_name",
	Title:        "The type of `tls.client.server_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientSubjectv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.subject",
	Title:        "The type of `tls.client.subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsClientSupportedCiphersv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.supported_ciphers",
	Title:        "The type of `tls.client.supported_ciphers` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.client.supported_ciphers") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsCurvev1240 = &rule.AttributeRule{
	Name:         "type.tls.curve",
	Title:        "The type of `tls.curve` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.curve") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsEstablishedv1240 = &rule.AttributeRule{
	Name:         "type.tls.established",
	Title:        "The type of `tls.established` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "tls.established") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsNextProtocolv1240 = &rule.AttributeRule{
	Name:         "type.tls.next_protocol",
	Title:        "The type of `tls.next_protocol` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.next_protocol") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "type.tls.protocol.version",
	Title:        "The type of `tls.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsResumedv1240 = &rule.AttributeRule{
	Name:         "type.tls.resumed",
	Title:        "The type of `tls.resumed` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "tls.resumed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerCertificatev1240 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate",
	Title:        "The type of `tls.server.certificate` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.certificate") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerCertificateChainv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate_chain",
	Title:        "The type of `tls.server.certificate_chain` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.server.certificate_chain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerHashMd5v1240 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.md5",
	Title:        "The type of `tls.server.hash.md5` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.md5") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerHashSha1v1240 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha1",
	Title:        "The type of `tls.server.hash.sha1` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.sha1") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerHashSha256v1240 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha256",
	Title:        "The type of `tls.server.hash.sha256` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.sha256") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerIssuerv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.issuer",
	Title:        "The type of `tls.server.issuer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.issuer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerJa3Sv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.ja3s",
	Title:        "The type of `tls.server.ja3s` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.ja3s") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerNotAfterv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.not_after",
	Title:        "The type of `tls.server.not_after` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.not_after") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerNotBeforev1240 = &rule.AttributeRule{
	Name:         "type.tls.server.not_before",
	Title:        "The type of `tls.server.not_before` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.not_before") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeTlsServerSubjectv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.subject",
	Title:        "The type of `tls.server.subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeUrlFragmentv1240 = &rule.AttributeRule{
	Name:         "type.url.fragment",
	Title:        "The type of `url.fragment` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.fragment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeUrlFullv1240 = &rule.AttributeRule{
	Name:         "type.url.full",
	Title:        "The type of `url.full` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.full") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeUrlPathv1240 = &rule.AttributeRule{
	Name:         "type.url.path",
	Title:        "The type of `url.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeUrlQueryv1240 = &rule.AttributeRule{
	Name:         "type.url.query",
	Title:        "The type of `url.query` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.query") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeUrlSchemev1240 = &rule.AttributeRule{
	Name:         "type.url.scheme",
	Title:        "The type of `url.scheme` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeUserAgentOriginalv1240 = &rule.AttributeRule{
	Name:         "type.user_agent.original",
	Title:        "The type of `user_agent.original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user_agent.original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeWebengineDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.webengine.description",
	Title:        "The type of `webengine.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeWebengineNamev1240 = &rule.AttributeRule{
	Name:         "type.webengine.name",
	Title:        "The type of `webengine.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

var ruleTypeWebengineVersionv1240 = &rule.AttributeRule{
	Name:         "type.webengine.version",
	Title:        "The type of `webengine.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.24.0",
}

