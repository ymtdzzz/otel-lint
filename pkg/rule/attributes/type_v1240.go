// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

var RulesTypev1240 = []*rule.AttributeRule{
	ruleTypeAndroidOsApiLevelv1240,
	ruleTypeAspnetcoreDiagnosticsHandlerTypev1240,
	ruleTypeAspnetcoreRateLimitingPolicyv1240,
	ruleTypeAspnetcoreRequestIsUnhandledv1240,
	ruleTypeAspnetcoreRoutingIsFallbackv1240,
	ruleTypeAwsDynamodbAttributeDefinitionsv1240,
	ruleTypeAwsDynamodbAttributesToGetv1240,
	ruleTypeAwsDynamodbConsistentReadv1240,
	ruleTypeAwsDynamodbConsumedCapacityv1240,
	ruleTypeAwsDynamodbCountv1240,
	ruleTypeAwsDynamodbExclusiveStartTablev1240,
	ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1240,
	ruleTypeAwsDynamodbGlobalSecondaryIndexesv1240,
	ruleTypeAwsDynamodbIndexNamev1240,
	ruleTypeAwsDynamodbItemCollectionMetricsv1240,
	ruleTypeAwsDynamodbLimitv1240,
	ruleTypeAwsDynamodbLocalSecondaryIndexesv1240,
	ruleTypeAwsDynamodbProjectionv1240,
	ruleTypeAwsDynamodbProvisionedReadCapacityv1240,
	ruleTypeAwsDynamodbProvisionedWriteCapacityv1240,
	ruleTypeAwsDynamodbScanForwardv1240,
	ruleTypeAwsDynamodbScannedCountv1240,
	ruleTypeAwsDynamodbSegmentv1240,
	ruleTypeAwsDynamodbSelectv1240,
	ruleTypeAwsDynamodbTableCountv1240,
	ruleTypeAwsDynamodbTableNamesv1240,
	ruleTypeAwsDynamodbTotalSegmentsv1240,
	ruleTypeAwsEcsClusterArnv1240,
	ruleTypeAwsEcsContainerArnv1240,
	ruleTypeAwsEcsTaskArnv1240,
	ruleTypeAwsEcsTaskFamilyv1240,
	ruleTypeAwsEcsTaskRevisionv1240,
	ruleTypeAwsEksClusterArnv1240,
	ruleTypeAwsLambdaInvokedArnv1240,
	ruleTypeAwsLogGroupArnsv1240,
	ruleTypeAwsLogGroupNamesv1240,
	ruleTypeAwsLogStreamArnsv1240,
	ruleTypeAwsLogStreamNamesv1240,
	ruleTypeAwsRequestIdv1240,
	ruleTypeAwsS3Bucketv1240,
	ruleTypeAwsS3CopySourcev1240,
	ruleTypeAwsS3Deletev1240,
	ruleTypeAwsS3Keyv1240,
	ruleTypeAwsS3PartNumberv1240,
	ruleTypeAwsS3UploadIdv1240,
	ruleTypeBrowserBrandsv1240,
	ruleTypeBrowserLanguagev1240,
	ruleTypeBrowserMobilev1240,
	ruleTypeBrowserPlatformv1240,
	ruleTypeClientAddressv1240,
	ruleTypeClientPortv1240,
	ruleTypeCloudAccountIdv1240,
	ruleTypeCloudAvailabilityZonev1240,
	ruleTypeCloudRegionv1240,
	ruleTypeCloudResourceIdv1240,
	ruleTypeCloudeventsEventIdv1240,
	ruleTypeCloudeventsEventSourcev1240,
	ruleTypeCloudeventsEventSpecVersionv1240,
	ruleTypeCloudeventsEventSubjectv1240,
	ruleTypeCloudeventsEventTypev1240,
	ruleTypeCodeColumnv1240,
	ruleTypeCodeFilepathv1240,
	ruleTypeCodeFunctionv1240,
	ruleTypeCodeLinenov1240,
	ruleTypeCodeNamespacev1240,
	ruleTypeCodeStacktracev1240,
	ruleTypeContainerCommandv1240,
	ruleTypeContainerCommandArgsv1240,
	ruleTypeContainerCommandLinev1240,
	ruleTypeContainerIdv1240,
	ruleTypeContainerImageIdv1240,
	ruleTypeContainerImageNamev1240,
	ruleTypeContainerImageRepoDigestsv1240,
	ruleTypeContainerImageTagsv1240,
	ruleTypeContainerNamev1240,
	ruleTypeContainerRuntimev1240,
	ruleTypeDbCassandraCoordinatorDcv1240,
	ruleTypeDbCassandraCoordinatorIdv1240,
	ruleTypeDbCassandraIdempotencev1240,
	ruleTypeDbCassandraPageSizev1240,
	ruleTypeDbCassandraSpeculativeExecutionCountv1240,
	ruleTypeDbCassandraTablev1240,
	ruleTypeDbConnectionStringv1240,
	ruleTypeDbCosmosdbClientIdv1240,
	ruleTypeDbCosmosdbContainerv1240,
	ruleTypeDbCosmosdbRequestChargev1240,
	ruleTypeDbCosmosdbRequestContentLengthv1240,
	ruleTypeDbCosmosdbStatusCodev1240,
	ruleTypeDbCosmosdbSubStatusCodev1240,
	ruleTypeDbElasticsearchClusterNamev1240,
	ruleTypeDbElasticsearchNodeNamev1240,
	ruleTypeDbInstanceIdv1240,
	ruleTypeDbJdbcDriverClassnamev1240,
	ruleTypeDbMongodbCollectionv1240,
	ruleTypeDbMssqlInstanceNamev1240,
	ruleTypeDbNamev1240,
	ruleTypeDbOperationv1240,
	ruleTypeDbRedisDatabaseIndexv1240,
	ruleTypeDbSqlTablev1240,
	ruleTypeDbStatementv1240,
	ruleTypeDbUserv1240,
	ruleTypeDeploymentEnvironmentv1240,
	ruleTypeDestinationAddressv1240,
	ruleTypeDestinationPortv1240,
	ruleTypeDeviceIdv1240,
	ruleTypeDeviceManufacturerv1240,
	ruleTypeDeviceModelIdentifierv1240,
	ruleTypeDeviceModelNamev1240,
	ruleTypeDnsQuestionNamev1240,
	ruleTypeEnduserIdv1240,
	ruleTypeEnduserRolev1240,
	ruleTypeEnduserScopev1240,
	ruleTypeEventNamev1240,
	ruleTypeExceptionEscapedv1240,
	ruleTypeExceptionMessagev1240,
	ruleTypeExceptionStacktracev1240,
	ruleTypeExceptionTypev1240,
	ruleTypeFaasColdstartv1240,
	ruleTypeFaasCronv1240,
	ruleTypeFaasDocumentCollectionv1240,
	ruleTypeFaasDocumentNamev1240,
	ruleTypeFaasDocumentTimev1240,
	ruleTypeFaasInstancev1240,
	ruleTypeFaasInvocationIdv1240,
	ruleTypeFaasInvokedNamev1240,
	ruleTypeFaasInvokedRegionv1240,
	ruleTypeFaasMaxMemoryv1240,
	ruleTypeFaasNamev1240,
	ruleTypeFaasTimev1240,
	ruleTypeFaasVersionv1240,
	ruleTypeFeatureFlagKeyv1240,
	ruleTypeFeatureFlagProviderNamev1240,
	ruleTypeFeatureFlagVariantv1240,
	ruleTypeGcpCloudRunJobExecutionv1240,
	ruleTypeGcpCloudRunJobTaskIndexv1240,
	ruleTypeGcpGceInstanceHostnamev1240,
	ruleTypeGcpGceInstanceNamev1240,
	ruleTypeGraphqlDocumentv1240,
	ruleTypeGraphqlOperationNamev1240,
	ruleTypeHerokuAppIdv1240,
	ruleTypeHerokuReleaseCommitv1240,
	ruleTypeHerokuReleaseCreationTimestampv1240,
	ruleTypeHostCpuCacheL2Sizev1240,
	ruleTypeHostCpuFamilyv1240,
	ruleTypeHostCpuModelIdv1240,
	ruleTypeHostCpuModelNamev1240,
	ruleTypeHostCpuSteppingv1240,
	ruleTypeHostCpuVendorIdv1240,
	ruleTypeHostIdv1240,
	ruleTypeHostImageIdv1240,
	ruleTypeHostImageNamev1240,
	ruleTypeHostImageVersionv1240,
	ruleTypeHostIpv1240,
	ruleTypeHostMacv1240,
	ruleTypeHostNamev1240,
	ruleTypeHostTypev1240,
	ruleTypeHttpMethodv1240,
	ruleTypeHttpRequestBodySizev1240,
	ruleTypeHttpRequestMethodOriginalv1240,
	ruleTypeHttpRequestResendCountv1240,
	ruleTypeHttpRequestContentLengthv1240,
	ruleTypeHttpResponseBodySizev1240,
	ruleTypeHttpResponseStatusCodev1240,
	ruleTypeHttpResponseContentLengthv1240,
	ruleTypeHttpRoutev1240,
	ruleTypeHttpSchemev1240,
	ruleTypeHttpStatusCodev1240,
	ruleTypeHttpTargetv1240,
	ruleTypeHttpUrlv1240,
	ruleTypeHttpUserAgentv1240,
	ruleTypeJvmBufferPoolNamev1240,
	ruleTypeJvmGcActionv1240,
	ruleTypeJvmGcNamev1240,
	ruleTypeJvmMemoryPoolNamev1240,
	ruleTypeJvmThreadDaemonv1240,
	ruleTypeK8SClusterNamev1240,
	ruleTypeK8SClusterUidv1240,
	ruleTypeK8SContainerNamev1240,
	ruleTypeK8SContainerRestartCountv1240,
	ruleTypeK8SCronjobNamev1240,
	ruleTypeK8SCronjobUidv1240,
	ruleTypeK8SDaemonsetNamev1240,
	ruleTypeK8SDaemonsetUidv1240,
	ruleTypeK8SDeploymentNamev1240,
	ruleTypeK8SDeploymentUidv1240,
	ruleTypeK8SJobNamev1240,
	ruleTypeK8SJobUidv1240,
	ruleTypeK8SNamespaceNamev1240,
	ruleTypeK8SNodeNamev1240,
	ruleTypeK8SNodeUidv1240,
	ruleTypeK8SPodNamev1240,
	ruleTypeK8SPodUidv1240,
	ruleTypeK8SReplicasetNamev1240,
	ruleTypeK8SReplicasetUidv1240,
	ruleTypeK8SStatefulsetNamev1240,
	ruleTypeK8SStatefulsetUidv1240,
	ruleTypeLogFileNamev1240,
	ruleTypeLogFileNameResolvedv1240,
	ruleTypeLogFilePathv1240,
	ruleTypeLogFilePathResolvedv1240,
	ruleTypeLogRecordUidv1240,
	ruleTypeMessageCompressedSizev1240,
	ruleTypeMessageIdv1240,
	ruleTypeMessageUncompressedSizev1240,
	ruleTypeMessagingBatchMessageCountv1240,
	ruleTypeMessagingClient_Idv1240,
	ruleTypeMessagingDestinationAnonymousv1240,
	ruleTypeMessagingDestinationNamev1240,
	ruleTypeMessagingDestinationTemplatev1240,
	ruleTypeMessagingDestinationTemporaryv1240,
	ruleTypeMessagingDestinationPublishAnonymousv1240,
	ruleTypeMessagingDestinationPublishNamev1240,
	ruleTypeMessagingGcpPubsubMessageOrderingKeyv1240,
	ruleTypeMessagingKafkaConsumerGroupv1240,
	ruleTypeMessagingKafkaDestinationPartitionv1240,
	ruleTypeMessagingKafkaMessageKeyv1240,
	ruleTypeMessagingKafkaMessageOffsetv1240,
	ruleTypeMessagingKafkaMessageTombstonev1240,
	ruleTypeMessagingMessageBodySizev1240,
	ruleTypeMessagingMessageConversationIdv1240,
	ruleTypeMessagingMessageEnvelopeSizev1240,
	ruleTypeMessagingMessageIdv1240,
	ruleTypeMessagingRabbitmqDestinationRoutingKeyv1240,
	ruleTypeMessagingRocketmqClientGroupv1240,
	ruleTypeMessagingRocketmqMessageDelayTimeLevelv1240,
	ruleTypeMessagingRocketmqMessageDeliveryTimestampv1240,
	ruleTypeMessagingRocketmqMessageGroupv1240,
	ruleTypeMessagingRocketmqMessageKeysv1240,
	ruleTypeMessagingRocketmqMessageTagv1240,
	ruleTypeMessagingRocketmqNamespacev1240,
	ruleTypeNetHostNamev1240,
	ruleTypeNetHostPortv1240,
	ruleTypeNetPeerNamev1240,
	ruleTypeNetPeerPortv1240,
	ruleTypeNetProtocolNamev1240,
	ruleTypeNetProtocolVersionv1240,
	ruleTypeNetSockHostAddrv1240,
	ruleTypeNetSockHostPortv1240,
	ruleTypeNetSockPeerAddrv1240,
	ruleTypeNetSockPeerNamev1240,
	ruleTypeNetSockPeerPortv1240,
	ruleTypeNetworkCarrierIccv1240,
	ruleTypeNetworkCarrierMccv1240,
	ruleTypeNetworkCarrierMncv1240,
	ruleTypeNetworkCarrierNamev1240,
	ruleTypeNetworkLocalAddressv1240,
	ruleTypeNetworkLocalPortv1240,
	ruleTypeNetworkPeerAddressv1240,
	ruleTypeNetworkPeerPortv1240,
	ruleTypeNetworkProtocolNamev1240,
	ruleTypeNetworkProtocolVersionv1240,
	ruleTypeOciManifestDigestv1240,
	ruleTypeOsBuildIdv1240,
	ruleTypeOsDescriptionv1240,
	ruleTypeOsNamev1240,
	ruleTypeOsVersionv1240,
	ruleTypeOtelLibraryNamev1240,
	ruleTypeOtelLibraryVersionv1240,
	ruleTypeOtelScopeNamev1240,
	ruleTypeOtelScopeVersionv1240,
	ruleTypeOtelStatusDescriptionv1240,
	ruleTypePeerServicev1240,
	ruleTypePoolNamev1240,
	ruleTypeProcessCommandv1240,
	ruleTypeProcessCommandArgsv1240,
	ruleTypeProcessCommandLinev1240,
	ruleTypeProcessExecutableNamev1240,
	ruleTypeProcessExecutablePathv1240,
	ruleTypeProcessOwnerv1240,
	ruleTypeProcessParentPidv1240,
	ruleTypeProcessPidv1240,
	ruleTypeProcessRuntimeDescriptionv1240,
	ruleTypeProcessRuntimeNamev1240,
	ruleTypeProcessRuntimeVersionv1240,
	ruleTypeRpcJsonrpcErrorCodev1240,
	ruleTypeRpcJsonrpcErrorMessagev1240,
	ruleTypeRpcJsonrpcRequestIdv1240,
	ruleTypeRpcJsonrpcVersionv1240,
	ruleTypeRpcMethodv1240,
	ruleTypeRpcServicev1240,
	ruleTypeServerAddressv1240,
	ruleTypeServerPortv1240,
	ruleTypeServiceInstanceIdv1240,
	ruleTypeServiceNamev1240,
	ruleTypeServiceNamespacev1240,
	ruleTypeServiceVersionv1240,
	ruleTypeSessionIdv1240,
	ruleTypeSessionPreviousIdv1240,
	ruleTypeSourceAddressv1240,
	ruleTypeSourcePortv1240,
	ruleTypeSystemCpuLogicalNumberv1240,
	ruleTypeSystemDevicev1240,
	ruleTypeSystemFilesystemModev1240,
	ruleTypeSystemFilesystemMountpointv1240,
	ruleTypeTelemetryDistroNamev1240,
	ruleTypeTelemetryDistroVersionv1240,
	ruleTypeTelemetrySdkNamev1240,
	ruleTypeTelemetrySdkVersionv1240,
	ruleTypeThreadIdv1240,
	ruleTypeThreadNamev1240,
	ruleTypeTlsCipherv1240,
	ruleTypeTlsClientCertificatev1240,
	ruleTypeTlsClientCertificateChainv1240,
	ruleTypeTlsClientHashMd5v1240,
	ruleTypeTlsClientHashSha1v1240,
	ruleTypeTlsClientHashSha256v1240,
	ruleTypeTlsClientIssuerv1240,
	ruleTypeTlsClientJa3v1240,
	ruleTypeTlsClientNotAfterv1240,
	ruleTypeTlsClientNotBeforev1240,
	ruleTypeTlsClientServerNamev1240,
	ruleTypeTlsClientSubjectv1240,
	ruleTypeTlsClientSupportedCiphersv1240,
	ruleTypeTlsCurvev1240,
	ruleTypeTlsEstablishedv1240,
	ruleTypeTlsNextProtocolv1240,
	ruleTypeTlsProtocolVersionv1240,
	ruleTypeTlsResumedv1240,
	ruleTypeTlsServerCertificatev1240,
	ruleTypeTlsServerCertificateChainv1240,
	ruleTypeTlsServerHashMd5v1240,
	ruleTypeTlsServerHashSha1v1240,
	ruleTypeTlsServerHashSha256v1240,
	ruleTypeTlsServerIssuerv1240,
	ruleTypeTlsServerJa3Sv1240,
	ruleTypeTlsServerNotAfterv1240,
	ruleTypeTlsServerNotBeforev1240,
	ruleTypeTlsServerSubjectv1240,
	ruleTypeUrlFragmentv1240,
	ruleTypeUrlFullv1240,
	ruleTypeUrlPathv1240,
	ruleTypeUrlQueryv1240,
	ruleTypeUrlSchemev1240,
	ruleTypeUserAgentOriginalv1240,
	ruleTypeWebengineDescriptionv1240,
	ruleTypeWebengineNamev1240,
	ruleTypeWebengineVersionv1240,
}

var ruleTypeAndroidOsApiLevelv1240 = &rule.AttributeRule{
	Name:         "type.android.os.api_level",
	Title:        "The type of `android.os.api_level` is string",
	Check:        checkTypeAndroidOsApiLevelv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAndroidOsApiLevelv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("android.os.api_level")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAspnetcoreDiagnosticsHandlerTypev1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.diagnostics.handler.type",
	Title:        "The type of `aspnetcore.diagnostics.handler.type` is string",
	Check:        checkTypeAspnetcoreDiagnosticsHandlerTypev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAspnetcoreDiagnosticsHandlerTypev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.diagnostics.handler.type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAspnetcoreRateLimitingPolicyv1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.rate_limiting.policy",
	Title:        "The type of `aspnetcore.rate_limiting.policy` is string",
	Check:        checkTypeAspnetcoreRateLimitingPolicyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAspnetcoreRateLimitingPolicyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.rate_limiting.policy")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAspnetcoreRequestIsUnhandledv1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.request.is_unhandled",
	Title:        "The type of `aspnetcore.request.is_unhandled` is boolean",
	Check:        checkTypeAspnetcoreRequestIsUnhandledv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAspnetcoreRequestIsUnhandledv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.request.is_unhandled")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAspnetcoreRoutingIsFallbackv1240 = &rule.AttributeRule{
	Name:         "type.aspnetcore.routing.is_fallback",
	Title:        "The type of `aspnetcore.routing.is_fallback` is boolean",
	Check:        checkTypeAspnetcoreRoutingIsFallbackv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAspnetcoreRoutingIsFallbackv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.routing.is_fallback")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAwsDynamodbAttributeDefinitionsv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attribute_definitions",
	Title:        "The type of `aws.dynamodb.attribute_definitions` is string[]",
	Check:        checkTypeAwsDynamodbAttributeDefinitionsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbAttributeDefinitionsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.attribute_definitions")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbAttributesToGetv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attributes_to_get",
	Title:        "The type of `aws.dynamodb.attributes_to_get` is string[]",
	Check:        checkTypeAwsDynamodbAttributesToGetv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbAttributesToGetv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.attributes_to_get")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbConsistentReadv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consistent_read",
	Title:        "The type of `aws.dynamodb.consistent_read` is boolean",
	Check:        checkTypeAwsDynamodbConsistentReadv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbConsistentReadv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.consistent_read")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAwsDynamodbConsumedCapacityv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consumed_capacity",
	Title:        "The type of `aws.dynamodb.consumed_capacity` is string[]",
	Check:        checkTypeAwsDynamodbConsumedCapacityv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbConsumedCapacityv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.consumed_capacity")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbCountv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.count",
	Title:        "The type of `aws.dynamodb.count` is int",
	Check:        checkTypeAwsDynamodbCountv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbCountv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbExclusiveStartTablev1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.exclusive_start_table",
	Title:        "The type of `aws.dynamodb.exclusive_start_table` is string",
	Check:        checkTypeAwsDynamodbExclusiveStartTablev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbExclusiveStartTablev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.exclusive_start_table")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_index_updates",
	Title:        "The type of `aws.dynamodb.global_secondary_index_updates` is string[]",
	Check:        checkTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.global_secondary_index_updates")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_indexes",
	Title:        "The type of `aws.dynamodb.global_secondary_indexes` is string[]",
	Check:        checkTypeAwsDynamodbGlobalSecondaryIndexesv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbGlobalSecondaryIndexesv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.global_secondary_indexes")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbIndexNamev1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.index_name",
	Title:        "The type of `aws.dynamodb.index_name` is string",
	Check:        checkTypeAwsDynamodbIndexNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbIndexNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.index_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbItemCollectionMetricsv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.item_collection_metrics",
	Title:        "The type of `aws.dynamodb.item_collection_metrics` is string",
	Check:        checkTypeAwsDynamodbItemCollectionMetricsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbItemCollectionMetricsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.item_collection_metrics")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbLimitv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.limit",
	Title:        "The type of `aws.dynamodb.limit` is int",
	Check:        checkTypeAwsDynamodbLimitv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbLimitv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.limit")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbLocalSecondaryIndexesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.local_secondary_indexes",
	Title:        "The type of `aws.dynamodb.local_secondary_indexes` is string[]",
	Check:        checkTypeAwsDynamodbLocalSecondaryIndexesv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbLocalSecondaryIndexesv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.local_secondary_indexes")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbProjectionv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.projection",
	Title:        "The type of `aws.dynamodb.projection` is string",
	Check:        checkTypeAwsDynamodbProjectionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbProjectionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.projection")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbProvisionedReadCapacityv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_read_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_read_capacity` is double",
	Check:        checkTypeAwsDynamodbProvisionedReadCapacityv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbProvisionedReadCapacityv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.provisioned_read_capacity")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeDouble
}

var ruleTypeAwsDynamodbProvisionedWriteCapacityv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_write_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_write_capacity` is double",
	Check:        checkTypeAwsDynamodbProvisionedWriteCapacityv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbProvisionedWriteCapacityv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.provisioned_write_capacity")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeDouble
}

var ruleTypeAwsDynamodbScanForwardv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scan_forward",
	Title:        "The type of `aws.dynamodb.scan_forward` is boolean",
	Check:        checkTypeAwsDynamodbScanForwardv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbScanForwardv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.scan_forward")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAwsDynamodbScannedCountv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scanned_count",
	Title:        "The type of `aws.dynamodb.scanned_count` is int",
	Check:        checkTypeAwsDynamodbScannedCountv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbScannedCountv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.scanned_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbSegmentv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.segment",
	Title:        "The type of `aws.dynamodb.segment` is int",
	Check:        checkTypeAwsDynamodbSegmentv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbSegmentv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.segment")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbSelectv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.select",
	Title:        "The type of `aws.dynamodb.select` is string",
	Check:        checkTypeAwsDynamodbSelectv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbSelectv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.select")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbTableCountv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_count",
	Title:        "The type of `aws.dynamodb.table_count` is int",
	Check:        checkTypeAwsDynamodbTableCountv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbTableCountv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.table_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbTableNamesv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_names",
	Title:        "The type of `aws.dynamodb.table_names` is string[]",
	Check:        checkTypeAwsDynamodbTableNamesv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbTableNamesv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.table_names")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbTotalSegmentsv1240 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.total_segments",
	Title:        "The type of `aws.dynamodb.total_segments` is int",
	Check:        checkTypeAwsDynamodbTotalSegmentsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbTotalSegmentsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.total_segments")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsEcsClusterArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.cluster.arn",
	Title:        "The type of `aws.ecs.cluster.arn` is string",
	Check:        checkTypeAwsEcsClusterArnv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsClusterArnv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.cluster.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsContainerArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.container.arn",
	Title:        "The type of `aws.ecs.container.arn` is string",
	Check:        checkTypeAwsEcsContainerArnv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsContainerArnv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.container.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsTaskArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.arn",
	Title:        "The type of `aws.ecs.task.arn` is string",
	Check:        checkTypeAwsEcsTaskArnv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsTaskArnv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.task.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsTaskFamilyv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.family",
	Title:        "The type of `aws.ecs.task.family` is string",
	Check:        checkTypeAwsEcsTaskFamilyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsTaskFamilyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.task.family")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsTaskRevisionv1240 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.revision",
	Title:        "The type of `aws.ecs.task.revision` is string",
	Check:        checkTypeAwsEcsTaskRevisionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsTaskRevisionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.task.revision")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEksClusterArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.eks.cluster.arn",
	Title:        "The type of `aws.eks.cluster.arn` is string",
	Check:        checkTypeAwsEksClusterArnv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEksClusterArnv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.eks.cluster.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsLambdaInvokedArnv1240 = &rule.AttributeRule{
	Name:         "type.aws.lambda.invoked_arn",
	Title:        "The type of `aws.lambda.invoked_arn` is string",
	Check:        checkTypeAwsLambdaInvokedArnv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLambdaInvokedArnv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.lambda.invoked_arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsLogGroupArnsv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.group.arns",
	Title:        "The type of `aws.log.group.arns` is string[]",
	Check:        checkTypeAwsLogGroupArnsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogGroupArnsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.group.arns")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsLogGroupNamesv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.group.names",
	Title:        "The type of `aws.log.group.names` is string[]",
	Check:        checkTypeAwsLogGroupNamesv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogGroupNamesv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.group.names")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsLogStreamArnsv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.arns",
	Title:        "The type of `aws.log.stream.arns` is string[]",
	Check:        checkTypeAwsLogStreamArnsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogStreamArnsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.stream.arns")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsLogStreamNamesv1240 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.names",
	Title:        "The type of `aws.log.stream.names` is string[]",
	Check:        checkTypeAwsLogStreamNamesv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogStreamNamesv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.stream.names")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsRequestIdv1240 = &rule.AttributeRule{
	Name:         "type.aws.request_id",
	Title:        "The type of `aws.request_id` is string",
	Check:        checkTypeAwsRequestIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsRequestIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.request_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3Bucketv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.bucket",
	Title:        "The type of `aws.s3.bucket` is string",
	Check:        checkTypeAwsS3Bucketv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3Bucketv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.bucket")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3CopySourcev1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.copy_source",
	Title:        "The type of `aws.s3.copy_source` is string",
	Check:        checkTypeAwsS3CopySourcev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3CopySourcev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.copy_source")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3Deletev1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.delete",
	Title:        "The type of `aws.s3.delete` is string",
	Check:        checkTypeAwsS3Deletev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3Deletev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.delete")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3Keyv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.key",
	Title:        "The type of `aws.s3.key` is string",
	Check:        checkTypeAwsS3Keyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3Keyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3PartNumberv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.part_number",
	Title:        "The type of `aws.s3.part_number` is int",
	Check:        checkTypeAwsS3PartNumberv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3PartNumberv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.part_number")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsS3UploadIdv1240 = &rule.AttributeRule{
	Name:         "type.aws.s3.upload_id",
	Title:        "The type of `aws.s3.upload_id` is string",
	Check:        checkTypeAwsS3UploadIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3UploadIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.upload_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeBrowserBrandsv1240 = &rule.AttributeRule{
	Name:         "type.browser.brands",
	Title:        "The type of `browser.brands` is string[]",
	Check:        checkTypeBrowserBrandsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserBrandsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.brands")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeBrowserLanguagev1240 = &rule.AttributeRule{
	Name:         "type.browser.language",
	Title:        "The type of `browser.language` is string",
	Check:        checkTypeBrowserLanguagev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserLanguagev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.language")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeBrowserMobilev1240 = &rule.AttributeRule{
	Name:         "type.browser.mobile",
	Title:        "The type of `browser.mobile` is boolean",
	Check:        checkTypeBrowserMobilev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserMobilev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.mobile")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeBrowserPlatformv1240 = &rule.AttributeRule{
	Name:         "type.browser.platform",
	Title:        "The type of `browser.platform` is string",
	Check:        checkTypeBrowserPlatformv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserPlatformv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.platform")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeClientAddressv1240 = &rule.AttributeRule{
	Name:         "type.client.address",
	Title:        "The type of `client.address` is string",
	Check:        checkTypeClientAddressv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeClientAddressv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("client.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeClientPortv1240 = &rule.AttributeRule{
	Name:         "type.client.port",
	Title:        "The type of `client.port` is int",
	Check:        checkTypeClientPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeClientPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("client.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeCloudAccountIdv1240 = &rule.AttributeRule{
	Name:         "type.cloud.account.id",
	Title:        "The type of `cloud.account.id` is string",
	Check:        checkTypeCloudAccountIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudAccountIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.account.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudAvailabilityZonev1240 = &rule.AttributeRule{
	Name:         "type.cloud.availability_zone",
	Title:        "The type of `cloud.availability_zone` is string",
	Check:        checkTypeCloudAvailabilityZonev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudAvailabilityZonev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.availability_zone")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudRegionv1240 = &rule.AttributeRule{
	Name:         "type.cloud.region",
	Title:        "The type of `cloud.region` is string",
	Check:        checkTypeCloudRegionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudRegionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.region")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudResourceIdv1240 = &rule.AttributeRule{
	Name:         "type.cloud.resource_id",
	Title:        "The type of `cloud.resource_id` is string",
	Check:        checkTypeCloudResourceIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudResourceIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.resource_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventIdv1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_id",
	Title:        "The type of `cloudevents.event_id` is string",
	Check:        checkTypeCloudeventsEventIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventSourcev1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_source",
	Title:        "The type of `cloudevents.event_source` is string",
	Check:        checkTypeCloudeventsEventSourcev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventSourcev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_source")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventSpecVersionv1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_spec_version",
	Title:        "The type of `cloudevents.event_spec_version` is string",
	Check:        checkTypeCloudeventsEventSpecVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventSpecVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_spec_version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventSubjectv1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_subject",
	Title:        "The type of `cloudevents.event_subject` is string",
	Check:        checkTypeCloudeventsEventSubjectv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventSubjectv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_subject")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventTypev1240 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_type",
	Title:        "The type of `cloudevents.event_type` is string",
	Check:        checkTypeCloudeventsEventTypev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventTypev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeColumnv1240 = &rule.AttributeRule{
	Name:         "type.code.column",
	Title:        "The type of `code.column` is int",
	Check:        checkTypeCodeColumnv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeColumnv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.column")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeCodeFilepathv1240 = &rule.AttributeRule{
	Name:         "type.code.filepath",
	Title:        "The type of `code.filepath` is string",
	Check:        checkTypeCodeFilepathv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeFilepathv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.filepath")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeFunctionv1240 = &rule.AttributeRule{
	Name:         "type.code.function",
	Title:        "The type of `code.function` is string",
	Check:        checkTypeCodeFunctionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeFunctionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.function")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeLinenov1240 = &rule.AttributeRule{
	Name:         "type.code.lineno",
	Title:        "The type of `code.lineno` is int",
	Check:        checkTypeCodeLinenov1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeLinenov1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.lineno")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeCodeNamespacev1240 = &rule.AttributeRule{
	Name:         "type.code.namespace",
	Title:        "The type of `code.namespace` is string",
	Check:        checkTypeCodeNamespacev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeNamespacev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.namespace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeStacktracev1240 = &rule.AttributeRule{
	Name:         "type.code.stacktrace",
	Title:        "The type of `code.stacktrace` is string",
	Check:        checkTypeCodeStacktracev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeStacktracev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.stacktrace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerCommandv1240 = &rule.AttributeRule{
	Name:         "type.container.command",
	Title:        "The type of `container.command` is string",
	Check:        checkTypeContainerCommandv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerCommandv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.command")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerCommandArgsv1240 = &rule.AttributeRule{
	Name:         "type.container.command_args",
	Title:        "The type of `container.command_args` is string[]",
	Check:        checkTypeContainerCommandArgsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerCommandArgsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.command_args")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeContainerCommandLinev1240 = &rule.AttributeRule{
	Name:         "type.container.command_line",
	Title:        "The type of `container.command_line` is string",
	Check:        checkTypeContainerCommandLinev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerCommandLinev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.command_line")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerIdv1240 = &rule.AttributeRule{
	Name:         "type.container.id",
	Title:        "The type of `container.id` is string",
	Check:        checkTypeContainerIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerImageIdv1240 = &rule.AttributeRule{
	Name:         "type.container.image.id",
	Title:        "The type of `container.image.id` is string",
	Check:        checkTypeContainerImageIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerImageNamev1240 = &rule.AttributeRule{
	Name:         "type.container.image.name",
	Title:        "The type of `container.image.name` is string",
	Check:        checkTypeContainerImageNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerImageRepoDigestsv1240 = &rule.AttributeRule{
	Name:         "type.container.image.repo_digests",
	Title:        "The type of `container.image.repo_digests` is string[]",
	Check:        checkTypeContainerImageRepoDigestsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageRepoDigestsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.repo_digests")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeContainerImageTagsv1240 = &rule.AttributeRule{
	Name:         "type.container.image.tags",
	Title:        "The type of `container.image.tags` is string[]",
	Check:        checkTypeContainerImageTagsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageTagsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.tags")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeContainerNamev1240 = &rule.AttributeRule{
	Name:         "type.container.name",
	Title:        "The type of `container.name` is string",
	Check:        checkTypeContainerNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerRuntimev1240 = &rule.AttributeRule{
	Name:         "type.container.runtime",
	Title:        "The type of `container.runtime` is string",
	Check:        checkTypeContainerRuntimev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerRuntimev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.runtime")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCassandraCoordinatorDcv1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.dc",
	Title:        "The type of `db.cassandra.coordinator.dc` is string",
	Check:        checkTypeDbCassandraCoordinatorDcv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraCoordinatorDcv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.coordinator.dc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCassandraCoordinatorIdv1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.id",
	Title:        "The type of `db.cassandra.coordinator.id` is string",
	Check:        checkTypeDbCassandraCoordinatorIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraCoordinatorIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.coordinator.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCassandraIdempotencev1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.idempotence",
	Title:        "The type of `db.cassandra.idempotence` is boolean",
	Check:        checkTypeDbCassandraIdempotencev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraIdempotencev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.idempotence")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeDbCassandraPageSizev1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.page_size",
	Title:        "The type of `db.cassandra.page_size` is int",
	Check:        checkTypeDbCassandraPageSizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraPageSizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.page_size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCassandraSpeculativeExecutionCountv1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.speculative_execution_count",
	Title:        "The type of `db.cassandra.speculative_execution_count` is int",
	Check:        checkTypeDbCassandraSpeculativeExecutionCountv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraSpeculativeExecutionCountv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.speculative_execution_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCassandraTablev1240 = &rule.AttributeRule{
	Name:         "type.db.cassandra.table",
	Title:        "The type of `db.cassandra.table` is string",
	Check:        checkTypeDbCassandraTablev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraTablev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.table")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbConnectionStringv1240 = &rule.AttributeRule{
	Name:         "type.db.connection_string",
	Title:        "The type of `db.connection_string` is string",
	Check:        checkTypeDbConnectionStringv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbConnectionStringv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.connection_string")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCosmosdbClientIdv1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.client_id",
	Title:        "The type of `db.cosmosdb.client_id` is string",
	Check:        checkTypeDbCosmosdbClientIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbClientIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.client_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCosmosdbContainerv1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.container",
	Title:        "The type of `db.cosmosdb.container` is string",
	Check:        checkTypeDbCosmosdbContainerv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbContainerv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.container")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCosmosdbRequestChargev1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_charge",
	Title:        "The type of `db.cosmosdb.request_charge` is double",
	Check:        checkTypeDbCosmosdbRequestChargev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbRequestChargev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.request_charge")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeDouble
}

var ruleTypeDbCosmosdbRequestContentLengthv1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_content_length",
	Title:        "The type of `db.cosmosdb.request_content_length` is int",
	Check:        checkTypeDbCosmosdbRequestContentLengthv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbRequestContentLengthv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.request_content_length")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCosmosdbStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.status_code",
	Title:        "The type of `db.cosmosdb.status_code` is int",
	Check:        checkTypeDbCosmosdbStatusCodev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbStatusCodev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCosmosdbSubStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.sub_status_code",
	Title:        "The type of `db.cosmosdb.sub_status_code` is int",
	Check:        checkTypeDbCosmosdbSubStatusCodev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbSubStatusCodev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.sub_status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbElasticsearchClusterNamev1240 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.cluster.name",
	Title:        "The type of `db.elasticsearch.cluster.name` is string",
	Check:        checkTypeDbElasticsearchClusterNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbElasticsearchClusterNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.elasticsearch.cluster.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbElasticsearchNodeNamev1240 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.node.name",
	Title:        "The type of `db.elasticsearch.node.name` is string",
	Check:        checkTypeDbElasticsearchNodeNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbElasticsearchNodeNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.elasticsearch.node.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbInstanceIdv1240 = &rule.AttributeRule{
	Name:         "type.db.instance.id",
	Title:        "The type of `db.instance.id` is string",
	Check:        checkTypeDbInstanceIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbInstanceIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.instance.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbJdbcDriverClassnamev1240 = &rule.AttributeRule{
	Name:         "type.db.jdbc.driver_classname",
	Title:        "The type of `db.jdbc.driver_classname` is string",
	Check:        checkTypeDbJdbcDriverClassnamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbJdbcDriverClassnamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.jdbc.driver_classname")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbMongodbCollectionv1240 = &rule.AttributeRule{
	Name:         "type.db.mongodb.collection",
	Title:        "The type of `db.mongodb.collection` is string",
	Check:        checkTypeDbMongodbCollectionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbMongodbCollectionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.mongodb.collection")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbMssqlInstanceNamev1240 = &rule.AttributeRule{
	Name:         "type.db.mssql.instance_name",
	Title:        "The type of `db.mssql.instance_name` is string",
	Check:        checkTypeDbMssqlInstanceNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbMssqlInstanceNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.mssql.instance_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbNamev1240 = &rule.AttributeRule{
	Name:         "type.db.name",
	Title:        "The type of `db.name` is string",
	Check:        checkTypeDbNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbOperationv1240 = &rule.AttributeRule{
	Name:         "type.db.operation",
	Title:        "The type of `db.operation` is string",
	Check:        checkTypeDbOperationv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbOperationv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.operation")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbRedisDatabaseIndexv1240 = &rule.AttributeRule{
	Name:         "type.db.redis.database_index",
	Title:        "The type of `db.redis.database_index` is int",
	Check:        checkTypeDbRedisDatabaseIndexv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbRedisDatabaseIndexv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.redis.database_index")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbSqlTablev1240 = &rule.AttributeRule{
	Name:         "type.db.sql.table",
	Title:        "The type of `db.sql.table` is string",
	Check:        checkTypeDbSqlTablev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbSqlTablev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.sql.table")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbStatementv1240 = &rule.AttributeRule{
	Name:         "type.db.statement",
	Title:        "The type of `db.statement` is string",
	Check:        checkTypeDbStatementv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbStatementv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.statement")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbUserv1240 = &rule.AttributeRule{
	Name:         "type.db.user",
	Title:        "The type of `db.user` is string",
	Check:        checkTypeDbUserv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbUserv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.user")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeploymentEnvironmentv1240 = &rule.AttributeRule{
	Name:         "type.deployment.environment",
	Title:        "The type of `deployment.environment` is string",
	Check:        checkTypeDeploymentEnvironmentv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeploymentEnvironmentv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("deployment.environment")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDestinationAddressv1240 = &rule.AttributeRule{
	Name:         "type.destination.address",
	Title:        "The type of `destination.address` is string",
	Check:        checkTypeDestinationAddressv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDestinationAddressv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("destination.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDestinationPortv1240 = &rule.AttributeRule{
	Name:         "type.destination.port",
	Title:        "The type of `destination.port` is int",
	Check:        checkTypeDestinationPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDestinationPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("destination.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDeviceIdv1240 = &rule.AttributeRule{
	Name:         "type.device.id",
	Title:        "The type of `device.id` is string",
	Check:        checkTypeDeviceIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeviceManufacturerv1240 = &rule.AttributeRule{
	Name:         "type.device.manufacturer",
	Title:        "The type of `device.manufacturer` is string",
	Check:        checkTypeDeviceManufacturerv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceManufacturerv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.manufacturer")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeviceModelIdentifierv1240 = &rule.AttributeRule{
	Name:         "type.device.model.identifier",
	Title:        "The type of `device.model.identifier` is string",
	Check:        checkTypeDeviceModelIdentifierv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceModelIdentifierv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.model.identifier")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeviceModelNamev1240 = &rule.AttributeRule{
	Name:         "type.device.model.name",
	Title:        "The type of `device.model.name` is string",
	Check:        checkTypeDeviceModelNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceModelNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.model.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDnsQuestionNamev1240 = &rule.AttributeRule{
	Name:         "type.dns.question.name",
	Title:        "The type of `dns.question.name` is string",
	Check:        checkTypeDnsQuestionNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDnsQuestionNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("dns.question.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEnduserIdv1240 = &rule.AttributeRule{
	Name:         "type.enduser.id",
	Title:        "The type of `enduser.id` is string",
	Check:        checkTypeEnduserIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEnduserIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("enduser.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEnduserRolev1240 = &rule.AttributeRule{
	Name:         "type.enduser.role",
	Title:        "The type of `enduser.role` is string",
	Check:        checkTypeEnduserRolev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEnduserRolev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("enduser.role")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEnduserScopev1240 = &rule.AttributeRule{
	Name:         "type.enduser.scope",
	Title:        "The type of `enduser.scope` is string",
	Check:        checkTypeEnduserScopev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEnduserScopev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("enduser.scope")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEventNamev1240 = &rule.AttributeRule{
	Name:         "type.event.name",
	Title:        "The type of `event.name` is string",
	Check:        checkTypeEventNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEventNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("event.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeExceptionEscapedv1240 = &rule.AttributeRule{
	Name:         "type.exception.escaped",
	Title:        "The type of `exception.escaped` is boolean",
	Check:        checkTypeExceptionEscapedv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeExceptionEscapedv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.escaped")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeExceptionMessagev1240 = &rule.AttributeRule{
	Name:         "type.exception.message",
	Title:        "The type of `exception.message` is string",
	Check:        checkTypeExceptionMessagev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeExceptionMessagev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.message")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeExceptionStacktracev1240 = &rule.AttributeRule{
	Name:         "type.exception.stacktrace",
	Title:        "The type of `exception.stacktrace` is string",
	Check:        checkTypeExceptionStacktracev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeExceptionStacktracev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.stacktrace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeExceptionTypev1240 = &rule.AttributeRule{
	Name:         "type.exception.type",
	Title:        "The type of `exception.type` is string",
	Check:        checkTypeExceptionTypev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeExceptionTypev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasColdstartv1240 = &rule.AttributeRule{
	Name:         "type.faas.coldstart",
	Title:        "The type of `faas.coldstart` is boolean",
	Check:        checkTypeFaasColdstartv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasColdstartv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.coldstart")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeFaasCronv1240 = &rule.AttributeRule{
	Name:         "type.faas.cron",
	Title:        "The type of `faas.cron` is string",
	Check:        checkTypeFaasCronv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasCronv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.cron")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasDocumentCollectionv1240 = &rule.AttributeRule{
	Name:         "type.faas.document.collection",
	Title:        "The type of `faas.document.collection` is string",
	Check:        checkTypeFaasDocumentCollectionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasDocumentCollectionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.document.collection")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasDocumentNamev1240 = &rule.AttributeRule{
	Name:         "type.faas.document.name",
	Title:        "The type of `faas.document.name` is string",
	Check:        checkTypeFaasDocumentNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasDocumentNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.document.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasDocumentTimev1240 = &rule.AttributeRule{
	Name:         "type.faas.document.time",
	Title:        "The type of `faas.document.time` is string",
	Check:        checkTypeFaasDocumentTimev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasDocumentTimev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.document.time")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInstancev1240 = &rule.AttributeRule{
	Name:         "type.faas.instance",
	Title:        "The type of `faas.instance` is string",
	Check:        checkTypeFaasInstancev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInstancev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.instance")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInvocationIdv1240 = &rule.AttributeRule{
	Name:         "type.faas.invocation_id",
	Title:        "The type of `faas.invocation_id` is string",
	Check:        checkTypeFaasInvocationIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInvocationIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.invocation_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInvokedNamev1240 = &rule.AttributeRule{
	Name:         "type.faas.invoked_name",
	Title:        "The type of `faas.invoked_name` is string",
	Check:        checkTypeFaasInvokedNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInvokedNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.invoked_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInvokedRegionv1240 = &rule.AttributeRule{
	Name:         "type.faas.invoked_region",
	Title:        "The type of `faas.invoked_region` is string",
	Check:        checkTypeFaasInvokedRegionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInvokedRegionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.invoked_region")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasMaxMemoryv1240 = &rule.AttributeRule{
	Name:         "type.faas.max_memory",
	Title:        "The type of `faas.max_memory` is int",
	Check:        checkTypeFaasMaxMemoryv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasMaxMemoryv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.max_memory")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeFaasNamev1240 = &rule.AttributeRule{
	Name:         "type.faas.name",
	Title:        "The type of `faas.name` is string",
	Check:        checkTypeFaasNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasTimev1240 = &rule.AttributeRule{
	Name:         "type.faas.time",
	Title:        "The type of `faas.time` is string",
	Check:        checkTypeFaasTimev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasTimev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.time")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasVersionv1240 = &rule.AttributeRule{
	Name:         "type.faas.version",
	Title:        "The type of `faas.version` is string",
	Check:        checkTypeFaasVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFeatureFlagKeyv1240 = &rule.AttributeRule{
	Name:         "type.feature_flag.key",
	Title:        "The type of `feature_flag.key` is string",
	Check:        checkTypeFeatureFlagKeyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFeatureFlagKeyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("feature_flag.key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFeatureFlagProviderNamev1240 = &rule.AttributeRule{
	Name:         "type.feature_flag.provider_name",
	Title:        "The type of `feature_flag.provider_name` is string",
	Check:        checkTypeFeatureFlagProviderNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFeatureFlagProviderNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("feature_flag.provider_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFeatureFlagVariantv1240 = &rule.AttributeRule{
	Name:         "type.feature_flag.variant",
	Title:        "The type of `feature_flag.variant` is string",
	Check:        checkTypeFeatureFlagVariantv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFeatureFlagVariantv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("feature_flag.variant")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGcpCloudRunJobExecutionv1240 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.execution",
	Title:        "The type of `gcp.cloud_run.job.execution` is string",
	Check:        checkTypeGcpCloudRunJobExecutionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpCloudRunJobExecutionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.cloud_run.job.execution")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGcpCloudRunJobTaskIndexv1240 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.task_index",
	Title:        "The type of `gcp.cloud_run.job.task_index` is int",
	Check:        checkTypeGcpCloudRunJobTaskIndexv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpCloudRunJobTaskIndexv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.cloud_run.job.task_index")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeGcpGceInstanceHostnamev1240 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.hostname",
	Title:        "The type of `gcp.gce.instance.hostname` is string",
	Check:        checkTypeGcpGceInstanceHostnamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpGceInstanceHostnamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.gce.instance.hostname")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGcpGceInstanceNamev1240 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.name",
	Title:        "The type of `gcp.gce.instance.name` is string",
	Check:        checkTypeGcpGceInstanceNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpGceInstanceNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.gce.instance.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGraphqlDocumentv1240 = &rule.AttributeRule{
	Name:         "type.graphql.document",
	Title:        "The type of `graphql.document` is string",
	Check:        checkTypeGraphqlDocumentv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGraphqlDocumentv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("graphql.document")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGraphqlOperationNamev1240 = &rule.AttributeRule{
	Name:         "type.graphql.operation.name",
	Title:        "The type of `graphql.operation.name` is string",
	Check:        checkTypeGraphqlOperationNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGraphqlOperationNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("graphql.operation.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHerokuAppIdv1240 = &rule.AttributeRule{
	Name:         "type.heroku.app.id",
	Title:        "The type of `heroku.app.id` is string",
	Check:        checkTypeHerokuAppIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHerokuAppIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("heroku.app.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHerokuReleaseCommitv1240 = &rule.AttributeRule{
	Name:         "type.heroku.release.commit",
	Title:        "The type of `heroku.release.commit` is string",
	Check:        checkTypeHerokuReleaseCommitv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHerokuReleaseCommitv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("heroku.release.commit")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHerokuReleaseCreationTimestampv1240 = &rule.AttributeRule{
	Name:         "type.heroku.release.creation_timestamp",
	Title:        "The type of `heroku.release.creation_timestamp` is string",
	Check:        checkTypeHerokuReleaseCreationTimestampv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHerokuReleaseCreationTimestampv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("heroku.release.creation_timestamp")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuCacheL2Sizev1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.cache.l2.size",
	Title:        "The type of `host.cpu.cache.l2.size` is int",
	Check:        checkTypeHostCpuCacheL2Sizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuCacheL2Sizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.cache.l2.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHostCpuFamilyv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.family",
	Title:        "The type of `host.cpu.family` is string",
	Check:        checkTypeHostCpuFamilyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuFamilyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.family")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuModelIdv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.id",
	Title:        "The type of `host.cpu.model.id` is string",
	Check:        checkTypeHostCpuModelIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuModelIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.model.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuModelNamev1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.name",
	Title:        "The type of `host.cpu.model.name` is string",
	Check:        checkTypeHostCpuModelNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuModelNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.model.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuSteppingv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.stepping",
	Title:        "The type of `host.cpu.stepping` is int",
	Check:        checkTypeHostCpuSteppingv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuSteppingv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.stepping")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHostCpuVendorIdv1240 = &rule.AttributeRule{
	Name:         "type.host.cpu.vendor.id",
	Title:        "The type of `host.cpu.vendor.id` is string",
	Check:        checkTypeHostCpuVendorIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuVendorIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.vendor.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostIdv1240 = &rule.AttributeRule{
	Name:         "type.host.id",
	Title:        "The type of `host.id` is string",
	Check:        checkTypeHostIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostImageIdv1240 = &rule.AttributeRule{
	Name:         "type.host.image.id",
	Title:        "The type of `host.image.id` is string",
	Check:        checkTypeHostImageIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostImageIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.image.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostImageNamev1240 = &rule.AttributeRule{
	Name:         "type.host.image.name",
	Title:        "The type of `host.image.name` is string",
	Check:        checkTypeHostImageNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostImageNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.image.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostImageVersionv1240 = &rule.AttributeRule{
	Name:         "type.host.image.version",
	Title:        "The type of `host.image.version` is string",
	Check:        checkTypeHostImageVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostImageVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.image.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostIpv1240 = &rule.AttributeRule{
	Name:         "type.host.ip",
	Title:        "The type of `host.ip` is string[]",
	Check:        checkTypeHostIpv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostIpv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.ip")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeHostMacv1240 = &rule.AttributeRule{
	Name:         "type.host.mac",
	Title:        "The type of `host.mac` is string[]",
	Check:        checkTypeHostMacv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostMacv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.mac")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeHostNamev1240 = &rule.AttributeRule{
	Name:         "type.host.name",
	Title:        "The type of `host.name` is string",
	Check:        checkTypeHostNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostTypev1240 = &rule.AttributeRule{
	Name:         "type.host.type",
	Title:        "The type of `host.type` is string",
	Check:        checkTypeHostTypev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostTypev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpMethodv1240 = &rule.AttributeRule{
	Name:         "type.http.method",
	Title:        "The type of `http.method` is string",
	Check:        checkTypeHttpMethodv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpMethodv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.method")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpRequestBodySizev1240 = &rule.AttributeRule{
	Name:         "type.http.request.body.size",
	Title:        "The type of `http.request.body.size` is int",
	Check:        checkTypeHttpRequestBodySizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpRequestBodySizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request.body.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpRequestMethodOriginalv1240 = &rule.AttributeRule{
	Name:         "type.http.request.method_original",
	Title:        "The type of `http.request.method_original` is string",
	Check:        checkTypeHttpRequestMethodOriginalv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpRequestMethodOriginalv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request.method_original")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpRequestResendCountv1240 = &rule.AttributeRule{
	Name:         "type.http.request.resend_count",
	Title:        "The type of `http.request.resend_count` is int",
	Check:        checkTypeHttpRequestResendCountv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpRequestResendCountv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request.resend_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpRequestContentLengthv1240 = &rule.AttributeRule{
	Name:         "type.http.request_content_length",
	Title:        "The type of `http.request_content_length` is int",
	Check:        checkTypeHttpRequestContentLengthv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpRequestContentLengthv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request_content_length")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpResponseBodySizev1240 = &rule.AttributeRule{
	Name:         "type.http.response.body.size",
	Title:        "The type of `http.response.body.size` is int",
	Check:        checkTypeHttpResponseBodySizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpResponseBodySizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.response.body.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpResponseStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.http.response.status_code",
	Title:        "The type of `http.response.status_code` is int",
	Check:        checkTypeHttpResponseStatusCodev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpResponseStatusCodev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.response.status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpResponseContentLengthv1240 = &rule.AttributeRule{
	Name:         "type.http.response_content_length",
	Title:        "The type of `http.response_content_length` is int",
	Check:        checkTypeHttpResponseContentLengthv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpResponseContentLengthv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.response_content_length")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpRoutev1240 = &rule.AttributeRule{
	Name:         "type.http.route",
	Title:        "The type of `http.route` is string",
	Check:        checkTypeHttpRoutev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpRoutev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.route")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpSchemev1240 = &rule.AttributeRule{
	Name:         "type.http.scheme",
	Title:        "The type of `http.scheme` is string",
	Check:        checkTypeHttpSchemev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpSchemev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.scheme")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpStatusCodev1240 = &rule.AttributeRule{
	Name:         "type.http.status_code",
	Title:        "The type of `http.status_code` is int",
	Check:        checkTypeHttpStatusCodev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpStatusCodev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpTargetv1240 = &rule.AttributeRule{
	Name:         "type.http.target",
	Title:        "The type of `http.target` is string",
	Check:        checkTypeHttpTargetv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpTargetv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.target")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpUrlv1240 = &rule.AttributeRule{
	Name:         "type.http.url",
	Title:        "The type of `http.url` is string",
	Check:        checkTypeHttpUrlv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpUrlv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.url")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpUserAgentv1240 = &rule.AttributeRule{
	Name:         "type.http.user_agent",
	Title:        "The type of `http.user_agent` is string",
	Check:        checkTypeHttpUserAgentv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpUserAgentv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.user_agent")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmBufferPoolNamev1240 = &rule.AttributeRule{
	Name:         "type.jvm.buffer.pool.name",
	Title:        "The type of `jvm.buffer.pool.name` is string",
	Check:        checkTypeJvmBufferPoolNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeJvmBufferPoolNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.buffer.pool.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmGcActionv1240 = &rule.AttributeRule{
	Name:         "type.jvm.gc.action",
	Title:        "The type of `jvm.gc.action` is string",
	Check:        checkTypeJvmGcActionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmGcActionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.gc.action")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmGcNamev1240 = &rule.AttributeRule{
	Name:         "type.jvm.gc.name",
	Title:        "The type of `jvm.gc.name` is string",
	Check:        checkTypeJvmGcNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmGcNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.gc.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmMemoryPoolNamev1240 = &rule.AttributeRule{
	Name:         "type.jvm.memory.pool.name",
	Title:        "The type of `jvm.memory.pool.name` is string",
	Check:        checkTypeJvmMemoryPoolNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmMemoryPoolNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.memory.pool.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmThreadDaemonv1240 = &rule.AttributeRule{
	Name:         "type.jvm.thread.daemon",
	Title:        "The type of `jvm.thread.daemon` is boolean",
	Check:        checkTypeJvmThreadDaemonv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmThreadDaemonv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.thread.daemon")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeK8SClusterNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.name",
	Title:        "The type of `k8s.cluster.name` is string",
	Check:        checkTypeK8SClusterNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SClusterNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cluster.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SClusterUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.uid",
	Title:        "The type of `k8s.cluster.uid` is string",
	Check:        checkTypeK8SClusterUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SClusterUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cluster.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SContainerNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.container.name",
	Title:        "The type of `k8s.container.name` is string",
	Check:        checkTypeK8SContainerNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SContainerNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.container.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SContainerRestartCountv1240 = &rule.AttributeRule{
	Name:         "type.k8s.container.restart_count",
	Title:        "The type of `k8s.container.restart_count` is int",
	Check:        checkTypeK8SContainerRestartCountv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SContainerRestartCountv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.container.restart_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeK8SCronjobNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.name",
	Title:        "The type of `k8s.cronjob.name` is string",
	Check:        checkTypeK8SCronjobNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SCronjobNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cronjob.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SCronjobUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.uid",
	Title:        "The type of `k8s.cronjob.uid` is string",
	Check:        checkTypeK8SCronjobUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SCronjobUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cronjob.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDaemonsetNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.name",
	Title:        "The type of `k8s.daemonset.name` is string",
	Check:        checkTypeK8SDaemonsetNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDaemonsetNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.daemonset.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDaemonsetUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.uid",
	Title:        "The type of `k8s.daemonset.uid` is string",
	Check:        checkTypeK8SDaemonsetUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDaemonsetUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.daemonset.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDeploymentNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.name",
	Title:        "The type of `k8s.deployment.name` is string",
	Check:        checkTypeK8SDeploymentNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDeploymentNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.deployment.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDeploymentUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.uid",
	Title:        "The type of `k8s.deployment.uid` is string",
	Check:        checkTypeK8SDeploymentUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDeploymentUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.deployment.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SJobNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.job.name",
	Title:        "The type of `k8s.job.name` is string",
	Check:        checkTypeK8SJobNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SJobNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.job.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SJobUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.job.uid",
	Title:        "The type of `k8s.job.uid` is string",
	Check:        checkTypeK8SJobUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SJobUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.job.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SNamespaceNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.namespace.name",
	Title:        "The type of `k8s.namespace.name` is string",
	Check:        checkTypeK8SNamespaceNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SNamespaceNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.namespace.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SNodeNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.node.name",
	Title:        "The type of `k8s.node.name` is string",
	Check:        checkTypeK8SNodeNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SNodeNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.node.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SNodeUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.node.uid",
	Title:        "The type of `k8s.node.uid` is string",
	Check:        checkTypeK8SNodeUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SNodeUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.node.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SPodNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.pod.name",
	Title:        "The type of `k8s.pod.name` is string",
	Check:        checkTypeK8SPodNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SPodNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.pod.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SPodUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.pod.uid",
	Title:        "The type of `k8s.pod.uid` is string",
	Check:        checkTypeK8SPodUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SPodUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.pod.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SReplicasetNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.name",
	Title:        "The type of `k8s.replicaset.name` is string",
	Check:        checkTypeK8SReplicasetNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SReplicasetNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.replicaset.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SReplicasetUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.uid",
	Title:        "The type of `k8s.replicaset.uid` is string",
	Check:        checkTypeK8SReplicasetUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SReplicasetUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.replicaset.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SStatefulsetNamev1240 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.name",
	Title:        "The type of `k8s.statefulset.name` is string",
	Check:        checkTypeK8SStatefulsetNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SStatefulsetNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.statefulset.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SStatefulsetUidv1240 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.uid",
	Title:        "The type of `k8s.statefulset.uid` is string",
	Check:        checkTypeK8SStatefulsetUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SStatefulsetUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.statefulset.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFileNamev1240 = &rule.AttributeRule{
	Name:         "type.log.file.name",
	Title:        "The type of `log.file.name` is string",
	Check:        checkTypeLogFileNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFileNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFileNameResolvedv1240 = &rule.AttributeRule{
	Name:         "type.log.file.name_resolved",
	Title:        "The type of `log.file.name_resolved` is string",
	Check:        checkTypeLogFileNameResolvedv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFileNameResolvedv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.name_resolved")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFilePathv1240 = &rule.AttributeRule{
	Name:         "type.log.file.path",
	Title:        "The type of `log.file.path` is string",
	Check:        checkTypeLogFilePathv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFilePathv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.path")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFilePathResolvedv1240 = &rule.AttributeRule{
	Name:         "type.log.file.path_resolved",
	Title:        "The type of `log.file.path_resolved` is string",
	Check:        checkTypeLogFilePathResolvedv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFilePathResolvedv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.path_resolved")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogRecordUidv1240 = &rule.AttributeRule{
	Name:         "type.log.record.uid",
	Title:        "The type of `log.record.uid` is string",
	Check:        checkTypeLogRecordUidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogRecordUidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.record.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessageCompressedSizev1240 = &rule.AttributeRule{
	Name:         "type.message.compressed_size",
	Title:        "The type of `message.compressed_size` is int",
	Check:        checkTypeMessageCompressedSizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessageCompressedSizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("message.compressed_size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessageIdv1240 = &rule.AttributeRule{
	Name:         "type.message.id",
	Title:        "The type of `message.id` is int",
	Check:        checkTypeMessageIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessageIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("message.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessageUncompressedSizev1240 = &rule.AttributeRule{
	Name:         "type.message.uncompressed_size",
	Title:        "The type of `message.uncompressed_size` is int",
	Check:        checkTypeMessageUncompressedSizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessageUncompressedSizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("message.uncompressed_size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingBatchMessageCountv1240 = &rule.AttributeRule{
	Name:         "type.messaging.batch.message_count",
	Title:        "The type of `messaging.batch.message_count` is int",
	Check:        checkTypeMessagingBatchMessageCountv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingBatchMessageCountv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.batch.message_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingClient_Idv1240 = &rule.AttributeRule{
	Name:         "type.messaging.client_id",
	Title:        "The type of `messaging.client_id` is string",
	Check:        checkTypeMessagingClient_Idv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingClient_Idv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.client_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingDestinationAnonymousv1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.anonymous",
	Title:        "The type of `messaging.destination.anonymous` is boolean",
	Check:        checkTypeMessagingDestinationAnonymousv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationAnonymousv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.anonymous")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingDestinationNamev1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.name",
	Title:        "The type of `messaging.destination.name` is string",
	Check:        checkTypeMessagingDestinationNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingDestinationTemplatev1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.template",
	Title:        "The type of `messaging.destination.template` is string",
	Check:        checkTypeMessagingDestinationTemplatev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationTemplatev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.template")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingDestinationTemporaryv1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination.temporary",
	Title:        "The type of `messaging.destination.temporary` is boolean",
	Check:        checkTypeMessagingDestinationTemporaryv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationTemporaryv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.temporary")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingDestinationPublishAnonymousv1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.anonymous",
	Title:        "The type of `messaging.destination_publish.anonymous` is boolean",
	Check:        checkTypeMessagingDestinationPublishAnonymousv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationPublishAnonymousv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination_publish.anonymous")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingDestinationPublishNamev1240 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.name",
	Title:        "The type of `messaging.destination_publish.name` is string",
	Check:        checkTypeMessagingDestinationPublishNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationPublishNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination_publish.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingGcpPubsubMessageOrderingKeyv1240 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ordering_key",
	Title:        "The type of `messaging.gcp_pubsub.message.ordering_key` is string",
	Check:        checkTypeMessagingGcpPubsubMessageOrderingKeyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingGcpPubsubMessageOrderingKeyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.gcp_pubsub.message.ordering_key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingKafkaConsumerGroupv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.consumer.group",
	Title:        "The type of `messaging.kafka.consumer.group` is string",
	Check:        checkTypeMessagingKafkaConsumerGroupv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaConsumerGroupv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.consumer.group")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingKafkaDestinationPartitionv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.destination.partition",
	Title:        "The type of `messaging.kafka.destination.partition` is int",
	Check:        checkTypeMessagingKafkaDestinationPartitionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaDestinationPartitionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.destination.partition")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingKafkaMessageKeyv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.key",
	Title:        "The type of `messaging.kafka.message.key` is string",
	Check:        checkTypeMessagingKafkaMessageKeyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaMessageKeyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.message.key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingKafkaMessageOffsetv1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.offset",
	Title:        "The type of `messaging.kafka.message.offset` is int",
	Check:        checkTypeMessagingKafkaMessageOffsetv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaMessageOffsetv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.message.offset")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingKafkaMessageTombstonev1240 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.tombstone",
	Title:        "The type of `messaging.kafka.message.tombstone` is boolean",
	Check:        checkTypeMessagingKafkaMessageTombstonev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaMessageTombstonev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.message.tombstone")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingMessageBodySizev1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.body.size",
	Title:        "The type of `messaging.message.body.size` is int",
	Check:        checkTypeMessagingMessageBodySizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageBodySizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.body.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingMessageConversationIdv1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.conversation_id",
	Title:        "The type of `messaging.message.conversation_id` is string",
	Check:        checkTypeMessagingMessageConversationIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageConversationIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.conversation_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingMessageEnvelopeSizev1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.envelope.size",
	Title:        "The type of `messaging.message.envelope.size` is int",
	Check:        checkTypeMessagingMessageEnvelopeSizev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageEnvelopeSizev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.envelope.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingMessageIdv1240 = &rule.AttributeRule{
	Name:         "type.messaging.message.id",
	Title:        "The type of `messaging.message.id` is string",
	Check:        checkTypeMessagingMessageIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRabbitmqDestinationRoutingKeyv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.destination.routing_key",
	Title:        "The type of `messaging.rabbitmq.destination.routing_key` is string",
	Check:        checkTypeMessagingRabbitmqDestinationRoutingKeyv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRabbitmqDestinationRoutingKeyv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rabbitmq.destination.routing_key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRocketmqClientGroupv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.client_group",
	Title:        "The type of `messaging.rocketmq.client_group` is string",
	Check:        checkTypeMessagingRocketmqClientGroupv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqClientGroupv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.client_group")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRocketmqMessageDelayTimeLevelv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delay_time_level",
	Title:        "The type of `messaging.rocketmq.message.delay_time_level` is int",
	Check:        checkTypeMessagingRocketmqMessageDelayTimeLevelv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageDelayTimeLevelv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.delay_time_level")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingRocketmqMessageDeliveryTimestampv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delivery_timestamp",
	Title:        "The type of `messaging.rocketmq.message.delivery_timestamp` is int",
	Check:        checkTypeMessagingRocketmqMessageDeliveryTimestampv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageDeliveryTimestampv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.delivery_timestamp")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingRocketmqMessageGroupv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.group",
	Title:        "The type of `messaging.rocketmq.message.group` is string",
	Check:        checkTypeMessagingRocketmqMessageGroupv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageGroupv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.group")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRocketmqMessageKeysv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.keys",
	Title:        "The type of `messaging.rocketmq.message.keys` is string[]",
	Check:        checkTypeMessagingRocketmqMessageKeysv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageKeysv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.keys")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeMessagingRocketmqMessageTagv1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.tag",
	Title:        "The type of `messaging.rocketmq.message.tag` is string",
	Check:        checkTypeMessagingRocketmqMessageTagv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageTagv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.tag")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRocketmqNamespacev1240 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.namespace",
	Title:        "The type of `messaging.rocketmq.namespace` is string",
	Check:        checkTypeMessagingRocketmqNamespacev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqNamespacev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.namespace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetHostNamev1240 = &rule.AttributeRule{
	Name:         "type.net.host.name",
	Title:        "The type of `net.host.name` is string",
	Check:        checkTypeNetHostNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetHostNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.host.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetHostPortv1240 = &rule.AttributeRule{
	Name:         "type.net.host.port",
	Title:        "The type of `net.host.port` is int",
	Check:        checkTypeNetHostPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetHostPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.host.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetPeerNamev1240 = &rule.AttributeRule{
	Name:         "type.net.peer.name",
	Title:        "The type of `net.peer.name` is string",
	Check:        checkTypeNetPeerNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetPeerNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.peer.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetPeerPortv1240 = &rule.AttributeRule{
	Name:         "type.net.peer.port",
	Title:        "The type of `net.peer.port` is int",
	Check:        checkTypeNetPeerPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetPeerPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.peer.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetProtocolNamev1240 = &rule.AttributeRule{
	Name:         "type.net.protocol.name",
	Title:        "The type of `net.protocol.name` is string",
	Check:        checkTypeNetProtocolNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetProtocolNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.protocol.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "type.net.protocol.version",
	Title:        "The type of `net.protocol.version` is string",
	Check:        checkTypeNetProtocolVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetProtocolVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.protocol.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockHostAddrv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.host.addr",
	Title:        "The type of `net.sock.host.addr` is string",
	Check:        checkTypeNetSockHostAddrv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockHostAddrv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.host.addr")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockHostPortv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.host.port",
	Title:        "The type of `net.sock.host.port` is int",
	Check:        checkTypeNetSockHostPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockHostPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.host.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetSockPeerAddrv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.addr",
	Title:        "The type of `net.sock.peer.addr` is string",
	Check:        checkTypeNetSockPeerAddrv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockPeerAddrv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.peer.addr")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockPeerNamev1240 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.name",
	Title:        "The type of `net.sock.peer.name` is string",
	Check:        checkTypeNetSockPeerNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockPeerNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.peer.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockPeerPortv1240 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.port",
	Title:        "The type of `net.sock.peer.port` is int",
	Check:        checkTypeNetSockPeerPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockPeerPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.peer.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetworkCarrierIccv1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.icc",
	Title:        "The type of `network.carrier.icc` is string",
	Check:        checkTypeNetworkCarrierIccv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierIccv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.icc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkCarrierMccv1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.mcc",
	Title:        "The type of `network.carrier.mcc` is string",
	Check:        checkTypeNetworkCarrierMccv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierMccv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.mcc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkCarrierMncv1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.mnc",
	Title:        "The type of `network.carrier.mnc` is string",
	Check:        checkTypeNetworkCarrierMncv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierMncv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.mnc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkCarrierNamev1240 = &rule.AttributeRule{
	Name:         "type.network.carrier.name",
	Title:        "The type of `network.carrier.name` is string",
	Check:        checkTypeNetworkCarrierNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkLocalAddressv1240 = &rule.AttributeRule{
	Name:         "type.network.local.address",
	Title:        "The type of `network.local.address` is string",
	Check:        checkTypeNetworkLocalAddressv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkLocalAddressv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.local.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkLocalPortv1240 = &rule.AttributeRule{
	Name:         "type.network.local.port",
	Title:        "The type of `network.local.port` is int",
	Check:        checkTypeNetworkLocalPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkLocalPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.local.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetworkPeerAddressv1240 = &rule.AttributeRule{
	Name:         "type.network.peer.address",
	Title:        "The type of `network.peer.address` is string",
	Check:        checkTypeNetworkPeerAddressv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkPeerAddressv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.peer.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkPeerPortv1240 = &rule.AttributeRule{
	Name:         "type.network.peer.port",
	Title:        "The type of `network.peer.port` is int",
	Check:        checkTypeNetworkPeerPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkPeerPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.peer.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetworkProtocolNamev1240 = &rule.AttributeRule{
	Name:         "type.network.protocol.name",
	Title:        "The type of `network.protocol.name` is string",
	Check:        checkTypeNetworkProtocolNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkProtocolNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.protocol.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "type.network.protocol.version",
	Title:        "The type of `network.protocol.version` is string",
	Check:        checkTypeNetworkProtocolVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkProtocolVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.protocol.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOciManifestDigestv1240 = &rule.AttributeRule{
	Name:         "type.oci.manifest.digest",
	Title:        "The type of `oci.manifest.digest` is string",
	Check:        checkTypeOciManifestDigestv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOciManifestDigestv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("oci.manifest.digest")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsBuildIdv1240 = &rule.AttributeRule{
	Name:         "type.os.build_id",
	Title:        "The type of `os.build_id` is string",
	Check:        checkTypeOsBuildIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsBuildIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.build_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.os.description",
	Title:        "The type of `os.description` is string",
	Check:        checkTypeOsDescriptionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsDescriptionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsNamev1240 = &rule.AttributeRule{
	Name:         "type.os.name",
	Title:        "The type of `os.name` is string",
	Check:        checkTypeOsNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsVersionv1240 = &rule.AttributeRule{
	Name:         "type.os.version",
	Title:        "The type of `os.version` is string",
	Check:        checkTypeOsVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelLibraryNamev1240 = &rule.AttributeRule{
	Name:         "type.otel.library.name",
	Title:        "The type of `otel.library.name` is string",
	Check:        checkTypeOtelLibraryNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOtelLibraryNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.library.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelLibraryVersionv1240 = &rule.AttributeRule{
	Name:         "type.otel.library.version",
	Title:        "The type of `otel.library.version` is string",
	Check:        checkTypeOtelLibraryVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOtelLibraryVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.library.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelScopeNamev1240 = &rule.AttributeRule{
	Name:         "type.otel.scope.name",
	Title:        "The type of `otel.scope.name` is string",
	Check:        checkTypeOtelScopeNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOtelScopeNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.scope.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelScopeVersionv1240 = &rule.AttributeRule{
	Name:         "type.otel.scope.version",
	Title:        "The type of `otel.scope.version` is string",
	Check:        checkTypeOtelScopeVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOtelScopeVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.scope.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelStatusDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.otel.status_description",
	Title:        "The type of `otel.status_description` is string",
	Check:        checkTypeOtelStatusDescriptionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOtelStatusDescriptionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.status_description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypePeerServicev1240 = &rule.AttributeRule{
	Name:         "type.peer.service",
	Title:        "The type of `peer.service` is string",
	Check:        checkTypePeerServicev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypePeerServicev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("peer.service")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypePoolNamev1240 = &rule.AttributeRule{
	Name:         "type.pool.name",
	Title:        "The type of `pool.name` is string",
	Check:        checkTypePoolNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypePoolNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("pool.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessCommandv1240 = &rule.AttributeRule{
	Name:         "type.process.command",
	Title:        "The type of `process.command` is string",
	Check:        checkTypeProcessCommandv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessCommandv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.command")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessCommandArgsv1240 = &rule.AttributeRule{
	Name:         "type.process.command_args",
	Title:        "The type of `process.command_args` is string[]",
	Check:        checkTypeProcessCommandArgsv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessCommandArgsv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.command_args")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeProcessCommandLinev1240 = &rule.AttributeRule{
	Name:         "type.process.command_line",
	Title:        "The type of `process.command_line` is string",
	Check:        checkTypeProcessCommandLinev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessCommandLinev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.command_line")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessExecutableNamev1240 = &rule.AttributeRule{
	Name:         "type.process.executable.name",
	Title:        "The type of `process.executable.name` is string",
	Check:        checkTypeProcessExecutableNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessExecutableNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.executable.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessExecutablePathv1240 = &rule.AttributeRule{
	Name:         "type.process.executable.path",
	Title:        "The type of `process.executable.path` is string",
	Check:        checkTypeProcessExecutablePathv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessExecutablePathv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.executable.path")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessOwnerv1240 = &rule.AttributeRule{
	Name:         "type.process.owner",
	Title:        "The type of `process.owner` is string",
	Check:        checkTypeProcessOwnerv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessOwnerv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.owner")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessParentPidv1240 = &rule.AttributeRule{
	Name:         "type.process.parent_pid",
	Title:        "The type of `process.parent_pid` is int",
	Check:        checkTypeProcessParentPidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessParentPidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.parent_pid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeProcessPidv1240 = &rule.AttributeRule{
	Name:         "type.process.pid",
	Title:        "The type of `process.pid` is int",
	Check:        checkTypeProcessPidv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessPidv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.pid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeProcessRuntimeDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.process.runtime.description",
	Title:        "The type of `process.runtime.description` is string",
	Check:        checkTypeProcessRuntimeDescriptionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessRuntimeDescriptionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.runtime.description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessRuntimeNamev1240 = &rule.AttributeRule{
	Name:         "type.process.runtime.name",
	Title:        "The type of `process.runtime.name` is string",
	Check:        checkTypeProcessRuntimeNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessRuntimeNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.runtime.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessRuntimeVersionv1240 = &rule.AttributeRule{
	Name:         "type.process.runtime.version",
	Title:        "The type of `process.runtime.version` is string",
	Check:        checkTypeProcessRuntimeVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessRuntimeVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.runtime.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcJsonrpcErrorCodev1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_code",
	Title:        "The type of `rpc.jsonrpc.error_code` is int",
	Check:        checkTypeRpcJsonrpcErrorCodev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcErrorCodev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.error_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeRpcJsonrpcErrorMessagev1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_message",
	Title:        "The type of `rpc.jsonrpc.error_message` is string",
	Check:        checkTypeRpcJsonrpcErrorMessagev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcErrorMessagev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.error_message")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcJsonrpcRequestIdv1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.request_id",
	Title:        "The type of `rpc.jsonrpc.request_id` is string",
	Check:        checkTypeRpcJsonrpcRequestIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcRequestIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.request_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcJsonrpcVersionv1240 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.version",
	Title:        "The type of `rpc.jsonrpc.version` is string",
	Check:        checkTypeRpcJsonrpcVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcMethodv1240 = &rule.AttributeRule{
	Name:         "type.rpc.method",
	Title:        "The type of `rpc.method` is string",
	Check:        checkTypeRpcMethodv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcMethodv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.method")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcServicev1240 = &rule.AttributeRule{
	Name:         "type.rpc.service",
	Title:        "The type of `rpc.service` is string",
	Check:        checkTypeRpcServicev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcServicev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.service")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServerAddressv1240 = &rule.AttributeRule{
	Name:         "type.server.address",
	Title:        "The type of `server.address` is string",
	Check:        checkTypeServerAddressv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeServerAddressv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("server.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServerPortv1240 = &rule.AttributeRule{
	Name:         "type.server.port",
	Title:        "The type of `server.port` is int",
	Check:        checkTypeServerPortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeServerPortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("server.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeServiceInstanceIdv1240 = &rule.AttributeRule{
	Name:         "type.service.instance.id",
	Title:        "The type of `service.instance.id` is string",
	Check:        checkTypeServiceInstanceIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeServiceInstanceIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.instance.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServiceNamev1240 = &rule.AttributeRule{
	Name:         "type.service.name",
	Title:        "The type of `service.name` is string",
	Check:        checkTypeServiceNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeServiceNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServiceNamespacev1240 = &rule.AttributeRule{
	Name:         "type.service.namespace",
	Title:        "The type of `service.namespace` is string",
	Check:        checkTypeServiceNamespacev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeServiceNamespacev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.namespace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServiceVersionv1240 = &rule.AttributeRule{
	Name:         "type.service.version",
	Title:        "The type of `service.version` is string",
	Check:        checkTypeServiceVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeServiceVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSessionIdv1240 = &rule.AttributeRule{
	Name:         "type.session.id",
	Title:        "The type of `session.id` is string",
	Check:        checkTypeSessionIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSessionIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("session.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSessionPreviousIdv1240 = &rule.AttributeRule{
	Name:         "type.session.previous_id",
	Title:        "The type of `session.previous_id` is string",
	Check:        checkTypeSessionPreviousIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSessionPreviousIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("session.previous_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSourceAddressv1240 = &rule.AttributeRule{
	Name:         "type.source.address",
	Title:        "The type of `source.address` is string",
	Check:        checkTypeSourceAddressv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSourceAddressv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("source.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSourcePortv1240 = &rule.AttributeRule{
	Name:         "type.source.port",
	Title:        "The type of `source.port` is int",
	Check:        checkTypeSourcePortv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSourcePortv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("source.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeSystemCpuLogicalNumberv1240 = &rule.AttributeRule{
	Name:         "type.system.cpu.logical_number",
	Title:        "The type of `system.cpu.logical_number` is int",
	Check:        checkTypeSystemCpuLogicalNumberv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemCpuLogicalNumberv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.cpu.logical_number")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeSystemDevicev1240 = &rule.AttributeRule{
	Name:         "type.system.device",
	Title:        "The type of `system.device` is string",
	Check:        checkTypeSystemDevicev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemDevicev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.device")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSystemFilesystemModev1240 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mode",
	Title:        "The type of `system.filesystem.mode` is string",
	Check:        checkTypeSystemFilesystemModev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemFilesystemModev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.filesystem.mode")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSystemFilesystemMountpointv1240 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mountpoint",
	Title:        "The type of `system.filesystem.mountpoint` is string",
	Check:        checkTypeSystemFilesystemMountpointv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemFilesystemMountpointv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.filesystem.mountpoint")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetryDistroNamev1240 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.name",
	Title:        "The type of `telemetry.distro.name` is string",
	Check:        checkTypeTelemetryDistroNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTelemetryDistroNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.distro.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetryDistroVersionv1240 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.version",
	Title:        "The type of `telemetry.distro.version` is string",
	Check:        checkTypeTelemetryDistroVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTelemetryDistroVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.distro.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetrySdkNamev1240 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.name",
	Title:        "The type of `telemetry.sdk.name` is string",
	Check:        checkTypeTelemetrySdkNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTelemetrySdkNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.sdk.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetrySdkVersionv1240 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.version",
	Title:        "The type of `telemetry.sdk.version` is string",
	Check:        checkTypeTelemetrySdkVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTelemetrySdkVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.sdk.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeThreadIdv1240 = &rule.AttributeRule{
	Name:         "type.thread.id",
	Title:        "The type of `thread.id` is int",
	Check:        checkTypeThreadIdv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeThreadIdv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("thread.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeThreadNamev1240 = &rule.AttributeRule{
	Name:         "type.thread.name",
	Title:        "The type of `thread.name` is string",
	Check:        checkTypeThreadNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeThreadNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("thread.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsCipherv1240 = &rule.AttributeRule{
	Name:         "type.tls.cipher",
	Title:        "The type of `tls.cipher` is string",
	Check:        checkTypeTlsCipherv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsCipherv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.cipher")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientCertificatev1240 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate",
	Title:        "The type of `tls.client.certificate` is string",
	Check:        checkTypeTlsClientCertificatev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientCertificatev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.certificate")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientCertificateChainv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate_chain",
	Title:        "The type of `tls.client.certificate_chain` is string[]",
	Check:        checkTypeTlsClientCertificateChainv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientCertificateChainv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.certificate_chain")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeTlsClientHashMd5v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.md5",
	Title:        "The type of `tls.client.hash.md5` is string",
	Check:        checkTypeTlsClientHashMd5v1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientHashMd5v1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.hash.md5")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientHashSha1v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha1",
	Title:        "The type of `tls.client.hash.sha1` is string",
	Check:        checkTypeTlsClientHashSha1v1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientHashSha1v1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.hash.sha1")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientHashSha256v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha256",
	Title:        "The type of `tls.client.hash.sha256` is string",
	Check:        checkTypeTlsClientHashSha256v1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientHashSha256v1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.hash.sha256")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientIssuerv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.issuer",
	Title:        "The type of `tls.client.issuer` is string",
	Check:        checkTypeTlsClientIssuerv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientIssuerv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.issuer")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientJa3v1240 = &rule.AttributeRule{
	Name:         "type.tls.client.ja3",
	Title:        "The type of `tls.client.ja3` is string",
	Check:        checkTypeTlsClientJa3v1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientJa3v1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.ja3")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientNotAfterv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.not_after",
	Title:        "The type of `tls.client.not_after` is string",
	Check:        checkTypeTlsClientNotAfterv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientNotAfterv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.not_after")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientNotBeforev1240 = &rule.AttributeRule{
	Name:         "type.tls.client.not_before",
	Title:        "The type of `tls.client.not_before` is string",
	Check:        checkTypeTlsClientNotBeforev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientNotBeforev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.not_before")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientServerNamev1240 = &rule.AttributeRule{
	Name:         "type.tls.client.server_name",
	Title:        "The type of `tls.client.server_name` is string",
	Check:        checkTypeTlsClientServerNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientServerNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.server_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientSubjectv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.subject",
	Title:        "The type of `tls.client.subject` is string",
	Check:        checkTypeTlsClientSubjectv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientSubjectv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.subject")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientSupportedCiphersv1240 = &rule.AttributeRule{
	Name:         "type.tls.client.supported_ciphers",
	Title:        "The type of `tls.client.supported_ciphers` is string[]",
	Check:        checkTypeTlsClientSupportedCiphersv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientSupportedCiphersv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.supported_ciphers")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeTlsCurvev1240 = &rule.AttributeRule{
	Name:         "type.tls.curve",
	Title:        "The type of `tls.curve` is string",
	Check:        checkTypeTlsCurvev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsCurvev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.curve")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsEstablishedv1240 = &rule.AttributeRule{
	Name:         "type.tls.established",
	Title:        "The type of `tls.established` is boolean",
	Check:        checkTypeTlsEstablishedv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsEstablishedv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.established")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeTlsNextProtocolv1240 = &rule.AttributeRule{
	Name:         "type.tls.next_protocol",
	Title:        "The type of `tls.next_protocol` is string",
	Check:        checkTypeTlsNextProtocolv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsNextProtocolv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.next_protocol")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsProtocolVersionv1240 = &rule.AttributeRule{
	Name:         "type.tls.protocol.version",
	Title:        "The type of `tls.protocol.version` is string",
	Check:        checkTypeTlsProtocolVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsProtocolVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.protocol.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsResumedv1240 = &rule.AttributeRule{
	Name:         "type.tls.resumed",
	Title:        "The type of `tls.resumed` is boolean",
	Check:        checkTypeTlsResumedv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsResumedv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.resumed")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeTlsServerCertificatev1240 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate",
	Title:        "The type of `tls.server.certificate` is string",
	Check:        checkTypeTlsServerCertificatev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerCertificatev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.certificate")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerCertificateChainv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate_chain",
	Title:        "The type of `tls.server.certificate_chain` is string[]",
	Check:        checkTypeTlsServerCertificateChainv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerCertificateChainv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.certificate_chain")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeTlsServerHashMd5v1240 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.md5",
	Title:        "The type of `tls.server.hash.md5` is string",
	Check:        checkTypeTlsServerHashMd5v1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerHashMd5v1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.hash.md5")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerHashSha1v1240 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha1",
	Title:        "The type of `tls.server.hash.sha1` is string",
	Check:        checkTypeTlsServerHashSha1v1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerHashSha1v1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.hash.sha1")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerHashSha256v1240 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha256",
	Title:        "The type of `tls.server.hash.sha256` is string",
	Check:        checkTypeTlsServerHashSha256v1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerHashSha256v1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.hash.sha256")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerIssuerv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.issuer",
	Title:        "The type of `tls.server.issuer` is string",
	Check:        checkTypeTlsServerIssuerv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerIssuerv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.issuer")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerJa3Sv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.ja3s",
	Title:        "The type of `tls.server.ja3s` is string",
	Check:        checkTypeTlsServerJa3Sv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerJa3Sv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.ja3s")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerNotAfterv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.not_after",
	Title:        "The type of `tls.server.not_after` is string",
	Check:        checkTypeTlsServerNotAfterv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerNotAfterv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.not_after")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerNotBeforev1240 = &rule.AttributeRule{
	Name:         "type.tls.server.not_before",
	Title:        "The type of `tls.server.not_before` is string",
	Check:        checkTypeTlsServerNotBeforev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerNotBeforev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.not_before")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerSubjectv1240 = &rule.AttributeRule{
	Name:         "type.tls.server.subject",
	Title:        "The type of `tls.server.subject` is string",
	Check:        checkTypeTlsServerSubjectv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerSubjectv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.subject")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlFragmentv1240 = &rule.AttributeRule{
	Name:         "type.url.fragment",
	Title:        "The type of `url.fragment` is string",
	Check:        checkTypeUrlFragmentv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlFragmentv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.fragment")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlFullv1240 = &rule.AttributeRule{
	Name:         "type.url.full",
	Title:        "The type of `url.full` is string",
	Check:        checkTypeUrlFullv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlFullv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.full")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlPathv1240 = &rule.AttributeRule{
	Name:         "type.url.path",
	Title:        "The type of `url.path` is string",
	Check:        checkTypeUrlPathv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlPathv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.path")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlQueryv1240 = &rule.AttributeRule{
	Name:         "type.url.query",
	Title:        "The type of `url.query` is string",
	Check:        checkTypeUrlQueryv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlQueryv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.query")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlSchemev1240 = &rule.AttributeRule{
	Name:         "type.url.scheme",
	Title:        "The type of `url.scheme` is string",
	Check:        checkTypeUrlSchemev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlSchemev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.scheme")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUserAgentOriginalv1240 = &rule.AttributeRule{
	Name:         "type.user_agent.original",
	Title:        "The type of `user_agent.original` is string",
	Check:        checkTypeUserAgentOriginalv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUserAgentOriginalv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("user_agent.original")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeWebengineDescriptionv1240 = &rule.AttributeRule{
	Name:         "type.webengine.description",
	Title:        "The type of `webengine.description` is string",
	Check:        checkTypeWebengineDescriptionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeWebengineDescriptionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("webengine.description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeWebengineNamev1240 = &rule.AttributeRule{
	Name:         "type.webengine.name",
	Title:        "The type of `webengine.name` is string",
	Check:        checkTypeWebengineNamev1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeWebengineNamev1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("webengine.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeWebengineVersionv1240 = &rule.AttributeRule{
	Name:         "type.webengine.version",
	Title:        "The type of `webengine.version` is string",
	Check:        checkTypeWebengineVersionv1240,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeWebengineVersionv1240(a *rule.SignalAttributes) bool {
  val, ok := a.Get("webengine.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

