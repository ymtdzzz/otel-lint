// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

var RulesTypev1250 = []*rule.AttributeRule{
	ruleTypeAndroidOsApiLevelv1250,
	ruleTypeAspnetcoreDiagnosticsHandlerTypev1250,
	ruleTypeAspnetcoreRateLimitingPolicyv1250,
	ruleTypeAspnetcoreRequestIsUnhandledv1250,
	ruleTypeAspnetcoreRoutingIsFallbackv1250,
	ruleTypeAwsDynamodbAttributeDefinitionsv1250,
	ruleTypeAwsDynamodbAttributesToGetv1250,
	ruleTypeAwsDynamodbConsistentReadv1250,
	ruleTypeAwsDynamodbConsumedCapacityv1250,
	ruleTypeAwsDynamodbCountv1250,
	ruleTypeAwsDynamodbExclusiveStartTablev1250,
	ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1250,
	ruleTypeAwsDynamodbGlobalSecondaryIndexesv1250,
	ruleTypeAwsDynamodbIndexNamev1250,
	ruleTypeAwsDynamodbItemCollectionMetricsv1250,
	ruleTypeAwsDynamodbLimitv1250,
	ruleTypeAwsDynamodbLocalSecondaryIndexesv1250,
	ruleTypeAwsDynamodbProjectionv1250,
	ruleTypeAwsDynamodbProvisionedReadCapacityv1250,
	ruleTypeAwsDynamodbProvisionedWriteCapacityv1250,
	ruleTypeAwsDynamodbScanForwardv1250,
	ruleTypeAwsDynamodbScannedCountv1250,
	ruleTypeAwsDynamodbSegmentv1250,
	ruleTypeAwsDynamodbSelectv1250,
	ruleTypeAwsDynamodbTableCountv1250,
	ruleTypeAwsDynamodbTableNamesv1250,
	ruleTypeAwsDynamodbTotalSegmentsv1250,
	ruleTypeAwsEcsClusterArnv1250,
	ruleTypeAwsEcsContainerArnv1250,
	ruleTypeAwsEcsTaskArnv1250,
	ruleTypeAwsEcsTaskFamilyv1250,
	ruleTypeAwsEcsTaskIdv1250,
	ruleTypeAwsEcsTaskRevisionv1250,
	ruleTypeAwsEksClusterArnv1250,
	ruleTypeAwsLambdaInvokedArnv1250,
	ruleTypeAwsLogGroupArnsv1250,
	ruleTypeAwsLogGroupNamesv1250,
	ruleTypeAwsLogStreamArnsv1250,
	ruleTypeAwsLogStreamNamesv1250,
	ruleTypeAwsRequestIdv1250,
	ruleTypeAwsS3Bucketv1250,
	ruleTypeAwsS3CopySourcev1250,
	ruleTypeAwsS3Deletev1250,
	ruleTypeAwsS3Keyv1250,
	ruleTypeAwsS3PartNumberv1250,
	ruleTypeAwsS3UploadIdv1250,
	ruleTypeBrowserBrandsv1250,
	ruleTypeBrowserLanguagev1250,
	ruleTypeBrowserMobilev1250,
	ruleTypeBrowserPlatformv1250,
	ruleTypeClientAddressv1250,
	ruleTypeClientPortv1250,
	ruleTypeCloudAccountIdv1250,
	ruleTypeCloudAvailabilityZonev1250,
	ruleTypeCloudRegionv1250,
	ruleTypeCloudResourceIdv1250,
	ruleTypeCloudeventsEventIdv1250,
	ruleTypeCloudeventsEventSourcev1250,
	ruleTypeCloudeventsEventSpecVersionv1250,
	ruleTypeCloudeventsEventSubjectv1250,
	ruleTypeCloudeventsEventTypev1250,
	ruleTypeCodeColumnv1250,
	ruleTypeCodeFilepathv1250,
	ruleTypeCodeFunctionv1250,
	ruleTypeCodeLinenov1250,
	ruleTypeCodeNamespacev1250,
	ruleTypeCodeStacktracev1250,
	ruleTypeContainerCommandv1250,
	ruleTypeContainerCommandArgsv1250,
	ruleTypeContainerCommandLinev1250,
	ruleTypeContainerIdv1250,
	ruleTypeContainerImageIdv1250,
	ruleTypeContainerImageNamev1250,
	ruleTypeContainerImageRepoDigestsv1250,
	ruleTypeContainerImageTagsv1250,
	ruleTypeContainerNamev1250,
	ruleTypeContainerRuntimev1250,
	ruleTypeDbCassandraCoordinatorDcv1250,
	ruleTypeDbCassandraCoordinatorIdv1250,
	ruleTypeDbCassandraIdempotencev1250,
	ruleTypeDbCassandraPageSizev1250,
	ruleTypeDbCassandraSpeculativeExecutionCountv1250,
	ruleTypeDbCassandraTablev1250,
	ruleTypeDbConnectionStringv1250,
	ruleTypeDbCosmosdbClientIdv1250,
	ruleTypeDbCosmosdbContainerv1250,
	ruleTypeDbCosmosdbRequestChargev1250,
	ruleTypeDbCosmosdbRequestContentLengthv1250,
	ruleTypeDbCosmosdbStatusCodev1250,
	ruleTypeDbCosmosdbSubStatusCodev1250,
	ruleTypeDbElasticsearchClusterNamev1250,
	ruleTypeDbElasticsearchNodeNamev1250,
	ruleTypeDbInstanceIdv1250,
	ruleTypeDbJdbcDriverClassnamev1250,
	ruleTypeDbMongodbCollectionv1250,
	ruleTypeDbMssqlInstanceNamev1250,
	ruleTypeDbNamev1250,
	ruleTypeDbOperationv1250,
	ruleTypeDbRedisDatabaseIndexv1250,
	ruleTypeDbSqlTablev1250,
	ruleTypeDbStatementv1250,
	ruleTypeDbUserv1250,
	ruleTypeDeploymentEnvironmentv1250,
	ruleTypeDestinationAddressv1250,
	ruleTypeDestinationPortv1250,
	ruleTypeDeviceIdv1250,
	ruleTypeDeviceManufacturerv1250,
	ruleTypeDeviceModelIdentifierv1250,
	ruleTypeDeviceModelNamev1250,
	ruleTypeDnsQuestionNamev1250,
	ruleTypeEnduserIdv1250,
	ruleTypeEnduserRolev1250,
	ruleTypeEnduserScopev1250,
	ruleTypeEventNamev1250,
	ruleTypeExceptionEscapedv1250,
	ruleTypeExceptionMessagev1250,
	ruleTypeExceptionStacktracev1250,
	ruleTypeExceptionTypev1250,
	ruleTypeFaasColdstartv1250,
	ruleTypeFaasCronv1250,
	ruleTypeFaasDocumentCollectionv1250,
	ruleTypeFaasDocumentNamev1250,
	ruleTypeFaasDocumentTimev1250,
	ruleTypeFaasInstancev1250,
	ruleTypeFaasInvocationIdv1250,
	ruleTypeFaasInvokedNamev1250,
	ruleTypeFaasInvokedRegionv1250,
	ruleTypeFaasMaxMemoryv1250,
	ruleTypeFaasNamev1250,
	ruleTypeFaasTimev1250,
	ruleTypeFaasVersionv1250,
	ruleTypeFeatureFlagKeyv1250,
	ruleTypeFeatureFlagProviderNamev1250,
	ruleTypeFeatureFlagVariantv1250,
	ruleTypeFileDirectoryv1250,
	ruleTypeFileExtensionv1250,
	ruleTypeFileNamev1250,
	ruleTypeFilePathv1250,
	ruleTypeFileSizev1250,
	ruleTypeGcpCloudRunJobExecutionv1250,
	ruleTypeGcpCloudRunJobTaskIndexv1250,
	ruleTypeGcpGceInstanceHostnamev1250,
	ruleTypeGcpGceInstanceNamev1250,
	ruleTypeGraphqlDocumentv1250,
	ruleTypeGraphqlOperationNamev1250,
	ruleTypeHerokuAppIdv1250,
	ruleTypeHerokuReleaseCommitv1250,
	ruleTypeHerokuReleaseCreationTimestampv1250,
	ruleTypeHostCpuCacheL2Sizev1250,
	ruleTypeHostCpuFamilyv1250,
	ruleTypeHostCpuModelIdv1250,
	ruleTypeHostCpuModelNamev1250,
	ruleTypeHostCpuSteppingv1250,
	ruleTypeHostCpuVendorIdv1250,
	ruleTypeHostIdv1250,
	ruleTypeHostImageIdv1250,
	ruleTypeHostImageNamev1250,
	ruleTypeHostImageVersionv1250,
	ruleTypeHostIpv1250,
	ruleTypeHostMacv1250,
	ruleTypeHostNamev1250,
	ruleTypeHostTypev1250,
	ruleTypeHttpMethodv1250,
	ruleTypeHttpRequestBodySizev1250,
	ruleTypeHttpRequestMethodOriginalv1250,
	ruleTypeHttpRequestResendCountv1250,
	ruleTypeHttpRequestSizev1250,
	ruleTypeHttpRequestContentLengthv1250,
	ruleTypeHttpResponseBodySizev1250,
	ruleTypeHttpResponseSizev1250,
	ruleTypeHttpResponseStatusCodev1250,
	ruleTypeHttpResponseContentLengthv1250,
	ruleTypeHttpRoutev1250,
	ruleTypeHttpSchemev1250,
	ruleTypeHttpStatusCodev1250,
	ruleTypeHttpTargetv1250,
	ruleTypeHttpUrlv1250,
	ruleTypeHttpUserAgentv1250,
	ruleTypeJvmBufferPoolNamev1250,
	ruleTypeJvmGcActionv1250,
	ruleTypeJvmGcNamev1250,
	ruleTypeJvmMemoryPoolNamev1250,
	ruleTypeJvmThreadDaemonv1250,
	ruleTypeK8SClusterNamev1250,
	ruleTypeK8SClusterUidv1250,
	ruleTypeK8SContainerNamev1250,
	ruleTypeK8SContainerRestartCountv1250,
	ruleTypeK8SCronjobNamev1250,
	ruleTypeK8SCronjobUidv1250,
	ruleTypeK8SDaemonsetNamev1250,
	ruleTypeK8SDaemonsetUidv1250,
	ruleTypeK8SDeploymentNamev1250,
	ruleTypeK8SDeploymentUidv1250,
	ruleTypeK8SJobNamev1250,
	ruleTypeK8SJobUidv1250,
	ruleTypeK8SNamespaceNamev1250,
	ruleTypeK8SNodeNamev1250,
	ruleTypeK8SNodeUidv1250,
	ruleTypeK8SPodNamev1250,
	ruleTypeK8SPodUidv1250,
	ruleTypeK8SReplicasetNamev1250,
	ruleTypeK8SReplicasetUidv1250,
	ruleTypeK8SStatefulsetNamev1250,
	ruleTypeK8SStatefulsetUidv1250,
	ruleTypeLogFileNamev1250,
	ruleTypeLogFileNameResolvedv1250,
	ruleTypeLogFilePathv1250,
	ruleTypeLogFilePathResolvedv1250,
	ruleTypeLogRecordUidv1250,
	ruleTypeMessageCompressedSizev1250,
	ruleTypeMessageIdv1250,
	ruleTypeMessageUncompressedSizev1250,
	ruleTypeMessagingBatchMessageCountv1250,
	ruleTypeMessagingClient_Idv1250,
	ruleTypeMessagingDestinationAnonymousv1250,
	ruleTypeMessagingDestinationNamev1250,
	ruleTypeMessagingDestinationPartitionIdv1250,
	ruleTypeMessagingDestinationTemplatev1250,
	ruleTypeMessagingDestinationTemporaryv1250,
	ruleTypeMessagingDestinationPublishAnonymousv1250,
	ruleTypeMessagingDestinationPublishNamev1250,
	ruleTypeMessagingEventhubsConsumerGroupv1250,
	ruleTypeMessagingEventhubsMessageEnqueuedTimev1250,
	ruleTypeMessagingGcpPubsubMessageOrderingKeyv1250,
	ruleTypeMessagingKafkaConsumerGroupv1250,
	ruleTypeMessagingKafkaDestinationPartitionv1250,
	ruleTypeMessagingKafkaMessageKeyv1250,
	ruleTypeMessagingKafkaMessageOffsetv1250,
	ruleTypeMessagingKafkaMessageTombstonev1250,
	ruleTypeMessagingMessageBodySizev1250,
	ruleTypeMessagingMessageConversationIdv1250,
	ruleTypeMessagingMessageEnvelopeSizev1250,
	ruleTypeMessagingMessageIdv1250,
	ruleTypeMessagingRabbitmqDestinationRoutingKeyv1250,
	ruleTypeMessagingRabbitmqMessageDeliveryTagv1250,
	ruleTypeMessagingRocketmqClientGroupv1250,
	ruleTypeMessagingRocketmqMessageDelayTimeLevelv1250,
	ruleTypeMessagingRocketmqMessageDeliveryTimestampv1250,
	ruleTypeMessagingRocketmqMessageGroupv1250,
	ruleTypeMessagingRocketmqMessageKeysv1250,
	ruleTypeMessagingRocketmqMessageTagv1250,
	ruleTypeMessagingRocketmqNamespacev1250,
	ruleTypeMessagingServicebusDestinationSubscriptionNamev1250,
	ruleTypeMessagingServicebusMessageDeliveryCountv1250,
	ruleTypeMessagingServicebusMessageEnqueuedTimev1250,
	ruleTypeNetHostNamev1250,
	ruleTypeNetHostPortv1250,
	ruleTypeNetPeerNamev1250,
	ruleTypeNetPeerPortv1250,
	ruleTypeNetProtocolNamev1250,
	ruleTypeNetProtocolVersionv1250,
	ruleTypeNetSockHostAddrv1250,
	ruleTypeNetSockHostPortv1250,
	ruleTypeNetSockPeerAddrv1250,
	ruleTypeNetSockPeerNamev1250,
	ruleTypeNetSockPeerPortv1250,
	ruleTypeNetworkCarrierIccv1250,
	ruleTypeNetworkCarrierMccv1250,
	ruleTypeNetworkCarrierMncv1250,
	ruleTypeNetworkCarrierNamev1250,
	ruleTypeNetworkLocalAddressv1250,
	ruleTypeNetworkLocalPortv1250,
	ruleTypeNetworkPeerAddressv1250,
	ruleTypeNetworkPeerPortv1250,
	ruleTypeNetworkProtocolNamev1250,
	ruleTypeNetworkProtocolVersionv1250,
	ruleTypeOciManifestDigestv1250,
	ruleTypeOsBuildIdv1250,
	ruleTypeOsDescriptionv1250,
	ruleTypeOsNamev1250,
	ruleTypeOsVersionv1250,
	ruleTypeOtelLibraryNamev1250,
	ruleTypeOtelLibraryVersionv1250,
	ruleTypeOtelScopeNamev1250,
	ruleTypeOtelScopeVersionv1250,
	ruleTypeOtelStatusDescriptionv1250,
	ruleTypePeerServicev1250,
	ruleTypePoolNamev1250,
	ruleTypeProcessCommandv1250,
	ruleTypeProcessCommandArgsv1250,
	ruleTypeProcessCommandLinev1250,
	ruleTypeProcessExecutableNamev1250,
	ruleTypeProcessExecutablePathv1250,
	ruleTypeProcessOwnerv1250,
	ruleTypeProcessParentPidv1250,
	ruleTypeProcessPidv1250,
	ruleTypeProcessRuntimeDescriptionv1250,
	ruleTypeProcessRuntimeNamev1250,
	ruleTypeProcessRuntimeVersionv1250,
	ruleTypeRpcJsonrpcErrorCodev1250,
	ruleTypeRpcJsonrpcErrorMessagev1250,
	ruleTypeRpcJsonrpcRequestIdv1250,
	ruleTypeRpcJsonrpcVersionv1250,
	ruleTypeRpcMethodv1250,
	ruleTypeRpcServicev1250,
	ruleTypeServerAddressv1250,
	ruleTypeServerPortv1250,
	ruleTypeServiceInstanceIdv1250,
	ruleTypeServiceNamev1250,
	ruleTypeServiceNamespacev1250,
	ruleTypeServiceVersionv1250,
	ruleTypeSessionIdv1250,
	ruleTypeSessionPreviousIdv1250,
	ruleTypeSourceAddressv1250,
	ruleTypeSourcePortv1250,
	ruleTypeSystemCpuLogicalNumberv1250,
	ruleTypeSystemDevicev1250,
	ruleTypeSystemFilesystemModev1250,
	ruleTypeSystemFilesystemMountpointv1250,
	ruleTypeTelemetryDistroNamev1250,
	ruleTypeTelemetryDistroVersionv1250,
	ruleTypeTelemetrySdkNamev1250,
	ruleTypeTelemetrySdkVersionv1250,
	ruleTypeThreadIdv1250,
	ruleTypeThreadNamev1250,
	ruleTypeTlsCipherv1250,
	ruleTypeTlsClientCertificatev1250,
	ruleTypeTlsClientCertificateChainv1250,
	ruleTypeTlsClientHashMd5v1250,
	ruleTypeTlsClientHashSha1v1250,
	ruleTypeTlsClientHashSha256v1250,
	ruleTypeTlsClientIssuerv1250,
	ruleTypeTlsClientJa3v1250,
	ruleTypeTlsClientNotAfterv1250,
	ruleTypeTlsClientNotBeforev1250,
	ruleTypeTlsClientServerNamev1250,
	ruleTypeTlsClientSubjectv1250,
	ruleTypeTlsClientSupportedCiphersv1250,
	ruleTypeTlsCurvev1250,
	ruleTypeTlsEstablishedv1250,
	ruleTypeTlsNextProtocolv1250,
	ruleTypeTlsProtocolVersionv1250,
	ruleTypeTlsResumedv1250,
	ruleTypeTlsServerCertificatev1250,
	ruleTypeTlsServerCertificateChainv1250,
	ruleTypeTlsServerHashMd5v1250,
	ruleTypeTlsServerHashSha1v1250,
	ruleTypeTlsServerHashSha256v1250,
	ruleTypeTlsServerIssuerv1250,
	ruleTypeTlsServerJa3Sv1250,
	ruleTypeTlsServerNotAfterv1250,
	ruleTypeTlsServerNotBeforev1250,
	ruleTypeTlsServerSubjectv1250,
	ruleTypeUrlDomainv1250,
	ruleTypeUrlExtensionv1250,
	ruleTypeUrlFragmentv1250,
	ruleTypeUrlFullv1250,
	ruleTypeUrlOriginalv1250,
	ruleTypeUrlPathv1250,
	ruleTypeUrlPortv1250,
	ruleTypeUrlQueryv1250,
	ruleTypeUrlRegisteredDomainv1250,
	ruleTypeUrlSchemev1250,
	ruleTypeUrlSubdomainv1250,
	ruleTypeUrlTopLevelDomainv1250,
	ruleTypeUserAgentNamev1250,
	ruleTypeUserAgentOriginalv1250,
	ruleTypeUserAgentVersionv1250,
	ruleTypeWebengineDescriptionv1250,
	ruleTypeWebengineNamev1250,
	ruleTypeWebengineVersionv1250,
}

var ruleTypeAndroidOsApiLevelv1250 = &rule.AttributeRule{
	Name:         "type.android.os.api_level",
	Title:        "The type of `android.os.api_level` is string",
	Check:        checkTypeAndroidOsApiLevelv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAndroidOsApiLevelv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("android.os.api_level")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAspnetcoreDiagnosticsHandlerTypev1250 = &rule.AttributeRule{
	Name:         "type.aspnetcore.diagnostics.handler.type",
	Title:        "The type of `aspnetcore.diagnostics.handler.type` is string",
	Check:        checkTypeAspnetcoreDiagnosticsHandlerTypev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeAspnetcoreDiagnosticsHandlerTypev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.diagnostics.handler.type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAspnetcoreRateLimitingPolicyv1250 = &rule.AttributeRule{
	Name:         "type.aspnetcore.rate_limiting.policy",
	Title:        "The type of `aspnetcore.rate_limiting.policy` is string",
	Check:        checkTypeAspnetcoreRateLimitingPolicyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeAspnetcoreRateLimitingPolicyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.rate_limiting.policy")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAspnetcoreRequestIsUnhandledv1250 = &rule.AttributeRule{
	Name:         "type.aspnetcore.request.is_unhandled",
	Title:        "The type of `aspnetcore.request.is_unhandled` is boolean",
	Check:        checkTypeAspnetcoreRequestIsUnhandledv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeAspnetcoreRequestIsUnhandledv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.request.is_unhandled")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAspnetcoreRoutingIsFallbackv1250 = &rule.AttributeRule{
	Name:         "type.aspnetcore.routing.is_fallback",
	Title:        "The type of `aspnetcore.routing.is_fallback` is boolean",
	Check:        checkTypeAspnetcoreRoutingIsFallbackv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeAspnetcoreRoutingIsFallbackv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aspnetcore.routing.is_fallback")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAwsDynamodbAttributeDefinitionsv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attribute_definitions",
	Title:        "The type of `aws.dynamodb.attribute_definitions` is string[]",
	Check:        checkTypeAwsDynamodbAttributeDefinitionsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbAttributeDefinitionsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.attribute_definitions")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbAttributesToGetv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attributes_to_get",
	Title:        "The type of `aws.dynamodb.attributes_to_get` is string[]",
	Check:        checkTypeAwsDynamodbAttributesToGetv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbAttributesToGetv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.attributes_to_get")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbConsistentReadv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consistent_read",
	Title:        "The type of `aws.dynamodb.consistent_read` is boolean",
	Check:        checkTypeAwsDynamodbConsistentReadv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbConsistentReadv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.consistent_read")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAwsDynamodbConsumedCapacityv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consumed_capacity",
	Title:        "The type of `aws.dynamodb.consumed_capacity` is string[]",
	Check:        checkTypeAwsDynamodbConsumedCapacityv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbConsumedCapacityv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.consumed_capacity")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbCountv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.count",
	Title:        "The type of `aws.dynamodb.count` is int",
	Check:        checkTypeAwsDynamodbCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbExclusiveStartTablev1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.exclusive_start_table",
	Title:        "The type of `aws.dynamodb.exclusive_start_table` is string",
	Check:        checkTypeAwsDynamodbExclusiveStartTablev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbExclusiveStartTablev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.exclusive_start_table")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_index_updates",
	Title:        "The type of `aws.dynamodb.global_secondary_index_updates` is string[]",
	Check:        checkTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.global_secondary_index_updates")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexesv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_indexes",
	Title:        "The type of `aws.dynamodb.global_secondary_indexes` is string[]",
	Check:        checkTypeAwsDynamodbGlobalSecondaryIndexesv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbGlobalSecondaryIndexesv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.global_secondary_indexes")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbIndexNamev1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.index_name",
	Title:        "The type of `aws.dynamodb.index_name` is string",
	Check:        checkTypeAwsDynamodbIndexNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbIndexNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.index_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbItemCollectionMetricsv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.item_collection_metrics",
	Title:        "The type of `aws.dynamodb.item_collection_metrics` is string",
	Check:        checkTypeAwsDynamodbItemCollectionMetricsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbItemCollectionMetricsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.item_collection_metrics")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbLimitv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.limit",
	Title:        "The type of `aws.dynamodb.limit` is int",
	Check:        checkTypeAwsDynamodbLimitv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbLimitv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.limit")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbLocalSecondaryIndexesv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.local_secondary_indexes",
	Title:        "The type of `aws.dynamodb.local_secondary_indexes` is string[]",
	Check:        checkTypeAwsDynamodbLocalSecondaryIndexesv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbLocalSecondaryIndexesv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.local_secondary_indexes")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbProjectionv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.projection",
	Title:        "The type of `aws.dynamodb.projection` is string",
	Check:        checkTypeAwsDynamodbProjectionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbProjectionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.projection")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbProvisionedReadCapacityv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_read_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_read_capacity` is double",
	Check:        checkTypeAwsDynamodbProvisionedReadCapacityv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbProvisionedReadCapacityv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.provisioned_read_capacity")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeDouble
}

var ruleTypeAwsDynamodbProvisionedWriteCapacityv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_write_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_write_capacity` is double",
	Check:        checkTypeAwsDynamodbProvisionedWriteCapacityv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbProvisionedWriteCapacityv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.provisioned_write_capacity")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeDouble
}

var ruleTypeAwsDynamodbScanForwardv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scan_forward",
	Title:        "The type of `aws.dynamodb.scan_forward` is boolean",
	Check:        checkTypeAwsDynamodbScanForwardv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbScanForwardv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.scan_forward")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeAwsDynamodbScannedCountv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scanned_count",
	Title:        "The type of `aws.dynamodb.scanned_count` is int",
	Check:        checkTypeAwsDynamodbScannedCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbScannedCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.scanned_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbSegmentv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.segment",
	Title:        "The type of `aws.dynamodb.segment` is int",
	Check:        checkTypeAwsDynamodbSegmentv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbSegmentv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.segment")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbSelectv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.select",
	Title:        "The type of `aws.dynamodb.select` is string",
	Check:        checkTypeAwsDynamodbSelectv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbSelectv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.select")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsDynamodbTableCountv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_count",
	Title:        "The type of `aws.dynamodb.table_count` is int",
	Check:        checkTypeAwsDynamodbTableCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbTableCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.table_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsDynamodbTableNamesv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_names",
	Title:        "The type of `aws.dynamodb.table_names` is string[]",
	Check:        checkTypeAwsDynamodbTableNamesv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbTableNamesv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.table_names")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsDynamodbTotalSegmentsv1250 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.total_segments",
	Title:        "The type of `aws.dynamodb.total_segments` is int",
	Check:        checkTypeAwsDynamodbTotalSegmentsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsDynamodbTotalSegmentsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.dynamodb.total_segments")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsEcsClusterArnv1250 = &rule.AttributeRule{
	Name:         "type.aws.ecs.cluster.arn",
	Title:        "The type of `aws.ecs.cluster.arn` is string",
	Check:        checkTypeAwsEcsClusterArnv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsClusterArnv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.cluster.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsContainerArnv1250 = &rule.AttributeRule{
	Name:         "type.aws.ecs.container.arn",
	Title:        "The type of `aws.ecs.container.arn` is string",
	Check:        checkTypeAwsEcsContainerArnv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsContainerArnv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.container.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsTaskArnv1250 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.arn",
	Title:        "The type of `aws.ecs.task.arn` is string",
	Check:        checkTypeAwsEcsTaskArnv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsTaskArnv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.task.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsTaskFamilyv1250 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.family",
	Title:        "The type of `aws.ecs.task.family` is string",
	Check:        checkTypeAwsEcsTaskFamilyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsTaskFamilyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.task.family")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsTaskIdv1250 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.id",
	Title:        "The type of `aws.ecs.task.id` is string",
	Check:        checkTypeAwsEcsTaskIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsTaskIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.task.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEcsTaskRevisionv1250 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.revision",
	Title:        "The type of `aws.ecs.task.revision` is string",
	Check:        checkTypeAwsEcsTaskRevisionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEcsTaskRevisionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.ecs.task.revision")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsEksClusterArnv1250 = &rule.AttributeRule{
	Name:         "type.aws.eks.cluster.arn",
	Title:        "The type of `aws.eks.cluster.arn` is string",
	Check:        checkTypeAwsEksClusterArnv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsEksClusterArnv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.eks.cluster.arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsLambdaInvokedArnv1250 = &rule.AttributeRule{
	Name:         "type.aws.lambda.invoked_arn",
	Title:        "The type of `aws.lambda.invoked_arn` is string",
	Check:        checkTypeAwsLambdaInvokedArnv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLambdaInvokedArnv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.lambda.invoked_arn")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsLogGroupArnsv1250 = &rule.AttributeRule{
	Name:         "type.aws.log.group.arns",
	Title:        "The type of `aws.log.group.arns` is string[]",
	Check:        checkTypeAwsLogGroupArnsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogGroupArnsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.group.arns")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsLogGroupNamesv1250 = &rule.AttributeRule{
	Name:         "type.aws.log.group.names",
	Title:        "The type of `aws.log.group.names` is string[]",
	Check:        checkTypeAwsLogGroupNamesv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogGroupNamesv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.group.names")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsLogStreamArnsv1250 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.arns",
	Title:        "The type of `aws.log.stream.arns` is string[]",
	Check:        checkTypeAwsLogStreamArnsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogStreamArnsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.stream.arns")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsLogStreamNamesv1250 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.names",
	Title:        "The type of `aws.log.stream.names` is string[]",
	Check:        checkTypeAwsLogStreamNamesv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsLogStreamNamesv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.log.stream.names")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeAwsRequestIdv1250 = &rule.AttributeRule{
	Name:         "type.aws.request_id",
	Title:        "The type of `aws.request_id` is string",
	Check:        checkTypeAwsRequestIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsRequestIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.request_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3Bucketv1250 = &rule.AttributeRule{
	Name:         "type.aws.s3.bucket",
	Title:        "The type of `aws.s3.bucket` is string",
	Check:        checkTypeAwsS3Bucketv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3Bucketv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.bucket")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3CopySourcev1250 = &rule.AttributeRule{
	Name:         "type.aws.s3.copy_source",
	Title:        "The type of `aws.s3.copy_source` is string",
	Check:        checkTypeAwsS3CopySourcev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3CopySourcev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.copy_source")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3Deletev1250 = &rule.AttributeRule{
	Name:         "type.aws.s3.delete",
	Title:        "The type of `aws.s3.delete` is string",
	Check:        checkTypeAwsS3Deletev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3Deletev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.delete")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3Keyv1250 = &rule.AttributeRule{
	Name:         "type.aws.s3.key",
	Title:        "The type of `aws.s3.key` is string",
	Check:        checkTypeAwsS3Keyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3Keyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeAwsS3PartNumberv1250 = &rule.AttributeRule{
	Name:         "type.aws.s3.part_number",
	Title:        "The type of `aws.s3.part_number` is int",
	Check:        checkTypeAwsS3PartNumberv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3PartNumberv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.part_number")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeAwsS3UploadIdv1250 = &rule.AttributeRule{
	Name:         "type.aws.s3.upload_id",
	Title:        "The type of `aws.s3.upload_id` is string",
	Check:        checkTypeAwsS3UploadIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeAwsS3UploadIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("aws.s3.upload_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeBrowserBrandsv1250 = &rule.AttributeRule{
	Name:         "type.browser.brands",
	Title:        "The type of `browser.brands` is string[]",
	Check:        checkTypeBrowserBrandsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserBrandsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.brands")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeBrowserLanguagev1250 = &rule.AttributeRule{
	Name:         "type.browser.language",
	Title:        "The type of `browser.language` is string",
	Check:        checkTypeBrowserLanguagev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserLanguagev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.language")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeBrowserMobilev1250 = &rule.AttributeRule{
	Name:         "type.browser.mobile",
	Title:        "The type of `browser.mobile` is boolean",
	Check:        checkTypeBrowserMobilev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserMobilev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.mobile")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeBrowserPlatformv1250 = &rule.AttributeRule{
	Name:         "type.browser.platform",
	Title:        "The type of `browser.platform` is string",
	Check:        checkTypeBrowserPlatformv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeBrowserPlatformv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("browser.platform")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeClientAddressv1250 = &rule.AttributeRule{
	Name:         "type.client.address",
	Title:        "The type of `client.address` is string",
	Check:        checkTypeClientAddressv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeClientAddressv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("client.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeClientPortv1250 = &rule.AttributeRule{
	Name:         "type.client.port",
	Title:        "The type of `client.port` is int",
	Check:        checkTypeClientPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeClientPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("client.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeCloudAccountIdv1250 = &rule.AttributeRule{
	Name:         "type.cloud.account.id",
	Title:        "The type of `cloud.account.id` is string",
	Check:        checkTypeCloudAccountIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudAccountIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.account.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudAvailabilityZonev1250 = &rule.AttributeRule{
	Name:         "type.cloud.availability_zone",
	Title:        "The type of `cloud.availability_zone` is string",
	Check:        checkTypeCloudAvailabilityZonev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudAvailabilityZonev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.availability_zone")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudRegionv1250 = &rule.AttributeRule{
	Name:         "type.cloud.region",
	Title:        "The type of `cloud.region` is string",
	Check:        checkTypeCloudRegionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudRegionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.region")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudResourceIdv1250 = &rule.AttributeRule{
	Name:         "type.cloud.resource_id",
	Title:        "The type of `cloud.resource_id` is string",
	Check:        checkTypeCloudResourceIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudResourceIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloud.resource_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventIdv1250 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_id",
	Title:        "The type of `cloudevents.event_id` is string",
	Check:        checkTypeCloudeventsEventIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventSourcev1250 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_source",
	Title:        "The type of `cloudevents.event_source` is string",
	Check:        checkTypeCloudeventsEventSourcev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventSourcev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_source")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventSpecVersionv1250 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_spec_version",
	Title:        "The type of `cloudevents.event_spec_version` is string",
	Check:        checkTypeCloudeventsEventSpecVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventSpecVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_spec_version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventSubjectv1250 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_subject",
	Title:        "The type of `cloudevents.event_subject` is string",
	Check:        checkTypeCloudeventsEventSubjectv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventSubjectv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_subject")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCloudeventsEventTypev1250 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_type",
	Title:        "The type of `cloudevents.event_type` is string",
	Check:        checkTypeCloudeventsEventTypev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCloudeventsEventTypev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("cloudevents.event_type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeColumnv1250 = &rule.AttributeRule{
	Name:         "type.code.column",
	Title:        "The type of `code.column` is int",
	Check:        checkTypeCodeColumnv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeColumnv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.column")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeCodeFilepathv1250 = &rule.AttributeRule{
	Name:         "type.code.filepath",
	Title:        "The type of `code.filepath` is string",
	Check:        checkTypeCodeFilepathv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeFilepathv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.filepath")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeFunctionv1250 = &rule.AttributeRule{
	Name:         "type.code.function",
	Title:        "The type of `code.function` is string",
	Check:        checkTypeCodeFunctionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeFunctionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.function")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeLinenov1250 = &rule.AttributeRule{
	Name:         "type.code.lineno",
	Title:        "The type of `code.lineno` is int",
	Check:        checkTypeCodeLinenov1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeLinenov1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.lineno")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeCodeNamespacev1250 = &rule.AttributeRule{
	Name:         "type.code.namespace",
	Title:        "The type of `code.namespace` is string",
	Check:        checkTypeCodeNamespacev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeNamespacev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.namespace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeCodeStacktracev1250 = &rule.AttributeRule{
	Name:         "type.code.stacktrace",
	Title:        "The type of `code.stacktrace` is string",
	Check:        checkTypeCodeStacktracev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeCodeStacktracev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("code.stacktrace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerCommandv1250 = &rule.AttributeRule{
	Name:         "type.container.command",
	Title:        "The type of `container.command` is string",
	Check:        checkTypeContainerCommandv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerCommandv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.command")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerCommandArgsv1250 = &rule.AttributeRule{
	Name:         "type.container.command_args",
	Title:        "The type of `container.command_args` is string[]",
	Check:        checkTypeContainerCommandArgsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerCommandArgsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.command_args")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeContainerCommandLinev1250 = &rule.AttributeRule{
	Name:         "type.container.command_line",
	Title:        "The type of `container.command_line` is string",
	Check:        checkTypeContainerCommandLinev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerCommandLinev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.command_line")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerIdv1250 = &rule.AttributeRule{
	Name:         "type.container.id",
	Title:        "The type of `container.id` is string",
	Check:        checkTypeContainerIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerImageIdv1250 = &rule.AttributeRule{
	Name:         "type.container.image.id",
	Title:        "The type of `container.image.id` is string",
	Check:        checkTypeContainerImageIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerImageNamev1250 = &rule.AttributeRule{
	Name:         "type.container.image.name",
	Title:        "The type of `container.image.name` is string",
	Check:        checkTypeContainerImageNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerImageRepoDigestsv1250 = &rule.AttributeRule{
	Name:         "type.container.image.repo_digests",
	Title:        "The type of `container.image.repo_digests` is string[]",
	Check:        checkTypeContainerImageRepoDigestsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageRepoDigestsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.repo_digests")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeContainerImageTagsv1250 = &rule.AttributeRule{
	Name:         "type.container.image.tags",
	Title:        "The type of `container.image.tags` is string[]",
	Check:        checkTypeContainerImageTagsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerImageTagsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.image.tags")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeContainerNamev1250 = &rule.AttributeRule{
	Name:         "type.container.name",
	Title:        "The type of `container.name` is string",
	Check:        checkTypeContainerNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeContainerRuntimev1250 = &rule.AttributeRule{
	Name:         "type.container.runtime",
	Title:        "The type of `container.runtime` is string",
	Check:        checkTypeContainerRuntimev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeContainerRuntimev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("container.runtime")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCassandraCoordinatorDcv1250 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.dc",
	Title:        "The type of `db.cassandra.coordinator.dc` is string",
	Check:        checkTypeDbCassandraCoordinatorDcv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraCoordinatorDcv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.coordinator.dc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCassandraCoordinatorIdv1250 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.id",
	Title:        "The type of `db.cassandra.coordinator.id` is string",
	Check:        checkTypeDbCassandraCoordinatorIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraCoordinatorIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.coordinator.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCassandraIdempotencev1250 = &rule.AttributeRule{
	Name:         "type.db.cassandra.idempotence",
	Title:        "The type of `db.cassandra.idempotence` is boolean",
	Check:        checkTypeDbCassandraIdempotencev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraIdempotencev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.idempotence")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeDbCassandraPageSizev1250 = &rule.AttributeRule{
	Name:         "type.db.cassandra.page_size",
	Title:        "The type of `db.cassandra.page_size` is int",
	Check:        checkTypeDbCassandraPageSizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraPageSizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.page_size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCassandraSpeculativeExecutionCountv1250 = &rule.AttributeRule{
	Name:         "type.db.cassandra.speculative_execution_count",
	Title:        "The type of `db.cassandra.speculative_execution_count` is int",
	Check:        checkTypeDbCassandraSpeculativeExecutionCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraSpeculativeExecutionCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.speculative_execution_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCassandraTablev1250 = &rule.AttributeRule{
	Name:         "type.db.cassandra.table",
	Title:        "The type of `db.cassandra.table` is string",
	Check:        checkTypeDbCassandraTablev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCassandraTablev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cassandra.table")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbConnectionStringv1250 = &rule.AttributeRule{
	Name:         "type.db.connection_string",
	Title:        "The type of `db.connection_string` is string",
	Check:        checkTypeDbConnectionStringv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbConnectionStringv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.connection_string")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCosmosdbClientIdv1250 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.client_id",
	Title:        "The type of `db.cosmosdb.client_id` is string",
	Check:        checkTypeDbCosmosdbClientIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbClientIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.client_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCosmosdbContainerv1250 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.container",
	Title:        "The type of `db.cosmosdb.container` is string",
	Check:        checkTypeDbCosmosdbContainerv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbContainerv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.container")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbCosmosdbRequestChargev1250 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_charge",
	Title:        "The type of `db.cosmosdb.request_charge` is double",
	Check:        checkTypeDbCosmosdbRequestChargev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbRequestChargev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.request_charge")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeDouble
}

var ruleTypeDbCosmosdbRequestContentLengthv1250 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_content_length",
	Title:        "The type of `db.cosmosdb.request_content_length` is int",
	Check:        checkTypeDbCosmosdbRequestContentLengthv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbRequestContentLengthv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.request_content_length")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCosmosdbStatusCodev1250 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.status_code",
	Title:        "The type of `db.cosmosdb.status_code` is int",
	Check:        checkTypeDbCosmosdbStatusCodev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbStatusCodev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbCosmosdbSubStatusCodev1250 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.sub_status_code",
	Title:        "The type of `db.cosmosdb.sub_status_code` is int",
	Check:        checkTypeDbCosmosdbSubStatusCodev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbCosmosdbSubStatusCodev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.cosmosdb.sub_status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbElasticsearchClusterNamev1250 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.cluster.name",
	Title:        "The type of `db.elasticsearch.cluster.name` is string",
	Check:        checkTypeDbElasticsearchClusterNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbElasticsearchClusterNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.elasticsearch.cluster.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbElasticsearchNodeNamev1250 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.node.name",
	Title:        "The type of `db.elasticsearch.node.name` is string",
	Check:        checkTypeDbElasticsearchNodeNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbElasticsearchNodeNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.elasticsearch.node.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbInstanceIdv1250 = &rule.AttributeRule{
	Name:         "type.db.instance.id",
	Title:        "The type of `db.instance.id` is string",
	Check:        checkTypeDbInstanceIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbInstanceIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.instance.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbJdbcDriverClassnamev1250 = &rule.AttributeRule{
	Name:         "type.db.jdbc.driver_classname",
	Title:        "The type of `db.jdbc.driver_classname` is string",
	Check:        checkTypeDbJdbcDriverClassnamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbJdbcDriverClassnamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.jdbc.driver_classname")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbMongodbCollectionv1250 = &rule.AttributeRule{
	Name:         "type.db.mongodb.collection",
	Title:        "The type of `db.mongodb.collection` is string",
	Check:        checkTypeDbMongodbCollectionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbMongodbCollectionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.mongodb.collection")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbMssqlInstanceNamev1250 = &rule.AttributeRule{
	Name:         "type.db.mssql.instance_name",
	Title:        "The type of `db.mssql.instance_name` is string",
	Check:        checkTypeDbMssqlInstanceNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbMssqlInstanceNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.mssql.instance_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbNamev1250 = &rule.AttributeRule{
	Name:         "type.db.name",
	Title:        "The type of `db.name` is string",
	Check:        checkTypeDbNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbOperationv1250 = &rule.AttributeRule{
	Name:         "type.db.operation",
	Title:        "The type of `db.operation` is string",
	Check:        checkTypeDbOperationv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbOperationv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.operation")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbRedisDatabaseIndexv1250 = &rule.AttributeRule{
	Name:         "type.db.redis.database_index",
	Title:        "The type of `db.redis.database_index` is int",
	Check:        checkTypeDbRedisDatabaseIndexv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbRedisDatabaseIndexv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.redis.database_index")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDbSqlTablev1250 = &rule.AttributeRule{
	Name:         "type.db.sql.table",
	Title:        "The type of `db.sql.table` is string",
	Check:        checkTypeDbSqlTablev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbSqlTablev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.sql.table")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbStatementv1250 = &rule.AttributeRule{
	Name:         "type.db.statement",
	Title:        "The type of `db.statement` is string",
	Check:        checkTypeDbStatementv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbStatementv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.statement")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDbUserv1250 = &rule.AttributeRule{
	Name:         "type.db.user",
	Title:        "The type of `db.user` is string",
	Check:        checkTypeDbUserv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDbUserv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("db.user")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeploymentEnvironmentv1250 = &rule.AttributeRule{
	Name:         "type.deployment.environment",
	Title:        "The type of `deployment.environment` is string",
	Check:        checkTypeDeploymentEnvironmentv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeploymentEnvironmentv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("deployment.environment")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDestinationAddressv1250 = &rule.AttributeRule{
	Name:         "type.destination.address",
	Title:        "The type of `destination.address` is string",
	Check:        checkTypeDestinationAddressv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDestinationAddressv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("destination.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDestinationPortv1250 = &rule.AttributeRule{
	Name:         "type.destination.port",
	Title:        "The type of `destination.port` is int",
	Check:        checkTypeDestinationPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDestinationPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("destination.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeDeviceIdv1250 = &rule.AttributeRule{
	Name:         "type.device.id",
	Title:        "The type of `device.id` is string",
	Check:        checkTypeDeviceIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeviceManufacturerv1250 = &rule.AttributeRule{
	Name:         "type.device.manufacturer",
	Title:        "The type of `device.manufacturer` is string",
	Check:        checkTypeDeviceManufacturerv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceManufacturerv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.manufacturer")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeviceModelIdentifierv1250 = &rule.AttributeRule{
	Name:         "type.device.model.identifier",
	Title:        "The type of `device.model.identifier` is string",
	Check:        checkTypeDeviceModelIdentifierv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceModelIdentifierv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.model.identifier")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDeviceModelNamev1250 = &rule.AttributeRule{
	Name:         "type.device.model.name",
	Title:        "The type of `device.model.name` is string",
	Check:        checkTypeDeviceModelNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDeviceModelNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("device.model.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeDnsQuestionNamev1250 = &rule.AttributeRule{
	Name:         "type.dns.question.name",
	Title:        "The type of `dns.question.name` is string",
	Check:        checkTypeDnsQuestionNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeDnsQuestionNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("dns.question.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEnduserIdv1250 = &rule.AttributeRule{
	Name:         "type.enduser.id",
	Title:        "The type of `enduser.id` is string",
	Check:        checkTypeEnduserIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEnduserIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("enduser.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEnduserRolev1250 = &rule.AttributeRule{
	Name:         "type.enduser.role",
	Title:        "The type of `enduser.role` is string",
	Check:        checkTypeEnduserRolev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEnduserRolev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("enduser.role")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEnduserScopev1250 = &rule.AttributeRule{
	Name:         "type.enduser.scope",
	Title:        "The type of `enduser.scope` is string",
	Check:        checkTypeEnduserScopev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEnduserScopev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("enduser.scope")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeEventNamev1250 = &rule.AttributeRule{
	Name:         "type.event.name",
	Title:        "The type of `event.name` is string",
	Check:        checkTypeEventNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeEventNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("event.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeExceptionEscapedv1250 = &rule.AttributeRule{
	Name:         "type.exception.escaped",
	Title:        "The type of `exception.escaped` is boolean",
	Check:        checkTypeExceptionEscapedv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeExceptionEscapedv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.escaped")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeExceptionMessagev1250 = &rule.AttributeRule{
	Name:         "type.exception.message",
	Title:        "The type of `exception.message` is string",
	Check:        checkTypeExceptionMessagev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeExceptionMessagev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.message")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeExceptionStacktracev1250 = &rule.AttributeRule{
	Name:         "type.exception.stacktrace",
	Title:        "The type of `exception.stacktrace` is string",
	Check:        checkTypeExceptionStacktracev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeExceptionStacktracev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.stacktrace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeExceptionTypev1250 = &rule.AttributeRule{
	Name:         "type.exception.type",
	Title:        "The type of `exception.type` is string",
	Check:        checkTypeExceptionTypev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeExceptionTypev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("exception.type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasColdstartv1250 = &rule.AttributeRule{
	Name:         "type.faas.coldstart",
	Title:        "The type of `faas.coldstart` is boolean",
	Check:        checkTypeFaasColdstartv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasColdstartv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.coldstart")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeFaasCronv1250 = &rule.AttributeRule{
	Name:         "type.faas.cron",
	Title:        "The type of `faas.cron` is string",
	Check:        checkTypeFaasCronv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasCronv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.cron")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasDocumentCollectionv1250 = &rule.AttributeRule{
	Name:         "type.faas.document.collection",
	Title:        "The type of `faas.document.collection` is string",
	Check:        checkTypeFaasDocumentCollectionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasDocumentCollectionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.document.collection")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasDocumentNamev1250 = &rule.AttributeRule{
	Name:         "type.faas.document.name",
	Title:        "The type of `faas.document.name` is string",
	Check:        checkTypeFaasDocumentNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasDocumentNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.document.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasDocumentTimev1250 = &rule.AttributeRule{
	Name:         "type.faas.document.time",
	Title:        "The type of `faas.document.time` is string",
	Check:        checkTypeFaasDocumentTimev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasDocumentTimev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.document.time")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInstancev1250 = &rule.AttributeRule{
	Name:         "type.faas.instance",
	Title:        "The type of `faas.instance` is string",
	Check:        checkTypeFaasInstancev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInstancev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.instance")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInvocationIdv1250 = &rule.AttributeRule{
	Name:         "type.faas.invocation_id",
	Title:        "The type of `faas.invocation_id` is string",
	Check:        checkTypeFaasInvocationIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInvocationIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.invocation_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInvokedNamev1250 = &rule.AttributeRule{
	Name:         "type.faas.invoked_name",
	Title:        "The type of `faas.invoked_name` is string",
	Check:        checkTypeFaasInvokedNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInvokedNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.invoked_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasInvokedRegionv1250 = &rule.AttributeRule{
	Name:         "type.faas.invoked_region",
	Title:        "The type of `faas.invoked_region` is string",
	Check:        checkTypeFaasInvokedRegionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasInvokedRegionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.invoked_region")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasMaxMemoryv1250 = &rule.AttributeRule{
	Name:         "type.faas.max_memory",
	Title:        "The type of `faas.max_memory` is int",
	Check:        checkTypeFaasMaxMemoryv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasMaxMemoryv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.max_memory")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeFaasNamev1250 = &rule.AttributeRule{
	Name:         "type.faas.name",
	Title:        "The type of `faas.name` is string",
	Check:        checkTypeFaasNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasTimev1250 = &rule.AttributeRule{
	Name:         "type.faas.time",
	Title:        "The type of `faas.time` is string",
	Check:        checkTypeFaasTimev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasTimev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.time")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFaasVersionv1250 = &rule.AttributeRule{
	Name:         "type.faas.version",
	Title:        "The type of `faas.version` is string",
	Check:        checkTypeFaasVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFaasVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("faas.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFeatureFlagKeyv1250 = &rule.AttributeRule{
	Name:         "type.feature_flag.key",
	Title:        "The type of `feature_flag.key` is string",
	Check:        checkTypeFeatureFlagKeyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFeatureFlagKeyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("feature_flag.key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFeatureFlagProviderNamev1250 = &rule.AttributeRule{
	Name:         "type.feature_flag.provider_name",
	Title:        "The type of `feature_flag.provider_name` is string",
	Check:        checkTypeFeatureFlagProviderNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFeatureFlagProviderNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("feature_flag.provider_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFeatureFlagVariantv1250 = &rule.AttributeRule{
	Name:         "type.feature_flag.variant",
	Title:        "The type of `feature_flag.variant` is string",
	Check:        checkTypeFeatureFlagVariantv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFeatureFlagVariantv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("feature_flag.variant")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFileDirectoryv1250 = &rule.AttributeRule{
	Name:         "type.file.directory",
	Title:        "The type of `file.directory` is string",
	Check:        checkTypeFileDirectoryv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFileDirectoryv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("file.directory")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFileExtensionv1250 = &rule.AttributeRule{
	Name:         "type.file.extension",
	Title:        "The type of `file.extension` is string",
	Check:        checkTypeFileExtensionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFileExtensionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("file.extension")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFileNamev1250 = &rule.AttributeRule{
	Name:         "type.file.name",
	Title:        "The type of `file.name` is string",
	Check:        checkTypeFileNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFileNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("file.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFilePathv1250 = &rule.AttributeRule{
	Name:         "type.file.path",
	Title:        "The type of `file.path` is string",
	Check:        checkTypeFilePathv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFilePathv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("file.path")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeFileSizev1250 = &rule.AttributeRule{
	Name:         "type.file.size",
	Title:        "The type of `file.size` is int",
	Check:        checkTypeFileSizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeFileSizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("file.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeGcpCloudRunJobExecutionv1250 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.execution",
	Title:        "The type of `gcp.cloud_run.job.execution` is string",
	Check:        checkTypeGcpCloudRunJobExecutionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpCloudRunJobExecutionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.cloud_run.job.execution")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGcpCloudRunJobTaskIndexv1250 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.task_index",
	Title:        "The type of `gcp.cloud_run.job.task_index` is int",
	Check:        checkTypeGcpCloudRunJobTaskIndexv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpCloudRunJobTaskIndexv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.cloud_run.job.task_index")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeGcpGceInstanceHostnamev1250 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.hostname",
	Title:        "The type of `gcp.gce.instance.hostname` is string",
	Check:        checkTypeGcpGceInstanceHostnamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpGceInstanceHostnamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.gce.instance.hostname")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGcpGceInstanceNamev1250 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.name",
	Title:        "The type of `gcp.gce.instance.name` is string",
	Check:        checkTypeGcpGceInstanceNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGcpGceInstanceNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("gcp.gce.instance.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGraphqlDocumentv1250 = &rule.AttributeRule{
	Name:         "type.graphql.document",
	Title:        "The type of `graphql.document` is string",
	Check:        checkTypeGraphqlDocumentv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGraphqlDocumentv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("graphql.document")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeGraphqlOperationNamev1250 = &rule.AttributeRule{
	Name:         "type.graphql.operation.name",
	Title:        "The type of `graphql.operation.name` is string",
	Check:        checkTypeGraphqlOperationNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeGraphqlOperationNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("graphql.operation.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHerokuAppIdv1250 = &rule.AttributeRule{
	Name:         "type.heroku.app.id",
	Title:        "The type of `heroku.app.id` is string",
	Check:        checkTypeHerokuAppIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHerokuAppIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("heroku.app.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHerokuReleaseCommitv1250 = &rule.AttributeRule{
	Name:         "type.heroku.release.commit",
	Title:        "The type of `heroku.release.commit` is string",
	Check:        checkTypeHerokuReleaseCommitv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHerokuReleaseCommitv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("heroku.release.commit")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHerokuReleaseCreationTimestampv1250 = &rule.AttributeRule{
	Name:         "type.heroku.release.creation_timestamp",
	Title:        "The type of `heroku.release.creation_timestamp` is string",
	Check:        checkTypeHerokuReleaseCreationTimestampv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHerokuReleaseCreationTimestampv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("heroku.release.creation_timestamp")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuCacheL2Sizev1250 = &rule.AttributeRule{
	Name:         "type.host.cpu.cache.l2.size",
	Title:        "The type of `host.cpu.cache.l2.size` is int",
	Check:        checkTypeHostCpuCacheL2Sizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuCacheL2Sizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.cache.l2.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHostCpuFamilyv1250 = &rule.AttributeRule{
	Name:         "type.host.cpu.family",
	Title:        "The type of `host.cpu.family` is string",
	Check:        checkTypeHostCpuFamilyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuFamilyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.family")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuModelIdv1250 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.id",
	Title:        "The type of `host.cpu.model.id` is string",
	Check:        checkTypeHostCpuModelIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuModelIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.model.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuModelNamev1250 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.name",
	Title:        "The type of `host.cpu.model.name` is string",
	Check:        checkTypeHostCpuModelNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuModelNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.model.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuSteppingv1250 = &rule.AttributeRule{
	Name:         "type.host.cpu.stepping",
	Title:        "The type of `host.cpu.stepping` is string",
	Check:        checkTypeHostCpuSteppingv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuSteppingv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.stepping")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostCpuVendorIdv1250 = &rule.AttributeRule{
	Name:         "type.host.cpu.vendor.id",
	Title:        "The type of `host.cpu.vendor.id` is string",
	Check:        checkTypeHostCpuVendorIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostCpuVendorIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.cpu.vendor.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostIdv1250 = &rule.AttributeRule{
	Name:         "type.host.id",
	Title:        "The type of `host.id` is string",
	Check:        checkTypeHostIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostImageIdv1250 = &rule.AttributeRule{
	Name:         "type.host.image.id",
	Title:        "The type of `host.image.id` is string",
	Check:        checkTypeHostImageIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostImageIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.image.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostImageNamev1250 = &rule.AttributeRule{
	Name:         "type.host.image.name",
	Title:        "The type of `host.image.name` is string",
	Check:        checkTypeHostImageNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostImageNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.image.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostImageVersionv1250 = &rule.AttributeRule{
	Name:         "type.host.image.version",
	Title:        "The type of `host.image.version` is string",
	Check:        checkTypeHostImageVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostImageVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.image.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostIpv1250 = &rule.AttributeRule{
	Name:         "type.host.ip",
	Title:        "The type of `host.ip` is string[]",
	Check:        checkTypeHostIpv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostIpv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.ip")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeHostMacv1250 = &rule.AttributeRule{
	Name:         "type.host.mac",
	Title:        "The type of `host.mac` is string[]",
	Check:        checkTypeHostMacv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostMacv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.mac")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeHostNamev1250 = &rule.AttributeRule{
	Name:         "type.host.name",
	Title:        "The type of `host.name` is string",
	Check:        checkTypeHostNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHostTypev1250 = &rule.AttributeRule{
	Name:         "type.host.type",
	Title:        "The type of `host.type` is string",
	Check:        checkTypeHostTypev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHostTypev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("host.type")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpMethodv1250 = &rule.AttributeRule{
	Name:         "type.http.method",
	Title:        "The type of `http.method` is string",
	Check:        checkTypeHttpMethodv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpMethodv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.method")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpRequestBodySizev1250 = &rule.AttributeRule{
	Name:         "type.http.request.body.size",
	Title:        "The type of `http.request.body.size` is int",
	Check:        checkTypeHttpRequestBodySizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpRequestBodySizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request.body.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpRequestMethodOriginalv1250 = &rule.AttributeRule{
	Name:         "type.http.request.method_original",
	Title:        "The type of `http.request.method_original` is string",
	Check:        checkTypeHttpRequestMethodOriginalv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpRequestMethodOriginalv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request.method_original")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpRequestResendCountv1250 = &rule.AttributeRule{
	Name:         "type.http.request.resend_count",
	Title:        "The type of `http.request.resend_count` is int",
	Check:        checkTypeHttpRequestResendCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpRequestResendCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request.resend_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpRequestSizev1250 = &rule.AttributeRule{
	Name:         "type.http.request.size",
	Title:        "The type of `http.request.size` is int",
	Check:        checkTypeHttpRequestSizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpRequestSizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpRequestContentLengthv1250 = &rule.AttributeRule{
	Name:         "type.http.request_content_length",
	Title:        "The type of `http.request_content_length` is int",
	Check:        checkTypeHttpRequestContentLengthv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpRequestContentLengthv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.request_content_length")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpResponseBodySizev1250 = &rule.AttributeRule{
	Name:         "type.http.response.body.size",
	Title:        "The type of `http.response.body.size` is int",
	Check:        checkTypeHttpResponseBodySizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpResponseBodySizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.response.body.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpResponseSizev1250 = &rule.AttributeRule{
	Name:         "type.http.response.size",
	Title:        "The type of `http.response.size` is int",
	Check:        checkTypeHttpResponseSizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpResponseSizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.response.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpResponseStatusCodev1250 = &rule.AttributeRule{
	Name:         "type.http.response.status_code",
	Title:        "The type of `http.response.status_code` is int",
	Check:        checkTypeHttpResponseStatusCodev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpResponseStatusCodev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.response.status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpResponseContentLengthv1250 = &rule.AttributeRule{
	Name:         "type.http.response_content_length",
	Title:        "The type of `http.response_content_length` is int",
	Check:        checkTypeHttpResponseContentLengthv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpResponseContentLengthv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.response_content_length")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpRoutev1250 = &rule.AttributeRule{
	Name:         "type.http.route",
	Title:        "The type of `http.route` is string",
	Check:        checkTypeHttpRoutev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeHttpRoutev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.route")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpSchemev1250 = &rule.AttributeRule{
	Name:         "type.http.scheme",
	Title:        "The type of `http.scheme` is string",
	Check:        checkTypeHttpSchemev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpSchemev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.scheme")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpStatusCodev1250 = &rule.AttributeRule{
	Name:         "type.http.status_code",
	Title:        "The type of `http.status_code` is int",
	Check:        checkTypeHttpStatusCodev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpStatusCodev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.status_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeHttpTargetv1250 = &rule.AttributeRule{
	Name:         "type.http.target",
	Title:        "The type of `http.target` is string",
	Check:        checkTypeHttpTargetv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpTargetv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.target")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpUrlv1250 = &rule.AttributeRule{
	Name:         "type.http.url",
	Title:        "The type of `http.url` is string",
	Check:        checkTypeHttpUrlv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpUrlv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.url")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeHttpUserAgentv1250 = &rule.AttributeRule{
	Name:         "type.http.user_agent",
	Title:        "The type of `http.user_agent` is string",
	Check:        checkTypeHttpUserAgentv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeHttpUserAgentv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("http.user_agent")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmBufferPoolNamev1250 = &rule.AttributeRule{
	Name:         "type.jvm.buffer.pool.name",
	Title:        "The type of `jvm.buffer.pool.name` is string",
	Check:        checkTypeJvmBufferPoolNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeJvmBufferPoolNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.buffer.pool.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmGcActionv1250 = &rule.AttributeRule{
	Name:         "type.jvm.gc.action",
	Title:        "The type of `jvm.gc.action` is string",
	Check:        checkTypeJvmGcActionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmGcActionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.gc.action")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmGcNamev1250 = &rule.AttributeRule{
	Name:         "type.jvm.gc.name",
	Title:        "The type of `jvm.gc.name` is string",
	Check:        checkTypeJvmGcNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmGcNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.gc.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmMemoryPoolNamev1250 = &rule.AttributeRule{
	Name:         "type.jvm.memory.pool.name",
	Title:        "The type of `jvm.memory.pool.name` is string",
	Check:        checkTypeJvmMemoryPoolNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmMemoryPoolNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.memory.pool.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeJvmThreadDaemonv1250 = &rule.AttributeRule{
	Name:         "type.jvm.thread.daemon",
	Title:        "The type of `jvm.thread.daemon` is boolean",
	Check:        checkTypeJvmThreadDaemonv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeJvmThreadDaemonv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("jvm.thread.daemon")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeK8SClusterNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.name",
	Title:        "The type of `k8s.cluster.name` is string",
	Check:        checkTypeK8SClusterNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SClusterNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cluster.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SClusterUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.uid",
	Title:        "The type of `k8s.cluster.uid` is string",
	Check:        checkTypeK8SClusterUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SClusterUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cluster.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SContainerNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.container.name",
	Title:        "The type of `k8s.container.name` is string",
	Check:        checkTypeK8SContainerNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SContainerNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.container.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SContainerRestartCountv1250 = &rule.AttributeRule{
	Name:         "type.k8s.container.restart_count",
	Title:        "The type of `k8s.container.restart_count` is int",
	Check:        checkTypeK8SContainerRestartCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SContainerRestartCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.container.restart_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeK8SCronjobNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.name",
	Title:        "The type of `k8s.cronjob.name` is string",
	Check:        checkTypeK8SCronjobNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SCronjobNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cronjob.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SCronjobUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.uid",
	Title:        "The type of `k8s.cronjob.uid` is string",
	Check:        checkTypeK8SCronjobUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SCronjobUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.cronjob.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDaemonsetNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.name",
	Title:        "The type of `k8s.daemonset.name` is string",
	Check:        checkTypeK8SDaemonsetNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDaemonsetNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.daemonset.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDaemonsetUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.uid",
	Title:        "The type of `k8s.daemonset.uid` is string",
	Check:        checkTypeK8SDaemonsetUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDaemonsetUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.daemonset.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDeploymentNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.name",
	Title:        "The type of `k8s.deployment.name` is string",
	Check:        checkTypeK8SDeploymentNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDeploymentNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.deployment.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SDeploymentUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.uid",
	Title:        "The type of `k8s.deployment.uid` is string",
	Check:        checkTypeK8SDeploymentUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SDeploymentUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.deployment.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SJobNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.job.name",
	Title:        "The type of `k8s.job.name` is string",
	Check:        checkTypeK8SJobNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SJobNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.job.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SJobUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.job.uid",
	Title:        "The type of `k8s.job.uid` is string",
	Check:        checkTypeK8SJobUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SJobUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.job.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SNamespaceNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.namespace.name",
	Title:        "The type of `k8s.namespace.name` is string",
	Check:        checkTypeK8SNamespaceNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SNamespaceNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.namespace.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SNodeNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.node.name",
	Title:        "The type of `k8s.node.name` is string",
	Check:        checkTypeK8SNodeNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SNodeNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.node.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SNodeUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.node.uid",
	Title:        "The type of `k8s.node.uid` is string",
	Check:        checkTypeK8SNodeUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SNodeUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.node.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SPodNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.pod.name",
	Title:        "The type of `k8s.pod.name` is string",
	Check:        checkTypeK8SPodNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SPodNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.pod.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SPodUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.pod.uid",
	Title:        "The type of `k8s.pod.uid` is string",
	Check:        checkTypeK8SPodUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SPodUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.pod.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SReplicasetNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.name",
	Title:        "The type of `k8s.replicaset.name` is string",
	Check:        checkTypeK8SReplicasetNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SReplicasetNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.replicaset.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SReplicasetUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.uid",
	Title:        "The type of `k8s.replicaset.uid` is string",
	Check:        checkTypeK8SReplicasetUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SReplicasetUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.replicaset.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SStatefulsetNamev1250 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.name",
	Title:        "The type of `k8s.statefulset.name` is string",
	Check:        checkTypeK8SStatefulsetNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SStatefulsetNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.statefulset.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeK8SStatefulsetUidv1250 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.uid",
	Title:        "The type of `k8s.statefulset.uid` is string",
	Check:        checkTypeK8SStatefulsetUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeK8SStatefulsetUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("k8s.statefulset.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFileNamev1250 = &rule.AttributeRule{
	Name:         "type.log.file.name",
	Title:        "The type of `log.file.name` is string",
	Check:        checkTypeLogFileNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFileNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFileNameResolvedv1250 = &rule.AttributeRule{
	Name:         "type.log.file.name_resolved",
	Title:        "The type of `log.file.name_resolved` is string",
	Check:        checkTypeLogFileNameResolvedv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFileNameResolvedv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.name_resolved")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFilePathv1250 = &rule.AttributeRule{
	Name:         "type.log.file.path",
	Title:        "The type of `log.file.path` is string",
	Check:        checkTypeLogFilePathv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFilePathv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.path")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogFilePathResolvedv1250 = &rule.AttributeRule{
	Name:         "type.log.file.path_resolved",
	Title:        "The type of `log.file.path_resolved` is string",
	Check:        checkTypeLogFilePathResolvedv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogFilePathResolvedv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.file.path_resolved")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeLogRecordUidv1250 = &rule.AttributeRule{
	Name:         "type.log.record.uid",
	Title:        "The type of `log.record.uid` is string",
	Check:        checkTypeLogRecordUidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeLogRecordUidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("log.record.uid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessageCompressedSizev1250 = &rule.AttributeRule{
	Name:         "type.message.compressed_size",
	Title:        "The type of `message.compressed_size` is int",
	Check:        checkTypeMessageCompressedSizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessageCompressedSizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("message.compressed_size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessageIdv1250 = &rule.AttributeRule{
	Name:         "type.message.id",
	Title:        "The type of `message.id` is int",
	Check:        checkTypeMessageIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessageIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("message.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessageUncompressedSizev1250 = &rule.AttributeRule{
	Name:         "type.message.uncompressed_size",
	Title:        "The type of `message.uncompressed_size` is int",
	Check:        checkTypeMessageUncompressedSizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessageUncompressedSizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("message.uncompressed_size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingBatchMessageCountv1250 = &rule.AttributeRule{
	Name:         "type.messaging.batch.message_count",
	Title:        "The type of `messaging.batch.message_count` is int",
	Check:        checkTypeMessagingBatchMessageCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingBatchMessageCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.batch.message_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingClient_Idv1250 = &rule.AttributeRule{
	Name:         "type.messaging.client_id",
	Title:        "The type of `messaging.client_id` is string",
	Check:        checkTypeMessagingClient_Idv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingClient_Idv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.client_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingDestinationAnonymousv1250 = &rule.AttributeRule{
	Name:         "type.messaging.destination.anonymous",
	Title:        "The type of `messaging.destination.anonymous` is boolean",
	Check:        checkTypeMessagingDestinationAnonymousv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationAnonymousv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.anonymous")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingDestinationNamev1250 = &rule.AttributeRule{
	Name:         "type.messaging.destination.name",
	Title:        "The type of `messaging.destination.name` is string",
	Check:        checkTypeMessagingDestinationNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingDestinationPartitionIdv1250 = &rule.AttributeRule{
	Name:         "type.messaging.destination.partition.id",
	Title:        "The type of `messaging.destination.partition.id` is string",
	Check:        checkTypeMessagingDestinationPartitionIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationPartitionIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.partition.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingDestinationTemplatev1250 = &rule.AttributeRule{
	Name:         "type.messaging.destination.template",
	Title:        "The type of `messaging.destination.template` is string",
	Check:        checkTypeMessagingDestinationTemplatev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationTemplatev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.template")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingDestinationTemporaryv1250 = &rule.AttributeRule{
	Name:         "type.messaging.destination.temporary",
	Title:        "The type of `messaging.destination.temporary` is boolean",
	Check:        checkTypeMessagingDestinationTemporaryv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationTemporaryv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination.temporary")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingDestinationPublishAnonymousv1250 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.anonymous",
	Title:        "The type of `messaging.destination_publish.anonymous` is boolean",
	Check:        checkTypeMessagingDestinationPublishAnonymousv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationPublishAnonymousv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination_publish.anonymous")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingDestinationPublishNamev1250 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.name",
	Title:        "The type of `messaging.destination_publish.name` is string",
	Check:        checkTypeMessagingDestinationPublishNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingDestinationPublishNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.destination_publish.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingEventhubsConsumerGroupv1250 = &rule.AttributeRule{
	Name:         "type.messaging.eventhubs.consumer.group",
	Title:        "The type of `messaging.eventhubs.consumer.group` is string",
	Check:        checkTypeMessagingEventhubsConsumerGroupv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingEventhubsConsumerGroupv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.eventhubs.consumer.group")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingEventhubsMessageEnqueuedTimev1250 = &rule.AttributeRule{
	Name:         "type.messaging.eventhubs.message.enqueued_time",
	Title:        "The type of `messaging.eventhubs.message.enqueued_time` is int",
	Check:        checkTypeMessagingEventhubsMessageEnqueuedTimev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingEventhubsMessageEnqueuedTimev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.eventhubs.message.enqueued_time")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingGcpPubsubMessageOrderingKeyv1250 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ordering_key",
	Title:        "The type of `messaging.gcp_pubsub.message.ordering_key` is string",
	Check:        checkTypeMessagingGcpPubsubMessageOrderingKeyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingGcpPubsubMessageOrderingKeyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.gcp_pubsub.message.ordering_key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingKafkaConsumerGroupv1250 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.consumer.group",
	Title:        "The type of `messaging.kafka.consumer.group` is string",
	Check:        checkTypeMessagingKafkaConsumerGroupv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaConsumerGroupv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.consumer.group")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingKafkaDestinationPartitionv1250 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.destination.partition",
	Title:        "The type of `messaging.kafka.destination.partition` is int",
	Check:        checkTypeMessagingKafkaDestinationPartitionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaDestinationPartitionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.destination.partition")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingKafkaMessageKeyv1250 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.key",
	Title:        "The type of `messaging.kafka.message.key` is string",
	Check:        checkTypeMessagingKafkaMessageKeyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaMessageKeyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.message.key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingKafkaMessageOffsetv1250 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.offset",
	Title:        "The type of `messaging.kafka.message.offset` is int",
	Check:        checkTypeMessagingKafkaMessageOffsetv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaMessageOffsetv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.message.offset")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingKafkaMessageTombstonev1250 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.tombstone",
	Title:        "The type of `messaging.kafka.message.tombstone` is boolean",
	Check:        checkTypeMessagingKafkaMessageTombstonev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingKafkaMessageTombstonev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.kafka.message.tombstone")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeMessagingMessageBodySizev1250 = &rule.AttributeRule{
	Name:         "type.messaging.message.body.size",
	Title:        "The type of `messaging.message.body.size` is int",
	Check:        checkTypeMessagingMessageBodySizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageBodySizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.body.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingMessageConversationIdv1250 = &rule.AttributeRule{
	Name:         "type.messaging.message.conversation_id",
	Title:        "The type of `messaging.message.conversation_id` is string",
	Check:        checkTypeMessagingMessageConversationIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageConversationIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.conversation_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingMessageEnvelopeSizev1250 = &rule.AttributeRule{
	Name:         "type.messaging.message.envelope.size",
	Title:        "The type of `messaging.message.envelope.size` is int",
	Check:        checkTypeMessagingMessageEnvelopeSizev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageEnvelopeSizev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.envelope.size")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingMessageIdv1250 = &rule.AttributeRule{
	Name:         "type.messaging.message.id",
	Title:        "The type of `messaging.message.id` is string",
	Check:        checkTypeMessagingMessageIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingMessageIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.message.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRabbitmqDestinationRoutingKeyv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.destination.routing_key",
	Title:        "The type of `messaging.rabbitmq.destination.routing_key` is string",
	Check:        checkTypeMessagingRabbitmqDestinationRoutingKeyv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRabbitmqDestinationRoutingKeyv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rabbitmq.destination.routing_key")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRabbitmqMessageDeliveryTagv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.message.delivery_tag",
	Title:        "The type of `messaging.rabbitmq.message.delivery_tag` is int",
	Check:        checkTypeMessagingRabbitmqMessageDeliveryTagv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRabbitmqMessageDeliveryTagv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rabbitmq.message.delivery_tag")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingRocketmqClientGroupv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.client_group",
	Title:        "The type of `messaging.rocketmq.client_group` is string",
	Check:        checkTypeMessagingRocketmqClientGroupv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqClientGroupv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.client_group")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRocketmqMessageDelayTimeLevelv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delay_time_level",
	Title:        "The type of `messaging.rocketmq.message.delay_time_level` is int",
	Check:        checkTypeMessagingRocketmqMessageDelayTimeLevelv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageDelayTimeLevelv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.delay_time_level")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingRocketmqMessageDeliveryTimestampv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delivery_timestamp",
	Title:        "The type of `messaging.rocketmq.message.delivery_timestamp` is int",
	Check:        checkTypeMessagingRocketmqMessageDeliveryTimestampv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageDeliveryTimestampv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.delivery_timestamp")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingRocketmqMessageGroupv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.group",
	Title:        "The type of `messaging.rocketmq.message.group` is string",
	Check:        checkTypeMessagingRocketmqMessageGroupv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageGroupv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.group")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRocketmqMessageKeysv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.keys",
	Title:        "The type of `messaging.rocketmq.message.keys` is string[]",
	Check:        checkTypeMessagingRocketmqMessageKeysv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageKeysv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.keys")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeMessagingRocketmqMessageTagv1250 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.tag",
	Title:        "The type of `messaging.rocketmq.message.tag` is string",
	Check:        checkTypeMessagingRocketmqMessageTagv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqMessageTagv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.message.tag")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingRocketmqNamespacev1250 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.namespace",
	Title:        "The type of `messaging.rocketmq.namespace` is string",
	Check:        checkTypeMessagingRocketmqNamespacev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingRocketmqNamespacev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.rocketmq.namespace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingServicebusDestinationSubscriptionNamev1250 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.destination.subscription_name",
	Title:        "The type of `messaging.servicebus.destination.subscription_name` is string",
	Check:        checkTypeMessagingServicebusDestinationSubscriptionNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingServicebusDestinationSubscriptionNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.servicebus.destination.subscription_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeMessagingServicebusMessageDeliveryCountv1250 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.message.delivery_count",
	Title:        "The type of `messaging.servicebus.message.delivery_count` is int",
	Check:        checkTypeMessagingServicebusMessageDeliveryCountv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingServicebusMessageDeliveryCountv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.servicebus.message.delivery_count")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeMessagingServicebusMessageEnqueuedTimev1250 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.message.enqueued_time",
	Title:        "The type of `messaging.servicebus.message.enqueued_time` is int",
	Check:        checkTypeMessagingServicebusMessageEnqueuedTimev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeMessagingServicebusMessageEnqueuedTimev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("messaging.servicebus.message.enqueued_time")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetHostNamev1250 = &rule.AttributeRule{
	Name:         "type.net.host.name",
	Title:        "The type of `net.host.name` is string",
	Check:        checkTypeNetHostNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetHostNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.host.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetHostPortv1250 = &rule.AttributeRule{
	Name:         "type.net.host.port",
	Title:        "The type of `net.host.port` is int",
	Check:        checkTypeNetHostPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetHostPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.host.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetPeerNamev1250 = &rule.AttributeRule{
	Name:         "type.net.peer.name",
	Title:        "The type of `net.peer.name` is string",
	Check:        checkTypeNetPeerNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetPeerNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.peer.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetPeerPortv1250 = &rule.AttributeRule{
	Name:         "type.net.peer.port",
	Title:        "The type of `net.peer.port` is int",
	Check:        checkTypeNetPeerPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetPeerPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.peer.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetProtocolNamev1250 = &rule.AttributeRule{
	Name:         "type.net.protocol.name",
	Title:        "The type of `net.protocol.name` is string",
	Check:        checkTypeNetProtocolNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetProtocolNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.protocol.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetProtocolVersionv1250 = &rule.AttributeRule{
	Name:         "type.net.protocol.version",
	Title:        "The type of `net.protocol.version` is string",
	Check:        checkTypeNetProtocolVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetProtocolVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.protocol.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockHostAddrv1250 = &rule.AttributeRule{
	Name:         "type.net.sock.host.addr",
	Title:        "The type of `net.sock.host.addr` is string",
	Check:        checkTypeNetSockHostAddrv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockHostAddrv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.host.addr")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockHostPortv1250 = &rule.AttributeRule{
	Name:         "type.net.sock.host.port",
	Title:        "The type of `net.sock.host.port` is int",
	Check:        checkTypeNetSockHostPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockHostPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.host.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetSockPeerAddrv1250 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.addr",
	Title:        "The type of `net.sock.peer.addr` is string",
	Check:        checkTypeNetSockPeerAddrv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockPeerAddrv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.peer.addr")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockPeerNamev1250 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.name",
	Title:        "The type of `net.sock.peer.name` is string",
	Check:        checkTypeNetSockPeerNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockPeerNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.peer.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetSockPeerPortv1250 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.port",
	Title:        "The type of `net.sock.peer.port` is int",
	Check:        checkTypeNetSockPeerPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetSockPeerPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("net.sock.peer.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetworkCarrierIccv1250 = &rule.AttributeRule{
	Name:         "type.network.carrier.icc",
	Title:        "The type of `network.carrier.icc` is string",
	Check:        checkTypeNetworkCarrierIccv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierIccv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.icc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkCarrierMccv1250 = &rule.AttributeRule{
	Name:         "type.network.carrier.mcc",
	Title:        "The type of `network.carrier.mcc` is string",
	Check:        checkTypeNetworkCarrierMccv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierMccv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.mcc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkCarrierMncv1250 = &rule.AttributeRule{
	Name:         "type.network.carrier.mnc",
	Title:        "The type of `network.carrier.mnc` is string",
	Check:        checkTypeNetworkCarrierMncv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierMncv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.mnc")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkCarrierNamev1250 = &rule.AttributeRule{
	Name:         "type.network.carrier.name",
	Title:        "The type of `network.carrier.name` is string",
	Check:        checkTypeNetworkCarrierNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeNetworkCarrierNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.carrier.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkLocalAddressv1250 = &rule.AttributeRule{
	Name:         "type.network.local.address",
	Title:        "The type of `network.local.address` is string",
	Check:        checkTypeNetworkLocalAddressv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkLocalAddressv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.local.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkLocalPortv1250 = &rule.AttributeRule{
	Name:         "type.network.local.port",
	Title:        "The type of `network.local.port` is int",
	Check:        checkTypeNetworkLocalPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkLocalPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.local.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetworkPeerAddressv1250 = &rule.AttributeRule{
	Name:         "type.network.peer.address",
	Title:        "The type of `network.peer.address` is string",
	Check:        checkTypeNetworkPeerAddressv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkPeerAddressv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.peer.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkPeerPortv1250 = &rule.AttributeRule{
	Name:         "type.network.peer.port",
	Title:        "The type of `network.peer.port` is int",
	Check:        checkTypeNetworkPeerPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkPeerPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.peer.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeNetworkProtocolNamev1250 = &rule.AttributeRule{
	Name:         "type.network.protocol.name",
	Title:        "The type of `network.protocol.name` is string",
	Check:        checkTypeNetworkProtocolNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkProtocolNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.protocol.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeNetworkProtocolVersionv1250 = &rule.AttributeRule{
	Name:         "type.network.protocol.version",
	Title:        "The type of `network.protocol.version` is string",
	Check:        checkTypeNetworkProtocolVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeNetworkProtocolVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("network.protocol.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOciManifestDigestv1250 = &rule.AttributeRule{
	Name:         "type.oci.manifest.digest",
	Title:        "The type of `oci.manifest.digest` is string",
	Check:        checkTypeOciManifestDigestv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOciManifestDigestv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("oci.manifest.digest")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsBuildIdv1250 = &rule.AttributeRule{
	Name:         "type.os.build_id",
	Title:        "The type of `os.build_id` is string",
	Check:        checkTypeOsBuildIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsBuildIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.build_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsDescriptionv1250 = &rule.AttributeRule{
	Name:         "type.os.description",
	Title:        "The type of `os.description` is string",
	Check:        checkTypeOsDescriptionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsDescriptionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsNamev1250 = &rule.AttributeRule{
	Name:         "type.os.name",
	Title:        "The type of `os.name` is string",
	Check:        checkTypeOsNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOsVersionv1250 = &rule.AttributeRule{
	Name:         "type.os.version",
	Title:        "The type of `os.version` is string",
	Check:        checkTypeOsVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOsVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("os.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelLibraryNamev1250 = &rule.AttributeRule{
	Name:         "type.otel.library.name",
	Title:        "The type of `otel.library.name` is string",
	Check:        checkTypeOtelLibraryNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOtelLibraryNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.library.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelLibraryVersionv1250 = &rule.AttributeRule{
	Name:         "type.otel.library.version",
	Title:        "The type of `otel.library.version` is string",
	Check:        checkTypeOtelLibraryVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeOtelLibraryVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.library.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelScopeNamev1250 = &rule.AttributeRule{
	Name:         "type.otel.scope.name",
	Title:        "The type of `otel.scope.name` is string",
	Check:        checkTypeOtelScopeNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeOtelScopeNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.scope.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelScopeVersionv1250 = &rule.AttributeRule{
	Name:         "type.otel.scope.version",
	Title:        "The type of `otel.scope.version` is string",
	Check:        checkTypeOtelScopeVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeOtelScopeVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.scope.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeOtelStatusDescriptionv1250 = &rule.AttributeRule{
	Name:         "type.otel.status_description",
	Title:        "The type of `otel.status_description` is string",
	Check:        checkTypeOtelStatusDescriptionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeOtelStatusDescriptionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("otel.status_description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypePeerServicev1250 = &rule.AttributeRule{
	Name:         "type.peer.service",
	Title:        "The type of `peer.service` is string",
	Check:        checkTypePeerServicev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypePeerServicev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("peer.service")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypePoolNamev1250 = &rule.AttributeRule{
	Name:         "type.pool.name",
	Title:        "The type of `pool.name` is string",
	Check:        checkTypePoolNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypePoolNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("pool.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessCommandv1250 = &rule.AttributeRule{
	Name:         "type.process.command",
	Title:        "The type of `process.command` is string",
	Check:        checkTypeProcessCommandv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessCommandv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.command")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessCommandArgsv1250 = &rule.AttributeRule{
	Name:         "type.process.command_args",
	Title:        "The type of `process.command_args` is string[]",
	Check:        checkTypeProcessCommandArgsv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessCommandArgsv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.command_args")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeProcessCommandLinev1250 = &rule.AttributeRule{
	Name:         "type.process.command_line",
	Title:        "The type of `process.command_line` is string",
	Check:        checkTypeProcessCommandLinev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessCommandLinev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.command_line")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessExecutableNamev1250 = &rule.AttributeRule{
	Name:         "type.process.executable.name",
	Title:        "The type of `process.executable.name` is string",
	Check:        checkTypeProcessExecutableNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessExecutableNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.executable.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessExecutablePathv1250 = &rule.AttributeRule{
	Name:         "type.process.executable.path",
	Title:        "The type of `process.executable.path` is string",
	Check:        checkTypeProcessExecutablePathv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessExecutablePathv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.executable.path")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessOwnerv1250 = &rule.AttributeRule{
	Name:         "type.process.owner",
	Title:        "The type of `process.owner` is string",
	Check:        checkTypeProcessOwnerv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessOwnerv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.owner")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessParentPidv1250 = &rule.AttributeRule{
	Name:         "type.process.parent_pid",
	Title:        "The type of `process.parent_pid` is int",
	Check:        checkTypeProcessParentPidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessParentPidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.parent_pid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeProcessPidv1250 = &rule.AttributeRule{
	Name:         "type.process.pid",
	Title:        "The type of `process.pid` is int",
	Check:        checkTypeProcessPidv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessPidv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.pid")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeProcessRuntimeDescriptionv1250 = &rule.AttributeRule{
	Name:         "type.process.runtime.description",
	Title:        "The type of `process.runtime.description` is string",
	Check:        checkTypeProcessRuntimeDescriptionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessRuntimeDescriptionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.runtime.description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessRuntimeNamev1250 = &rule.AttributeRule{
	Name:         "type.process.runtime.name",
	Title:        "The type of `process.runtime.name` is string",
	Check:        checkTypeProcessRuntimeNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessRuntimeNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.runtime.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeProcessRuntimeVersionv1250 = &rule.AttributeRule{
	Name:         "type.process.runtime.version",
	Title:        "The type of `process.runtime.version` is string",
	Check:        checkTypeProcessRuntimeVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeProcessRuntimeVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("process.runtime.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcJsonrpcErrorCodev1250 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_code",
	Title:        "The type of `rpc.jsonrpc.error_code` is int",
	Check:        checkTypeRpcJsonrpcErrorCodev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcErrorCodev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.error_code")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeRpcJsonrpcErrorMessagev1250 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_message",
	Title:        "The type of `rpc.jsonrpc.error_message` is string",
	Check:        checkTypeRpcJsonrpcErrorMessagev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcErrorMessagev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.error_message")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcJsonrpcRequestIdv1250 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.request_id",
	Title:        "The type of `rpc.jsonrpc.request_id` is string",
	Check:        checkTypeRpcJsonrpcRequestIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcRequestIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.request_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcJsonrpcVersionv1250 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.version",
	Title:        "The type of `rpc.jsonrpc.version` is string",
	Check:        checkTypeRpcJsonrpcVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcJsonrpcVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.jsonrpc.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcMethodv1250 = &rule.AttributeRule{
	Name:         "type.rpc.method",
	Title:        "The type of `rpc.method` is string",
	Check:        checkTypeRpcMethodv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcMethodv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.method")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeRpcServicev1250 = &rule.AttributeRule{
	Name:         "type.rpc.service",
	Title:        "The type of `rpc.service` is string",
	Check:        checkTypeRpcServicev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeRpcServicev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("rpc.service")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServerAddressv1250 = &rule.AttributeRule{
	Name:         "type.server.address",
	Title:        "The type of `server.address` is string",
	Check:        checkTypeServerAddressv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeServerAddressv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("server.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServerPortv1250 = &rule.AttributeRule{
	Name:         "type.server.port",
	Title:        "The type of `server.port` is int",
	Check:        checkTypeServerPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeServerPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("server.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeServiceInstanceIdv1250 = &rule.AttributeRule{
	Name:         "type.service.instance.id",
	Title:        "The type of `service.instance.id` is string",
	Check:        checkTypeServiceInstanceIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeServiceInstanceIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.instance.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServiceNamev1250 = &rule.AttributeRule{
	Name:         "type.service.name",
	Title:        "The type of `service.name` is string",
	Check:        checkTypeServiceNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeServiceNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServiceNamespacev1250 = &rule.AttributeRule{
	Name:         "type.service.namespace",
	Title:        "The type of `service.namespace` is string",
	Check:        checkTypeServiceNamespacev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeServiceNamespacev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.namespace")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeServiceVersionv1250 = &rule.AttributeRule{
	Name:         "type.service.version",
	Title:        "The type of `service.version` is string",
	Check:        checkTypeServiceVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeServiceVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("service.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSessionIdv1250 = &rule.AttributeRule{
	Name:         "type.session.id",
	Title:        "The type of `session.id` is string",
	Check:        checkTypeSessionIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSessionIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("session.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSessionPreviousIdv1250 = &rule.AttributeRule{
	Name:         "type.session.previous_id",
	Title:        "The type of `session.previous_id` is string",
	Check:        checkTypeSessionPreviousIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSessionPreviousIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("session.previous_id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSourceAddressv1250 = &rule.AttributeRule{
	Name:         "type.source.address",
	Title:        "The type of `source.address` is string",
	Check:        checkTypeSourceAddressv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSourceAddressv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("source.address")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSourcePortv1250 = &rule.AttributeRule{
	Name:         "type.source.port",
	Title:        "The type of `source.port` is int",
	Check:        checkTypeSourcePortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSourcePortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("source.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeSystemCpuLogicalNumberv1250 = &rule.AttributeRule{
	Name:         "type.system.cpu.logical_number",
	Title:        "The type of `system.cpu.logical_number` is int",
	Check:        checkTypeSystemCpuLogicalNumberv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemCpuLogicalNumberv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.cpu.logical_number")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeSystemDevicev1250 = &rule.AttributeRule{
	Name:         "type.system.device",
	Title:        "The type of `system.device` is string",
	Check:        checkTypeSystemDevicev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemDevicev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.device")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSystemFilesystemModev1250 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mode",
	Title:        "The type of `system.filesystem.mode` is string",
	Check:        checkTypeSystemFilesystemModev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemFilesystemModev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.filesystem.mode")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeSystemFilesystemMountpointv1250 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mountpoint",
	Title:        "The type of `system.filesystem.mountpoint` is string",
	Check:        checkTypeSystemFilesystemMountpointv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeSystemFilesystemMountpointv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("system.filesystem.mountpoint")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetryDistroNamev1250 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.name",
	Title:        "The type of `telemetry.distro.name` is string",
	Check:        checkTypeTelemetryDistroNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTelemetryDistroNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.distro.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetryDistroVersionv1250 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.version",
	Title:        "The type of `telemetry.distro.version` is string",
	Check:        checkTypeTelemetryDistroVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTelemetryDistroVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.distro.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetrySdkNamev1250 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.name",
	Title:        "The type of `telemetry.sdk.name` is string",
	Check:        checkTypeTelemetrySdkNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeTelemetrySdkNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.sdk.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTelemetrySdkVersionv1250 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.version",
	Title:        "The type of `telemetry.sdk.version` is string",
	Check:        checkTypeTelemetrySdkVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeTelemetrySdkVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("telemetry.sdk.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeThreadIdv1250 = &rule.AttributeRule{
	Name:         "type.thread.id",
	Title:        "The type of `thread.id` is int",
	Check:        checkTypeThreadIdv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeThreadIdv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("thread.id")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeThreadNamev1250 = &rule.AttributeRule{
	Name:         "type.thread.name",
	Title:        "The type of `thread.name` is string",
	Check:        checkTypeThreadNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeThreadNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("thread.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsCipherv1250 = &rule.AttributeRule{
	Name:         "type.tls.cipher",
	Title:        "The type of `tls.cipher` is string",
	Check:        checkTypeTlsCipherv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsCipherv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.cipher")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientCertificatev1250 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate",
	Title:        "The type of `tls.client.certificate` is string",
	Check:        checkTypeTlsClientCertificatev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientCertificatev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.certificate")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientCertificateChainv1250 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate_chain",
	Title:        "The type of `tls.client.certificate_chain` is string[]",
	Check:        checkTypeTlsClientCertificateChainv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientCertificateChainv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.certificate_chain")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeTlsClientHashMd5v1250 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.md5",
	Title:        "The type of `tls.client.hash.md5` is string",
	Check:        checkTypeTlsClientHashMd5v1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientHashMd5v1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.hash.md5")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientHashSha1v1250 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha1",
	Title:        "The type of `tls.client.hash.sha1` is string",
	Check:        checkTypeTlsClientHashSha1v1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientHashSha1v1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.hash.sha1")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientHashSha256v1250 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha256",
	Title:        "The type of `tls.client.hash.sha256` is string",
	Check:        checkTypeTlsClientHashSha256v1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientHashSha256v1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.hash.sha256")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientIssuerv1250 = &rule.AttributeRule{
	Name:         "type.tls.client.issuer",
	Title:        "The type of `tls.client.issuer` is string",
	Check:        checkTypeTlsClientIssuerv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientIssuerv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.issuer")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientJa3v1250 = &rule.AttributeRule{
	Name:         "type.tls.client.ja3",
	Title:        "The type of `tls.client.ja3` is string",
	Check:        checkTypeTlsClientJa3v1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientJa3v1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.ja3")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientNotAfterv1250 = &rule.AttributeRule{
	Name:         "type.tls.client.not_after",
	Title:        "The type of `tls.client.not_after` is string",
	Check:        checkTypeTlsClientNotAfterv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientNotAfterv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.not_after")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientNotBeforev1250 = &rule.AttributeRule{
	Name:         "type.tls.client.not_before",
	Title:        "The type of `tls.client.not_before` is string",
	Check:        checkTypeTlsClientNotBeforev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientNotBeforev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.not_before")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientServerNamev1250 = &rule.AttributeRule{
	Name:         "type.tls.client.server_name",
	Title:        "The type of `tls.client.server_name` is string",
	Check:        checkTypeTlsClientServerNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientServerNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.server_name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientSubjectv1250 = &rule.AttributeRule{
	Name:         "type.tls.client.subject",
	Title:        "The type of `tls.client.subject` is string",
	Check:        checkTypeTlsClientSubjectv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientSubjectv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.subject")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsClientSupportedCiphersv1250 = &rule.AttributeRule{
	Name:         "type.tls.client.supported_ciphers",
	Title:        "The type of `tls.client.supported_ciphers` is string[]",
	Check:        checkTypeTlsClientSupportedCiphersv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsClientSupportedCiphersv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.client.supported_ciphers")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeTlsCurvev1250 = &rule.AttributeRule{
	Name:         "type.tls.curve",
	Title:        "The type of `tls.curve` is string",
	Check:        checkTypeTlsCurvev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsCurvev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.curve")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsEstablishedv1250 = &rule.AttributeRule{
	Name:         "type.tls.established",
	Title:        "The type of `tls.established` is boolean",
	Check:        checkTypeTlsEstablishedv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsEstablishedv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.established")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeTlsNextProtocolv1250 = &rule.AttributeRule{
	Name:         "type.tls.next_protocol",
	Title:        "The type of `tls.next_protocol` is string",
	Check:        checkTypeTlsNextProtocolv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsNextProtocolv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.next_protocol")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsProtocolVersionv1250 = &rule.AttributeRule{
	Name:         "type.tls.protocol.version",
	Title:        "The type of `tls.protocol.version` is string",
	Check:        checkTypeTlsProtocolVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsProtocolVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.protocol.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsResumedv1250 = &rule.AttributeRule{
	Name:         "type.tls.resumed",
	Title:        "The type of `tls.resumed` is boolean",
	Check:        checkTypeTlsResumedv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsResumedv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.resumed")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeBool
}

var ruleTypeTlsServerCertificatev1250 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate",
	Title:        "The type of `tls.server.certificate` is string",
	Check:        checkTypeTlsServerCertificatev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerCertificatev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.certificate")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerCertificateChainv1250 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate_chain",
	Title:        "The type of `tls.server.certificate_chain` is string[]",
	Check:        checkTypeTlsServerCertificateChainv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerCertificateChainv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.certificate_chain")
  if !ok {
    return true
  }
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
}

var ruleTypeTlsServerHashMd5v1250 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.md5",
	Title:        "The type of `tls.server.hash.md5` is string",
	Check:        checkTypeTlsServerHashMd5v1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerHashMd5v1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.hash.md5")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerHashSha1v1250 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha1",
	Title:        "The type of `tls.server.hash.sha1` is string",
	Check:        checkTypeTlsServerHashSha1v1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerHashSha1v1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.hash.sha1")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerHashSha256v1250 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha256",
	Title:        "The type of `tls.server.hash.sha256` is string",
	Check:        checkTypeTlsServerHashSha256v1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerHashSha256v1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.hash.sha256")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerIssuerv1250 = &rule.AttributeRule{
	Name:         "type.tls.server.issuer",
	Title:        "The type of `tls.server.issuer` is string",
	Check:        checkTypeTlsServerIssuerv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerIssuerv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.issuer")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerJa3Sv1250 = &rule.AttributeRule{
	Name:         "type.tls.server.ja3s",
	Title:        "The type of `tls.server.ja3s` is string",
	Check:        checkTypeTlsServerJa3Sv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerJa3Sv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.ja3s")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerNotAfterv1250 = &rule.AttributeRule{
	Name:         "type.tls.server.not_after",
	Title:        "The type of `tls.server.not_after` is string",
	Check:        checkTypeTlsServerNotAfterv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerNotAfterv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.not_after")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerNotBeforev1250 = &rule.AttributeRule{
	Name:         "type.tls.server.not_before",
	Title:        "The type of `tls.server.not_before` is string",
	Check:        checkTypeTlsServerNotBeforev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerNotBeforev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.not_before")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeTlsServerSubjectv1250 = &rule.AttributeRule{
	Name:         "type.tls.server.subject",
	Title:        "The type of `tls.server.subject` is string",
	Check:        checkTypeTlsServerSubjectv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeTlsServerSubjectv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("tls.server.subject")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlDomainv1250 = &rule.AttributeRule{
	Name:         "type.url.domain",
	Title:        "The type of `url.domain` is string",
	Check:        checkTypeUrlDomainv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUrlDomainv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.domain")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlExtensionv1250 = &rule.AttributeRule{
	Name:         "type.url.extension",
	Title:        "The type of `url.extension` is string",
	Check:        checkTypeUrlExtensionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUrlExtensionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.extension")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlFragmentv1250 = &rule.AttributeRule{
	Name:         "type.url.fragment",
	Title:        "The type of `url.fragment` is string",
	Check:        checkTypeUrlFragmentv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlFragmentv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.fragment")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlFullv1250 = &rule.AttributeRule{
	Name:         "type.url.full",
	Title:        "The type of `url.full` is string",
	Check:        checkTypeUrlFullv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlFullv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.full")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlOriginalv1250 = &rule.AttributeRule{
	Name:         "type.url.original",
	Title:        "The type of `url.original` is string",
	Check:        checkTypeUrlOriginalv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUrlOriginalv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.original")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlPathv1250 = &rule.AttributeRule{
	Name:         "type.url.path",
	Title:        "The type of `url.path` is string",
	Check:        checkTypeUrlPathv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlPathv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.path")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlPortv1250 = &rule.AttributeRule{
	Name:         "type.url.port",
	Title:        "The type of `url.port` is int",
	Check:        checkTypeUrlPortv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUrlPortv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.port")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeInt
}

var ruleTypeUrlQueryv1250 = &rule.AttributeRule{
	Name:         "type.url.query",
	Title:        "The type of `url.query` is string",
	Check:        checkTypeUrlQueryv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlQueryv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.query")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlRegisteredDomainv1250 = &rule.AttributeRule{
	Name:         "type.url.registered_domain",
	Title:        "The type of `url.registered_domain` is string",
	Check:        checkTypeUrlRegisteredDomainv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUrlRegisteredDomainv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.registered_domain")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlSchemev1250 = &rule.AttributeRule{
	Name:         "type.url.scheme",
	Title:        "The type of `url.scheme` is string",
	Check:        checkTypeUrlSchemev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUrlSchemev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.scheme")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlSubdomainv1250 = &rule.AttributeRule{
	Name:         "type.url.subdomain",
	Title:        "The type of `url.subdomain` is string",
	Check:        checkTypeUrlSubdomainv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUrlSubdomainv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.subdomain")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUrlTopLevelDomainv1250 = &rule.AttributeRule{
	Name:         "type.url.top_level_domain",
	Title:        "The type of `url.top_level_domain` is string",
	Check:        checkTypeUrlTopLevelDomainv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUrlTopLevelDomainv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("url.top_level_domain")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUserAgentNamev1250 = &rule.AttributeRule{
	Name:         "type.user_agent.name",
	Title:        "The type of `user_agent.name` is string",
	Check:        checkTypeUserAgentNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUserAgentNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("user_agent.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUserAgentOriginalv1250 = &rule.AttributeRule{
	Name:         "type.user_agent.original",
	Title:        "The type of `user_agent.original` is string",
	Check:        checkTypeUserAgentOriginalv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
}

func checkTypeUserAgentOriginalv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("user_agent.original")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeUserAgentVersionv1250 = &rule.AttributeRule{
	Name:         "type.user_agent.version",
	Title:        "The type of `user_agent.version` is string",
	Check:        checkTypeUserAgentVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeUserAgentVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("user_agent.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeWebengineDescriptionv1250 = &rule.AttributeRule{
	Name:         "type.webengine.description",
	Title:        "The type of `webengine.description` is string",
	Check:        checkTypeWebengineDescriptionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeWebengineDescriptionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("webengine.description")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeWebengineNamev1250 = &rule.AttributeRule{
	Name:         "type.webengine.name",
	Title:        "The type of `webengine.name` is string",
	Check:        checkTypeWebengineNamev1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeWebengineNamev1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("webengine.name")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

var ruleTypeWebengineVersionv1250 = &rule.AttributeRule{
	Name:         "type.webengine.version",
	Title:        "The type of `webengine.version` is string",
	Check:        checkTypeWebengineVersionv1250,
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
}

func checkTypeWebengineVersionv1250(a *rule.SignalAttributes) bool {
  val, ok := a.Get("webengine.version")
  if !ok {
    return true
  }
  return val.Type() == pcommon.ValueTypeStr
}

