// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
)

var RulesTypev1270 = []*rule.AttributeRule{
	ruleTypeAndroidOsApiLevelv1270,
	ruleTypeArtifactAttestationFilenamev1270,
	ruleTypeArtifactAttestationHashv1270,
	ruleTypeArtifactAttestationIdv1270,
	ruleTypeArtifactFilenamev1270,
	ruleTypeArtifactHashv1270,
	ruleTypeArtifactPurlv1270,
	ruleTypeArtifactVersionv1270,
	ruleTypeAspnetcoreDiagnosticsHandlerTypev1270,
	ruleTypeAspnetcoreRateLimitingPolicyv1270,
	ruleTypeAspnetcoreRequestIsUnhandledv1270,
	ruleTypeAspnetcoreRoutingIsFallbackv1270,
	ruleTypeAwsDynamodbAttributeDefinitionsv1270,
	ruleTypeAwsDynamodbAttributesToGetv1270,
	ruleTypeAwsDynamodbConsistentReadv1270,
	ruleTypeAwsDynamodbConsumedCapacityv1270,
	ruleTypeAwsDynamodbCountv1270,
	ruleTypeAwsDynamodbExclusiveStartTablev1270,
	ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1270,
	ruleTypeAwsDynamodbGlobalSecondaryIndexesv1270,
	ruleTypeAwsDynamodbIndexNamev1270,
	ruleTypeAwsDynamodbItemCollectionMetricsv1270,
	ruleTypeAwsDynamodbLimitv1270,
	ruleTypeAwsDynamodbLocalSecondaryIndexesv1270,
	ruleTypeAwsDynamodbProjectionv1270,
	ruleTypeAwsDynamodbProvisionedReadCapacityv1270,
	ruleTypeAwsDynamodbProvisionedWriteCapacityv1270,
	ruleTypeAwsDynamodbScanForwardv1270,
	ruleTypeAwsDynamodbScannedCountv1270,
	ruleTypeAwsDynamodbSegmentv1270,
	ruleTypeAwsDynamodbSelectv1270,
	ruleTypeAwsDynamodbTableCountv1270,
	ruleTypeAwsDynamodbTableNamesv1270,
	ruleTypeAwsDynamodbTotalSegmentsv1270,
	ruleTypeAwsEcsClusterArnv1270,
	ruleTypeAwsEcsContainerArnv1270,
	ruleTypeAwsEcsTaskArnv1270,
	ruleTypeAwsEcsTaskFamilyv1270,
	ruleTypeAwsEcsTaskIdv1270,
	ruleTypeAwsEcsTaskRevisionv1270,
	ruleTypeAwsEksClusterArnv1270,
	ruleTypeAwsLambdaInvokedArnv1270,
	ruleTypeAwsLogGroupArnsv1270,
	ruleTypeAwsLogGroupNamesv1270,
	ruleTypeAwsLogStreamArnsv1270,
	ruleTypeAwsLogStreamNamesv1270,
	ruleTypeAwsRequestIdv1270,
	ruleTypeAwsS3Bucketv1270,
	ruleTypeAwsS3CopySourcev1270,
	ruleTypeAwsS3Deletev1270,
	ruleTypeAwsS3Keyv1270,
	ruleTypeAwsS3PartNumberv1270,
	ruleTypeAwsS3UploadIdv1270,
	ruleTypeAzServiceRequestIdv1270,
	ruleTypeBrowserBrandsv1270,
	ruleTypeBrowserLanguagev1270,
	ruleTypeBrowserMobilev1270,
	ruleTypeBrowserPlatformv1270,
	ruleTypeCicdPipelineNamev1270,
	ruleTypeCicdPipelineRunIdv1270,
	ruleTypeCicdPipelineTaskNamev1270,
	ruleTypeCicdPipelineTaskRunIdv1270,
	ruleTypeCicdPipelineTaskRunUrlFullv1270,
	ruleTypeClientAddressv1270,
	ruleTypeClientPortv1270,
	ruleTypeCloudAccountIdv1270,
	ruleTypeCloudAvailabilityZonev1270,
	ruleTypeCloudRegionv1270,
	ruleTypeCloudResourceIdv1270,
	ruleTypeCloudeventsEventIdv1270,
	ruleTypeCloudeventsEventSourcev1270,
	ruleTypeCloudeventsEventSpecVersionv1270,
	ruleTypeCloudeventsEventSubjectv1270,
	ruleTypeCloudeventsEventTypev1270,
	ruleTypeCodeColumnv1270,
	ruleTypeCodeFilepathv1270,
	ruleTypeCodeFunctionv1270,
	ruleTypeCodeLinenov1270,
	ruleTypeCodeNamespacev1270,
	ruleTypeCodeStacktracev1270,
	ruleTypeContainerCommandv1270,
	ruleTypeContainerCommandArgsv1270,
	ruleTypeContainerCommandLinev1270,
	ruleTypeContainerIdv1270,
	ruleTypeContainerImageIdv1270,
	ruleTypeContainerImageNamev1270,
	ruleTypeContainerImageRepoDigestsv1270,
	ruleTypeContainerImageTagsv1270,
	ruleTypeContainerNamev1270,
	ruleTypeContainerRuntimev1270,
	ruleTypeDbCassandraCoordinatorDcv1270,
	ruleTypeDbCassandraCoordinatorIdv1270,
	ruleTypeDbCassandraIdempotencev1270,
	ruleTypeDbCassandraPageSizev1270,
	ruleTypeDbCassandraSpeculativeExecutionCountv1270,
	ruleTypeDbCassandraTablev1270,
	ruleTypeDbClientConnectionPoolNamev1270,
	ruleTypeDbClientConnectionsPoolNamev1270,
	ruleTypeDbCollectionNamev1270,
	ruleTypeDbConnectionStringv1270,
	ruleTypeDbCosmosdbClientIdv1270,
	ruleTypeDbCosmosdbContainerv1270,
	ruleTypeDbCosmosdbRequestChargev1270,
	ruleTypeDbCosmosdbRequestContentLengthv1270,
	ruleTypeDbCosmosdbStatusCodev1270,
	ruleTypeDbCosmosdbSubStatusCodev1270,
	ruleTypeDbElasticsearchClusterNamev1270,
	ruleTypeDbElasticsearchNodeNamev1270,
	ruleTypeDbInstanceIdv1270,
	ruleTypeDbJdbcDriverClassnamev1270,
	ruleTypeDbMongodbCollectionv1270,
	ruleTypeDbMssqlInstanceNamev1270,
	ruleTypeDbNamev1270,
	ruleTypeDbNamespacev1270,
	ruleTypeDbOperationv1270,
	ruleTypeDbOperationBatchSizev1270,
	ruleTypeDbOperationNamev1270,
	ruleTypeDbQueryTextv1270,
	ruleTypeDbRedisDatabaseIndexv1270,
	ruleTypeDbSqlTablev1270,
	ruleTypeDbStatementv1270,
	ruleTypeDbUserv1270,
	ruleTypeDeploymentEnvironmentv1270,
	ruleTypeDeploymentEnvironmentNamev1270,
	ruleTypeDeploymentIdv1270,
	ruleTypeDeploymentNamev1270,
	ruleTypeDestinationAddressv1270,
	ruleTypeDestinationPortv1270,
	ruleTypeDeviceIdv1270,
	ruleTypeDeviceManufacturerv1270,
	ruleTypeDeviceModelIdentifierv1270,
	ruleTypeDeviceModelNamev1270,
	ruleTypeDnsQuestionNamev1270,
	ruleTypeEnduserIdv1270,
	ruleTypeEnduserRolev1270,
	ruleTypeEnduserScopev1270,
	ruleTypeEventNamev1270,
	ruleTypeExceptionEscapedv1270,
	ruleTypeExceptionMessagev1270,
	ruleTypeExceptionStacktracev1270,
	ruleTypeExceptionTypev1270,
	ruleTypeFaasColdstartv1270,
	ruleTypeFaasCronv1270,
	ruleTypeFaasDocumentCollectionv1270,
	ruleTypeFaasDocumentNamev1270,
	ruleTypeFaasDocumentTimev1270,
	ruleTypeFaasInstancev1270,
	ruleTypeFaasInvocationIdv1270,
	ruleTypeFaasInvokedNamev1270,
	ruleTypeFaasInvokedRegionv1270,
	ruleTypeFaasMaxMemoryv1270,
	ruleTypeFaasNamev1270,
	ruleTypeFaasTimev1270,
	ruleTypeFaasVersionv1270,
	ruleTypeFeatureFlagKeyv1270,
	ruleTypeFeatureFlagProviderNamev1270,
	ruleTypeFeatureFlagVariantv1270,
	ruleTypeFileDirectoryv1270,
	ruleTypeFileExtensionv1270,
	ruleTypeFileNamev1270,
	ruleTypeFilePathv1270,
	ruleTypeFileSizev1270,
	ruleTypeGcpClientServicev1270,
	ruleTypeGcpCloudRunJobExecutionv1270,
	ruleTypeGcpCloudRunJobTaskIndexv1270,
	ruleTypeGcpGceInstanceHostnamev1270,
	ruleTypeGcpGceInstanceNamev1270,
	ruleTypeGenAiCompletionv1270,
	ruleTypeGenAiPromptv1270,
	ruleTypeGenAiRequestFrequencyPenaltyv1270,
	ruleTypeGenAiRequestMaxTokensv1270,
	ruleTypeGenAiRequestModelv1270,
	ruleTypeGenAiRequestPresencePenaltyv1270,
	ruleTypeGenAiRequestStopSequencesv1270,
	ruleTypeGenAiRequestTemperaturev1270,
	ruleTypeGenAiRequestTopKv1270,
	ruleTypeGenAiRequestTopPv1270,
	ruleTypeGenAiResponseFinishReasonsv1270,
	ruleTypeGenAiResponseIdv1270,
	ruleTypeGenAiResponseModelv1270,
	ruleTypeGenAiUsageCompletionTokensv1270,
	ruleTypeGenAiUsageInputTokensv1270,
	ruleTypeGenAiUsageOutputTokensv1270,
	ruleTypeGenAiUsagePromptTokensv1270,
	ruleTypeGraphqlDocumentv1270,
	ruleTypeGraphqlOperationNamev1270,
	ruleTypeHerokuAppIdv1270,
	ruleTypeHerokuReleaseCommitv1270,
	ruleTypeHerokuReleaseCreationTimestampv1270,
	ruleTypeHostCpuCacheL2Sizev1270,
	ruleTypeHostCpuFamilyv1270,
	ruleTypeHostCpuModelIdv1270,
	ruleTypeHostCpuModelNamev1270,
	ruleTypeHostCpuSteppingv1270,
	ruleTypeHostCpuVendorIdv1270,
	ruleTypeHostIdv1270,
	ruleTypeHostImageIdv1270,
	ruleTypeHostImageNamev1270,
	ruleTypeHostImageVersionv1270,
	ruleTypeHostIpv1270,
	ruleTypeHostMacv1270,
	ruleTypeHostNamev1270,
	ruleTypeHostTypev1270,
	ruleTypeHttpClientIpv1270,
	ruleTypeHttpHostv1270,
	ruleTypeHttpMethodv1270,
	ruleTypeHttpRequestBodySizev1270,
	ruleTypeHttpRequestMethodOriginalv1270,
	ruleTypeHttpRequestResendCountv1270,
	ruleTypeHttpRequestSizev1270,
	ruleTypeHttpRequestContentLengthv1270,
	ruleTypeHttpRequestContentLengthUncompressedv1270,
	ruleTypeHttpResponseBodySizev1270,
	ruleTypeHttpResponseSizev1270,
	ruleTypeHttpResponseStatusCodev1270,
	ruleTypeHttpResponseContentLengthv1270,
	ruleTypeHttpResponseContentLengthUncompressedv1270,
	ruleTypeHttpRoutev1270,
	ruleTypeHttpSchemev1270,
	ruleTypeHttpServerNamev1270,
	ruleTypeHttpStatusCodev1270,
	ruleTypeHttpTargetv1270,
	ruleTypeHttpUrlv1270,
	ruleTypeHttpUserAgentv1270,
	ruleTypeJvmBufferPoolNamev1270,
	ruleTypeJvmGcActionv1270,
	ruleTypeJvmGcNamev1270,
	ruleTypeJvmMemoryPoolNamev1270,
	ruleTypeJvmThreadDaemonv1270,
	ruleTypeK8SClusterNamev1270,
	ruleTypeK8SClusterUidv1270,
	ruleTypeK8SContainerNamev1270,
	ruleTypeK8SContainerRestartCountv1270,
	ruleTypeK8SContainerStatusLastTerminatedReasonv1270,
	ruleTypeK8SCronjobNamev1270,
	ruleTypeK8SCronjobUidv1270,
	ruleTypeK8SDaemonsetNamev1270,
	ruleTypeK8SDaemonsetUidv1270,
	ruleTypeK8SDeploymentNamev1270,
	ruleTypeK8SDeploymentUidv1270,
	ruleTypeK8SJobNamev1270,
	ruleTypeK8SJobUidv1270,
	ruleTypeK8SNamespaceNamev1270,
	ruleTypeK8SNodeNamev1270,
	ruleTypeK8SNodeUidv1270,
	ruleTypeK8SPodNamev1270,
	ruleTypeK8SPodUidv1270,
	ruleTypeK8SReplicasetNamev1270,
	ruleTypeK8SReplicasetUidv1270,
	ruleTypeK8SStatefulsetNamev1270,
	ruleTypeK8SStatefulsetUidv1270,
	ruleTypeLogFileNamev1270,
	ruleTypeLogFileNameResolvedv1270,
	ruleTypeLogFilePathv1270,
	ruleTypeLogFilePathResolvedv1270,
	ruleTypeLogRecordOriginalv1270,
	ruleTypeLogRecordUidv1270,
	ruleTypeMessageCompressedSizev1270,
	ruleTypeMessageIdv1270,
	ruleTypeMessageUncompressedSizev1270,
	ruleTypeMessagingBatchMessageCountv1270,
	ruleTypeMessagingClientIdv1270,
	ruleTypeMessagingClient_Idv1270,
	ruleTypeMessagingConsumerGroupNamev1270,
	ruleTypeMessagingDestinationAnonymousv1270,
	ruleTypeMessagingDestinationNamev1270,
	ruleTypeMessagingDestinationPartitionIdv1270,
	ruleTypeMessagingDestinationSubscriptionNamev1270,
	ruleTypeMessagingDestinationTemplatev1270,
	ruleTypeMessagingDestinationTemporaryv1270,
	ruleTypeMessagingDestinationPublishAnonymousv1270,
	ruleTypeMessagingDestinationPublishNamev1270,
	ruleTypeMessagingEventhubsConsumerGroupv1270,
	ruleTypeMessagingEventhubsMessageEnqueuedTimev1270,
	ruleTypeMessagingGcpPubsubMessageAckDeadlinev1270,
	ruleTypeMessagingGcpPubsubMessageAckIdv1270,
	ruleTypeMessagingGcpPubsubMessageDeliveryAttemptv1270,
	ruleTypeMessagingGcpPubsubMessageOrderingKeyv1270,
	ruleTypeMessagingKafkaConsumerGroupv1270,
	ruleTypeMessagingKafkaDestinationPartitionv1270,
	ruleTypeMessagingKafkaMessageKeyv1270,
	ruleTypeMessagingKafkaMessageOffsetv1270,
	ruleTypeMessagingKafkaMessageTombstonev1270,
	ruleTypeMessagingKafkaOffsetv1270,
	ruleTypeMessagingMessageBodySizev1270,
	ruleTypeMessagingMessageConversationIdv1270,
	ruleTypeMessagingMessageEnvelopeSizev1270,
	ruleTypeMessagingMessageIdv1270,
	ruleTypeMessagingOperationv1270,
	ruleTypeMessagingOperationNamev1270,
	ruleTypeMessagingRabbitmqDestinationRoutingKeyv1270,
	ruleTypeMessagingRabbitmqMessageDeliveryTagv1270,
	ruleTypeMessagingRocketmqClientGroupv1270,
	ruleTypeMessagingRocketmqMessageDelayTimeLevelv1270,
	ruleTypeMessagingRocketmqMessageDeliveryTimestampv1270,
	ruleTypeMessagingRocketmqMessageGroupv1270,
	ruleTypeMessagingRocketmqMessageKeysv1270,
	ruleTypeMessagingRocketmqMessageTagv1270,
	ruleTypeMessagingRocketmqNamespacev1270,
	ruleTypeMessagingServicebusDestinationSubscriptionNamev1270,
	ruleTypeMessagingServicebusMessageDeliveryCountv1270,
	ruleTypeMessagingServicebusMessageEnqueuedTimev1270,
	ruleTypeNetHostIpv1270,
	ruleTypeNetHostNamev1270,
	ruleTypeNetHostPortv1270,
	ruleTypeNetPeerIpv1270,
	ruleTypeNetPeerNamev1270,
	ruleTypeNetPeerPortv1270,
	ruleTypeNetProtocolNamev1270,
	ruleTypeNetProtocolVersionv1270,
	ruleTypeNetSockHostAddrv1270,
	ruleTypeNetSockHostPortv1270,
	ruleTypeNetSockPeerAddrv1270,
	ruleTypeNetSockPeerNamev1270,
	ruleTypeNetSockPeerPortv1270,
	ruleTypeNetworkCarrierIccv1270,
	ruleTypeNetworkCarrierMccv1270,
	ruleTypeNetworkCarrierMncv1270,
	ruleTypeNetworkCarrierNamev1270,
	ruleTypeNetworkLocalAddressv1270,
	ruleTypeNetworkLocalPortv1270,
	ruleTypeNetworkPeerAddressv1270,
	ruleTypeNetworkPeerPortv1270,
	ruleTypeNetworkProtocolNamev1270,
	ruleTypeNetworkProtocolVersionv1270,
	ruleTypeOciManifestDigestv1270,
	ruleTypeOsBuildIdv1270,
	ruleTypeOsDescriptionv1270,
	ruleTypeOsNamev1270,
	ruleTypeOsVersionv1270,
	ruleTypeOtelLibraryNamev1270,
	ruleTypeOtelLibraryVersionv1270,
	ruleTypeOtelScopeNamev1270,
	ruleTypeOtelScopeVersionv1270,
	ruleTypeOtelStatusDescriptionv1270,
	ruleTypePeerServicev1270,
	ruleTypePoolNamev1270,
	ruleTypeProcessCommandv1270,
	ruleTypeProcessCommandArgsv1270,
	ruleTypeProcessCommandLinev1270,
	ruleTypeProcessCreationTimev1270,
	ruleTypeProcessExecutableNamev1270,
	ruleTypeProcessExecutablePathv1270,
	ruleTypeProcessExitCodev1270,
	ruleTypeProcessExitTimev1270,
	ruleTypeProcessGroupLeaderPidv1270,
	ruleTypeProcessInteractivev1270,
	ruleTypeProcessOwnerv1270,
	ruleTypeProcessParentPidv1270,
	ruleTypeProcessPidv1270,
	ruleTypeProcessRealUserIdv1270,
	ruleTypeProcessRealUserNamev1270,
	ruleTypeProcessRuntimeDescriptionv1270,
	ruleTypeProcessRuntimeNamev1270,
	ruleTypeProcessRuntimeVersionv1270,
	ruleTypeProcessSavedUserIdv1270,
	ruleTypeProcessSavedUserNamev1270,
	ruleTypeProcessSessionLeaderPidv1270,
	ruleTypeProcessUserIdv1270,
	ruleTypeProcessUserNamev1270,
	ruleTypeProcessVpidv1270,
	ruleTypeRpcJsonrpcErrorCodev1270,
	ruleTypeRpcJsonrpcErrorMessagev1270,
	ruleTypeRpcJsonrpcRequestIdv1270,
	ruleTypeRpcJsonrpcVersionv1270,
	ruleTypeRpcMessageCompressedSizev1270,
	ruleTypeRpcMessageIdv1270,
	ruleTypeRpcMessageUncompressedSizev1270,
	ruleTypeRpcMethodv1270,
	ruleTypeRpcServicev1270,
	ruleTypeServerAddressv1270,
	ruleTypeServerPortv1270,
	ruleTypeServiceInstanceIdv1270,
	ruleTypeServiceNamev1270,
	ruleTypeServiceNamespacev1270,
	ruleTypeServiceVersionv1270,
	ruleTypeSessionIdv1270,
	ruleTypeSessionPreviousIdv1270,
	ruleTypeSourceAddressv1270,
	ruleTypeSourcePortv1270,
	ruleTypeSystemCpuLogicalNumberv1270,
	ruleTypeSystemDevicev1270,
	ruleTypeSystemFilesystemModev1270,
	ruleTypeSystemFilesystemMountpointv1270,
	ruleTypeTelemetryDistroNamev1270,
	ruleTypeTelemetryDistroVersionv1270,
	ruleTypeTelemetrySdkNamev1270,
	ruleTypeTelemetrySdkVersionv1270,
	ruleTypeTestCaseNamev1270,
	ruleTypeTestSuiteNamev1270,
	ruleTypeThreadIdv1270,
	ruleTypeThreadNamev1270,
	ruleTypeTlsCipherv1270,
	ruleTypeTlsClientCertificatev1270,
	ruleTypeTlsClientCertificateChainv1270,
	ruleTypeTlsClientHashMd5v1270,
	ruleTypeTlsClientHashSha1v1270,
	ruleTypeTlsClientHashSha256v1270,
	ruleTypeTlsClientIssuerv1270,
	ruleTypeTlsClientJa3v1270,
	ruleTypeTlsClientNotAfterv1270,
	ruleTypeTlsClientNotBeforev1270,
	ruleTypeTlsClientServerNamev1270,
	ruleTypeTlsClientSubjectv1270,
	ruleTypeTlsClientSupportedCiphersv1270,
	ruleTypeTlsCurvev1270,
	ruleTypeTlsEstablishedv1270,
	ruleTypeTlsNextProtocolv1270,
	ruleTypeTlsProtocolVersionv1270,
	ruleTypeTlsResumedv1270,
	ruleTypeTlsServerCertificatev1270,
	ruleTypeTlsServerCertificateChainv1270,
	ruleTypeTlsServerHashMd5v1270,
	ruleTypeTlsServerHashSha1v1270,
	ruleTypeTlsServerHashSha256v1270,
	ruleTypeTlsServerIssuerv1270,
	ruleTypeTlsServerJa3Sv1270,
	ruleTypeTlsServerNotAfterv1270,
	ruleTypeTlsServerNotBeforev1270,
	ruleTypeTlsServerSubjectv1270,
	ruleTypeUrlDomainv1270,
	ruleTypeUrlExtensionv1270,
	ruleTypeUrlFragmentv1270,
	ruleTypeUrlFullv1270,
	ruleTypeUrlOriginalv1270,
	ruleTypeUrlPathv1270,
	ruleTypeUrlPortv1270,
	ruleTypeUrlQueryv1270,
	ruleTypeUrlRegisteredDomainv1270,
	ruleTypeUrlSchemev1270,
	ruleTypeUrlSubdomainv1270,
	ruleTypeUrlTemplatev1270,
	ruleTypeUrlTopLevelDomainv1270,
	ruleTypeUserEmailv1270,
	ruleTypeUserFullNamev1270,
	ruleTypeUserHashv1270,
	ruleTypeUserIdv1270,
	ruleTypeUserNamev1270,
	ruleTypeUserRolesv1270,
	ruleTypeUserAgentNamev1270,
	ruleTypeUserAgentOriginalv1270,
	ruleTypeUserAgentVersionv1270,
	ruleTypeVcsRepositoryChangeIdv1270,
	ruleTypeVcsRepositoryChangeTitlev1270,
	ruleTypeVcsRepositoryRefNamev1270,
	ruleTypeVcsRepositoryRefRevisionv1270,
	ruleTypeVcsRepositoryUrlFullv1270,
	ruleTypeWebengineDescriptionv1270,
	ruleTypeWebengineNamev1270,
	ruleTypeWebengineVersionv1270,
}

var ruleTypeAndroidOsApiLevelv1270 = &rule.AttributeRule{
	Name:         "type.android.os.api_level",
	Title:        "The type of `android.os.api_level` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "android.os.api_level") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeArtifactAttestationFilenamev1270 = &rule.AttributeRule{
	Name:         "type.artifact.attestation.filename",
	Title:        "The type of `artifact.attestation.filename` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "artifact.attestation.filename") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeArtifactAttestationHashv1270 = &rule.AttributeRule{
	Name:         "type.artifact.attestation.hash",
	Title:        "The type of `artifact.attestation.hash` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "artifact.attestation.hash") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeArtifactAttestationIdv1270 = &rule.AttributeRule{
	Name:         "type.artifact.attestation.id",
	Title:        "The type of `artifact.attestation.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "artifact.attestation.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeArtifactFilenamev1270 = &rule.AttributeRule{
	Name:         "type.artifact.filename",
	Title:        "The type of `artifact.filename` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "artifact.filename") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeArtifactHashv1270 = &rule.AttributeRule{
	Name:         "type.artifact.hash",
	Title:        "The type of `artifact.hash` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "artifact.hash") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeArtifactPurlv1270 = &rule.AttributeRule{
	Name:         "type.artifact.purl",
	Title:        "The type of `artifact.purl` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "artifact.purl") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeArtifactVersionv1270 = &rule.AttributeRule{
	Name:         "type.artifact.version",
	Title:        "The type of `artifact.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "artifact.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAspnetcoreDiagnosticsHandlerTypev1270 = &rule.AttributeRule{
	Name:         "type.aspnetcore.diagnostics.handler.type",
	Title:        "The type of `aspnetcore.diagnostics.handler.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aspnetcore.diagnostics.handler.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAspnetcoreRateLimitingPolicyv1270 = &rule.AttributeRule{
	Name:         "type.aspnetcore.rate_limiting.policy",
	Title:        "The type of `aspnetcore.rate_limiting.policy` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aspnetcore.rate_limiting.policy") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAspnetcoreRequestIsUnhandledv1270 = &rule.AttributeRule{
	Name:         "type.aspnetcore.request.is_unhandled",
	Title:        "The type of `aspnetcore.request.is_unhandled` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aspnetcore.request.is_unhandled") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAspnetcoreRoutingIsFallbackv1270 = &rule.AttributeRule{
	Name:         "type.aspnetcore.routing.is_fallback",
	Title:        "The type of `aspnetcore.routing.is_fallback` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aspnetcore.routing.is_fallback") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbAttributeDefinitionsv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attribute_definitions",
	Title:        "The type of `aws.dynamodb.attribute_definitions` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.attribute_definitions") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbAttributesToGetv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.attributes_to_get",
	Title:        "The type of `aws.dynamodb.attributes_to_get` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.attributes_to_get") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbConsistentReadv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consistent_read",
	Title:        "The type of `aws.dynamodb.consistent_read` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aws.dynamodb.consistent_read") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbConsumedCapacityv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.consumed_capacity",
	Title:        "The type of `aws.dynamodb.consumed_capacity` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.consumed_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbCountv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.count",
	Title:        "The type of `aws.dynamodb.count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbExclusiveStartTablev1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.exclusive_start_table",
	Title:        "The type of `aws.dynamodb.exclusive_start_table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.exclusive_start_table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexUpdatesv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_index_updates",
	Title:        "The type of `aws.dynamodb.global_secondary_index_updates` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.global_secondary_index_updates") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbGlobalSecondaryIndexesv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.global_secondary_indexes",
	Title:        "The type of `aws.dynamodb.global_secondary_indexes` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.global_secondary_indexes") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbIndexNamev1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.index_name",
	Title:        "The type of `aws.dynamodb.index_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.index_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbItemCollectionMetricsv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.item_collection_metrics",
	Title:        "The type of `aws.dynamodb.item_collection_metrics` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.item_collection_metrics") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbLimitv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.limit",
	Title:        "The type of `aws.dynamodb.limit` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.limit") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbLocalSecondaryIndexesv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.local_secondary_indexes",
	Title:        "The type of `aws.dynamodb.local_secondary_indexes` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.local_secondary_indexes") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbProjectionv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.projection",
	Title:        "The type of `aws.dynamodb.projection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.projection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbProvisionedReadCapacityv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_read_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_read_capacity` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "aws.dynamodb.provisioned_read_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbProvisionedWriteCapacityv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.provisioned_write_capacity",
	Title:        "The type of `aws.dynamodb.provisioned_write_capacity` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "aws.dynamodb.provisioned_write_capacity") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbScanForwardv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scan_forward",
	Title:        "The type of `aws.dynamodb.scan_forward` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "aws.dynamodb.scan_forward") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbScannedCountv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.scanned_count",
	Title:        "The type of `aws.dynamodb.scanned_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.scanned_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbSegmentv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.segment",
	Title:        "The type of `aws.dynamodb.segment` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.segment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbSelectv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.select",
	Title:        "The type of `aws.dynamodb.select` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.dynamodb.select") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbTableCountv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_count",
	Title:        "The type of `aws.dynamodb.table_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.table_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbTableNamesv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.table_names",
	Title:        "The type of `aws.dynamodb.table_names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.dynamodb.table_names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsDynamodbTotalSegmentsv1270 = &rule.AttributeRule{
	Name:         "type.aws.dynamodb.total_segments",
	Title:        "The type of `aws.dynamodb.total_segments` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.dynamodb.total_segments") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsEcsClusterArnv1270 = &rule.AttributeRule{
	Name:         "type.aws.ecs.cluster.arn",
	Title:        "The type of `aws.ecs.cluster.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.cluster.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsEcsContainerArnv1270 = &rule.AttributeRule{
	Name:         "type.aws.ecs.container.arn",
	Title:        "The type of `aws.ecs.container.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.container.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsEcsTaskArnv1270 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.arn",
	Title:        "The type of `aws.ecs.task.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsEcsTaskFamilyv1270 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.family",
	Title:        "The type of `aws.ecs.task.family` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsEcsTaskIdv1270 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.id",
	Title:        "The type of `aws.ecs.task.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsEcsTaskRevisionv1270 = &rule.AttributeRule{
	Name:         "type.aws.ecs.task.revision",
	Title:        "The type of `aws.ecs.task.revision` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.ecs.task.revision") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsEksClusterArnv1270 = &rule.AttributeRule{
	Name:         "type.aws.eks.cluster.arn",
	Title:        "The type of `aws.eks.cluster.arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.eks.cluster.arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsLambdaInvokedArnv1270 = &rule.AttributeRule{
	Name:         "type.aws.lambda.invoked_arn",
	Title:        "The type of `aws.lambda.invoked_arn` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.lambda.invoked_arn") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsLogGroupArnsv1270 = &rule.AttributeRule{
	Name:         "type.aws.log.group.arns",
	Title:        "The type of `aws.log.group.arns` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.group.arns") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsLogGroupNamesv1270 = &rule.AttributeRule{
	Name:         "type.aws.log.group.names",
	Title:        "The type of `aws.log.group.names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.group.names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsLogStreamArnsv1270 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.arns",
	Title:        "The type of `aws.log.stream.arns` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.stream.arns") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsLogStreamNamesv1270 = &rule.AttributeRule{
	Name:         "type.aws.log.stream.names",
	Title:        "The type of `aws.log.stream.names` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "aws.log.stream.names") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsRequestIdv1270 = &rule.AttributeRule{
	Name:         "type.aws.request_id",
	Title:        "The type of `aws.request_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.request_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsS3Bucketv1270 = &rule.AttributeRule{
	Name:         "type.aws.s3.bucket",
	Title:        "The type of `aws.s3.bucket` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.bucket") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsS3CopySourcev1270 = &rule.AttributeRule{
	Name:         "type.aws.s3.copy_source",
	Title:        "The type of `aws.s3.copy_source` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.copy_source") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsS3Deletev1270 = &rule.AttributeRule{
	Name:         "type.aws.s3.delete",
	Title:        "The type of `aws.s3.delete` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.delete") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsS3Keyv1270 = &rule.AttributeRule{
	Name:         "type.aws.s3.key",
	Title:        "The type of `aws.s3.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsS3PartNumberv1270 = &rule.AttributeRule{
	Name:         "type.aws.s3.part_number",
	Title:        "The type of `aws.s3.part_number` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "aws.s3.part_number") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAwsS3UploadIdv1270 = &rule.AttributeRule{
	Name:         "type.aws.s3.upload_id",
	Title:        "The type of `aws.s3.upload_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "aws.s3.upload_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeAzServiceRequestIdv1270 = &rule.AttributeRule{
	Name:         "type.az.service_request_id",
	Title:        "The type of `az.service_request_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "az.service_request_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeBrowserBrandsv1270 = &rule.AttributeRule{
	Name:         "type.browser.brands",
	Title:        "The type of `browser.brands` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "browser.brands") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeBrowserLanguagev1270 = &rule.AttributeRule{
	Name:         "type.browser.language",
	Title:        "The type of `browser.language` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "browser.language") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeBrowserMobilev1270 = &rule.AttributeRule{
	Name:         "type.browser.mobile",
	Title:        "The type of `browser.mobile` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "browser.mobile") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeBrowserPlatformv1270 = &rule.AttributeRule{
	Name:         "type.browser.platform",
	Title:        "The type of `browser.platform` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "browser.platform") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCicdPipelineNamev1270 = &rule.AttributeRule{
	Name:         "type.cicd.pipeline.name",
	Title:        "The type of `cicd.pipeline.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cicd.pipeline.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCicdPipelineRunIdv1270 = &rule.AttributeRule{
	Name:         "type.cicd.pipeline.run.id",
	Title:        "The type of `cicd.pipeline.run.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cicd.pipeline.run.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCicdPipelineTaskNamev1270 = &rule.AttributeRule{
	Name:         "type.cicd.pipeline.task.name",
	Title:        "The type of `cicd.pipeline.task.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cicd.pipeline.task.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCicdPipelineTaskRunIdv1270 = &rule.AttributeRule{
	Name:         "type.cicd.pipeline.task.run.id",
	Title:        "The type of `cicd.pipeline.task.run.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cicd.pipeline.task.run.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCicdPipelineTaskRunUrlFullv1270 = &rule.AttributeRule{
	Name:         "type.cicd.pipeline.task.run.url.full",
	Title:        "The type of `cicd.pipeline.task.run.url.full` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cicd.pipeline.task.run.url.full") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeClientAddressv1270 = &rule.AttributeRule{
	Name:         "type.client.address",
	Title:        "The type of `client.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "client.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeClientPortv1270 = &rule.AttributeRule{
	Name:         "type.client.port",
	Title:        "The type of `client.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "client.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudAccountIdv1270 = &rule.AttributeRule{
	Name:         "type.cloud.account.id",
	Title:        "The type of `cloud.account.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.account.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudAvailabilityZonev1270 = &rule.AttributeRule{
	Name:         "type.cloud.availability_zone",
	Title:        "The type of `cloud.availability_zone` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.availability_zone") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudRegionv1270 = &rule.AttributeRule{
	Name:         "type.cloud.region",
	Title:        "The type of `cloud.region` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.region") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudResourceIdv1270 = &rule.AttributeRule{
	Name:         "type.cloud.resource_id",
	Title:        "The type of `cloud.resource_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloud.resource_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudeventsEventIdv1270 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_id",
	Title:        "The type of `cloudevents.event_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudeventsEventSourcev1270 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_source",
	Title:        "The type of `cloudevents.event_source` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_source") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudeventsEventSpecVersionv1270 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_spec_version",
	Title:        "The type of `cloudevents.event_spec_version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_spec_version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudeventsEventSubjectv1270 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_subject",
	Title:        "The type of `cloudevents.event_subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCloudeventsEventTypev1270 = &rule.AttributeRule{
	Name:         "type.cloudevents.event_type",
	Title:        "The type of `cloudevents.event_type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "cloudevents.event_type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCodeColumnv1270 = &rule.AttributeRule{
	Name:         "type.code.column",
	Title:        "The type of `code.column` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "code.column") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCodeFilepathv1270 = &rule.AttributeRule{
	Name:         "type.code.filepath",
	Title:        "The type of `code.filepath` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.filepath") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCodeFunctionv1270 = &rule.AttributeRule{
	Name:         "type.code.function",
	Title:        "The type of `code.function` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.function") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCodeLinenov1270 = &rule.AttributeRule{
	Name:         "type.code.lineno",
	Title:        "The type of `code.lineno` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "code.lineno") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCodeNamespacev1270 = &rule.AttributeRule{
	Name:         "type.code.namespace",
	Title:        "The type of `code.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeCodeStacktracev1270 = &rule.AttributeRule{
	Name:         "type.code.stacktrace",
	Title:        "The type of `code.stacktrace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "code.stacktrace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerCommandv1270 = &rule.AttributeRule{
	Name:         "type.container.command",
	Title:        "The type of `container.command` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.command") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerCommandArgsv1270 = &rule.AttributeRule{
	Name:         "type.container.command_args",
	Title:        "The type of `container.command_args` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.command_args") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerCommandLinev1270 = &rule.AttributeRule{
	Name:         "type.container.command_line",
	Title:        "The type of `container.command_line` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.command_line") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerIdv1270 = &rule.AttributeRule{
	Name:         "type.container.id",
	Title:        "The type of `container.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerImageIdv1270 = &rule.AttributeRule{
	Name:         "type.container.image.id",
	Title:        "The type of `container.image.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.image.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerImageNamev1270 = &rule.AttributeRule{
	Name:         "type.container.image.name",
	Title:        "The type of `container.image.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.image.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerImageRepoDigestsv1270 = &rule.AttributeRule{
	Name:         "type.container.image.repo_digests",
	Title:        "The type of `container.image.repo_digests` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.image.repo_digests") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerImageTagsv1270 = &rule.AttributeRule{
	Name:         "type.container.image.tags",
	Title:        "The type of `container.image.tags` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "container.image.tags") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerNamev1270 = &rule.AttributeRule{
	Name:         "type.container.name",
	Title:        "The type of `container.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeContainerRuntimev1270 = &rule.AttributeRule{
	Name:         "type.container.runtime",
	Title:        "The type of `container.runtime` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "container.runtime") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCassandraCoordinatorDcv1270 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.dc",
	Title:        "The type of `db.cassandra.coordinator.dc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.coordinator.dc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCassandraCoordinatorIdv1270 = &rule.AttributeRule{
	Name:         "type.db.cassandra.coordinator.id",
	Title:        "The type of `db.cassandra.coordinator.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.coordinator.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCassandraIdempotencev1270 = &rule.AttributeRule{
	Name:         "type.db.cassandra.idempotence",
	Title:        "The type of `db.cassandra.idempotence` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "db.cassandra.idempotence") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCassandraPageSizev1270 = &rule.AttributeRule{
	Name:         "type.db.cassandra.page_size",
	Title:        "The type of `db.cassandra.page_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cassandra.page_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCassandraSpeculativeExecutionCountv1270 = &rule.AttributeRule{
	Name:         "type.db.cassandra.speculative_execution_count",
	Title:        "The type of `db.cassandra.speculative_execution_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cassandra.speculative_execution_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCassandraTablev1270 = &rule.AttributeRule{
	Name:         "type.db.cassandra.table",
	Title:        "The type of `db.cassandra.table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cassandra.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbClientConnectionPoolNamev1270 = &rule.AttributeRule{
	Name:         "type.db.client.connection.pool.name",
	Title:        "The type of `db.client.connection.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.client.connection.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbClientConnectionsPoolNamev1270 = &rule.AttributeRule{
	Name:         "type.db.client.connections.pool.name",
	Title:        "The type of `db.client.connections.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.client.connections.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCollectionNamev1270 = &rule.AttributeRule{
	Name:         "type.db.collection.name",
	Title:        "The type of `db.collection.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.collection.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbConnectionStringv1270 = &rule.AttributeRule{
	Name:         "type.db.connection_string",
	Title:        "The type of `db.connection_string` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.connection_string") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCosmosdbClientIdv1270 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.client_id",
	Title:        "The type of `db.cosmosdb.client_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cosmosdb.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCosmosdbContainerv1270 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.container",
	Title:        "The type of `db.cosmosdb.container` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.cosmosdb.container") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCosmosdbRequestChargev1270 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_charge",
	Title:        "The type of `db.cosmosdb.request_charge` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "db.cosmosdb.request_charge") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCosmosdbRequestContentLengthv1270 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.request_content_length",
	Title:        "The type of `db.cosmosdb.request_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCosmosdbStatusCodev1270 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.status_code",
	Title:        "The type of `db.cosmosdb.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbCosmosdbSubStatusCodev1270 = &rule.AttributeRule{
	Name:         "type.db.cosmosdb.sub_status_code",
	Title:        "The type of `db.cosmosdb.sub_status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.cosmosdb.sub_status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbElasticsearchClusterNamev1270 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.cluster.name",
	Title:        "The type of `db.elasticsearch.cluster.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.elasticsearch.cluster.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbElasticsearchNodeNamev1270 = &rule.AttributeRule{
	Name:         "type.db.elasticsearch.node.name",
	Title:        "The type of `db.elasticsearch.node.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.elasticsearch.node.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbInstanceIdv1270 = &rule.AttributeRule{
	Name:         "type.db.instance.id",
	Title:        "The type of `db.instance.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbJdbcDriverClassnamev1270 = &rule.AttributeRule{
	Name:         "type.db.jdbc.driver_classname",
	Title:        "The type of `db.jdbc.driver_classname` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.jdbc.driver_classname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbMongodbCollectionv1270 = &rule.AttributeRule{
	Name:         "type.db.mongodb.collection",
	Title:        "The type of `db.mongodb.collection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.mongodb.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbMssqlInstanceNamev1270 = &rule.AttributeRule{
	Name:         "type.db.mssql.instance_name",
	Title:        "The type of `db.mssql.instance_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.mssql.instance_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbNamev1270 = &rule.AttributeRule{
	Name:         "type.db.name",
	Title:        "The type of `db.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbNamespacev1270 = &rule.AttributeRule{
	Name:         "type.db.namespace",
	Title:        "The type of `db.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbOperationv1270 = &rule.AttributeRule{
	Name:         "type.db.operation",
	Title:        "The type of `db.operation` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbOperationBatchSizev1270 = &rule.AttributeRule{
	Name:         "type.db.operation.batch.size",
	Title:        "The type of `db.operation.batch.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.operation.batch.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbOperationNamev1270 = &rule.AttributeRule{
	Name:         "type.db.operation.name",
	Title:        "The type of `db.operation.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.operation.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbQueryTextv1270 = &rule.AttributeRule{
	Name:         "type.db.query.text",
	Title:        "The type of `db.query.text` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.query.text") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbRedisDatabaseIndexv1270 = &rule.AttributeRule{
	Name:         "type.db.redis.database_index",
	Title:        "The type of `db.redis.database_index` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "db.redis.database_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbSqlTablev1270 = &rule.AttributeRule{
	Name:         "type.db.sql.table",
	Title:        "The type of `db.sql.table` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.sql.table") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbStatementv1270 = &rule.AttributeRule{
	Name:         "type.db.statement",
	Title:        "The type of `db.statement` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.statement") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDbUserv1270 = &rule.AttributeRule{
	Name:         "type.db.user",
	Title:        "The type of `db.user` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "db.user") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeploymentEnvironmentv1270 = &rule.AttributeRule{
	Name:         "type.deployment.environment",
	Title:        "The type of `deployment.environment` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "deployment.environment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeploymentEnvironmentNamev1270 = &rule.AttributeRule{
	Name:         "type.deployment.environment.name",
	Title:        "The type of `deployment.environment.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "deployment.environment.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeploymentIdv1270 = &rule.AttributeRule{
	Name:         "type.deployment.id",
	Title:        "The type of `deployment.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "deployment.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeploymentNamev1270 = &rule.AttributeRule{
	Name:         "type.deployment.name",
	Title:        "The type of `deployment.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "deployment.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDestinationAddressv1270 = &rule.AttributeRule{
	Name:         "type.destination.address",
	Title:        "The type of `destination.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "destination.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDestinationPortv1270 = &rule.AttributeRule{
	Name:         "type.destination.port",
	Title:        "The type of `destination.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "destination.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeviceIdv1270 = &rule.AttributeRule{
	Name:         "type.device.id",
	Title:        "The type of `device.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeviceManufacturerv1270 = &rule.AttributeRule{
	Name:         "type.device.manufacturer",
	Title:        "The type of `device.manufacturer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.manufacturer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeviceModelIdentifierv1270 = &rule.AttributeRule{
	Name:         "type.device.model.identifier",
	Title:        "The type of `device.model.identifier` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.model.identifier") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDeviceModelNamev1270 = &rule.AttributeRule{
	Name:         "type.device.model.name",
	Title:        "The type of `device.model.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "device.model.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeDnsQuestionNamev1270 = &rule.AttributeRule{
	Name:         "type.dns.question.name",
	Title:        "The type of `dns.question.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "dns.question.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeEnduserIdv1270 = &rule.AttributeRule{
	Name:         "type.enduser.id",
	Title:        "The type of `enduser.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeEnduserRolev1270 = &rule.AttributeRule{
	Name:         "type.enduser.role",
	Title:        "The type of `enduser.role` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.role") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeEnduserScopev1270 = &rule.AttributeRule{
	Name:         "type.enduser.scope",
	Title:        "The type of `enduser.scope` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "enduser.scope") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeEventNamev1270 = &rule.AttributeRule{
	Name:         "type.event.name",
	Title:        "The type of `event.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "event.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeExceptionEscapedv1270 = &rule.AttributeRule{
	Name:         "type.exception.escaped",
	Title:        "The type of `exception.escaped` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "exception.escaped") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeExceptionMessagev1270 = &rule.AttributeRule{
	Name:         "type.exception.message",
	Title:        "The type of `exception.message` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.message") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeExceptionStacktracev1270 = &rule.AttributeRule{
	Name:         "type.exception.stacktrace",
	Title:        "The type of `exception.stacktrace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.stacktrace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeExceptionTypev1270 = &rule.AttributeRule{
	Name:         "type.exception.type",
	Title:        "The type of `exception.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "exception.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasColdstartv1270 = &rule.AttributeRule{
	Name:         "type.faas.coldstart",
	Title:        "The type of `faas.coldstart` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "faas.coldstart") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasCronv1270 = &rule.AttributeRule{
	Name:         "type.faas.cron",
	Title:        "The type of `faas.cron` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.cron") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasDocumentCollectionv1270 = &rule.AttributeRule{
	Name:         "type.faas.document.collection",
	Title:        "The type of `faas.document.collection` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.collection") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasDocumentNamev1270 = &rule.AttributeRule{
	Name:         "type.faas.document.name",
	Title:        "The type of `faas.document.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasDocumentTimev1270 = &rule.AttributeRule{
	Name:         "type.faas.document.time",
	Title:        "The type of `faas.document.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.document.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasInstancev1270 = &rule.AttributeRule{
	Name:         "type.faas.instance",
	Title:        "The type of `faas.instance` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.instance") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasInvocationIdv1270 = &rule.AttributeRule{
	Name:         "type.faas.invocation_id",
	Title:        "The type of `faas.invocation_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invocation_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasInvokedNamev1270 = &rule.AttributeRule{
	Name:         "type.faas.invoked_name",
	Title:        "The type of `faas.invoked_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invoked_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasInvokedRegionv1270 = &rule.AttributeRule{
	Name:         "type.faas.invoked_region",
	Title:        "The type of `faas.invoked_region` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.invoked_region") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasMaxMemoryv1270 = &rule.AttributeRule{
	Name:         "type.faas.max_memory",
	Title:        "The type of `faas.max_memory` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "faas.max_memory") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasNamev1270 = &rule.AttributeRule{
	Name:         "type.faas.name",
	Title:        "The type of `faas.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasTimev1270 = &rule.AttributeRule{
	Name:         "type.faas.time",
	Title:        "The type of `faas.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFaasVersionv1270 = &rule.AttributeRule{
	Name:         "type.faas.version",
	Title:        "The type of `faas.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "faas.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFeatureFlagKeyv1270 = &rule.AttributeRule{
	Name:         "type.feature_flag.key",
	Title:        "The type of `feature_flag.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFeatureFlagProviderNamev1270 = &rule.AttributeRule{
	Name:         "type.feature_flag.provider_name",
	Title:        "The type of `feature_flag.provider_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.provider_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFeatureFlagVariantv1270 = &rule.AttributeRule{
	Name:         "type.feature_flag.variant",
	Title:        "The type of `feature_flag.variant` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "feature_flag.variant") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFileDirectoryv1270 = &rule.AttributeRule{
	Name:         "type.file.directory",
	Title:        "The type of `file.directory` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.directory") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFileExtensionv1270 = &rule.AttributeRule{
	Name:         "type.file.extension",
	Title:        "The type of `file.extension` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.extension") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFileNamev1270 = &rule.AttributeRule{
	Name:         "type.file.name",
	Title:        "The type of `file.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFilePathv1270 = &rule.AttributeRule{
	Name:         "type.file.path",
	Title:        "The type of `file.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "file.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeFileSizev1270 = &rule.AttributeRule{
	Name:         "type.file.size",
	Title:        "The type of `file.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "file.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGcpClientServicev1270 = &rule.AttributeRule{
	Name:         "type.gcp.client.service",
	Title:        "The type of `gcp.client.service` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.client.service") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGcpCloudRunJobExecutionv1270 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.execution",
	Title:        "The type of `gcp.cloud_run.job.execution` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.cloud_run.job.execution") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGcpCloudRunJobTaskIndexv1270 = &rule.AttributeRule{
	Name:         "type.gcp.cloud_run.job.task_index",
	Title:        "The type of `gcp.cloud_run.job.task_index` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gcp.cloud_run.job.task_index") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGcpGceInstanceHostnamev1270 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.hostname",
	Title:        "The type of `gcp.gce.instance.hostname` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.gce.instance.hostname") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGcpGceInstanceNamev1270 = &rule.AttributeRule{
	Name:         "type.gcp.gce.instance.name",
	Title:        "The type of `gcp.gce.instance.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gcp.gce.instance.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiCompletionv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.completion",
	Title:        "The type of `gen_ai.completion` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.completion") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiPromptv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.prompt",
	Title:        "The type of `gen_ai.prompt` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.prompt") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestFrequencyPenaltyv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.frequency_penalty",
	Title:        "The type of `gen_ai.request.frequency_penalty` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "gen_ai.request.frequency_penalty") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestMaxTokensv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.max_tokens",
	Title:        "The type of `gen_ai.request.max_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.request.max_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestModelv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.model",
	Title:        "The type of `gen_ai.request.model` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.request.model") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestPresencePenaltyv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.presence_penalty",
	Title:        "The type of `gen_ai.request.presence_penalty` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "gen_ai.request.presence_penalty") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestStopSequencesv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.stop_sequences",
	Title:        "The type of `gen_ai.request.stop_sequences` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "gen_ai.request.stop_sequences") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestTemperaturev1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.temperature",
	Title:        "The type of `gen_ai.request.temperature` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "gen_ai.request.temperature") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestTopKv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.top_k",
	Title:        "The type of `gen_ai.request.top_k` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "gen_ai.request.top_k") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiRequestTopPv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.request.top_p",
	Title:        "The type of `gen_ai.request.top_p` should be double",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeDouble(sa, "gen_ai.request.top_p") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiResponseFinishReasonsv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.response.finish_reasons",
	Title:        "The type of `gen_ai.response.finish_reasons` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "gen_ai.response.finish_reasons") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiResponseIdv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.response.id",
	Title:        "The type of `gen_ai.response.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.response.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiResponseModelv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.response.model",
	Title:        "The type of `gen_ai.response.model` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "gen_ai.response.model") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiUsageCompletionTokensv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.usage.completion_tokens",
	Title:        "The type of `gen_ai.usage.completion_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.usage.completion_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiUsageInputTokensv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.usage.input_tokens",
	Title:        "The type of `gen_ai.usage.input_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.usage.input_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiUsageOutputTokensv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.usage.output_tokens",
	Title:        "The type of `gen_ai.usage.output_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.usage.output_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGenAiUsagePromptTokensv1270 = &rule.AttributeRule{
	Name:         "type.gen_ai.usage.prompt_tokens",
	Title:        "The type of `gen_ai.usage.prompt_tokens` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "gen_ai.usage.prompt_tokens") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGraphqlDocumentv1270 = &rule.AttributeRule{
	Name:         "type.graphql.document",
	Title:        "The type of `graphql.document` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "graphql.document") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeGraphqlOperationNamev1270 = &rule.AttributeRule{
	Name:         "type.graphql.operation.name",
	Title:        "The type of `graphql.operation.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "graphql.operation.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHerokuAppIdv1270 = &rule.AttributeRule{
	Name:         "type.heroku.app.id",
	Title:        "The type of `heroku.app.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.app.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHerokuReleaseCommitv1270 = &rule.AttributeRule{
	Name:         "type.heroku.release.commit",
	Title:        "The type of `heroku.release.commit` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.release.commit") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHerokuReleaseCreationTimestampv1270 = &rule.AttributeRule{
	Name:         "type.heroku.release.creation_timestamp",
	Title:        "The type of `heroku.release.creation_timestamp` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "heroku.release.creation_timestamp") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostCpuCacheL2Sizev1270 = &rule.AttributeRule{
	Name:         "type.host.cpu.cache.l2.size",
	Title:        "The type of `host.cpu.cache.l2.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "host.cpu.cache.l2.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostCpuFamilyv1270 = &rule.AttributeRule{
	Name:         "type.host.cpu.family",
	Title:        "The type of `host.cpu.family` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.family") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostCpuModelIdv1270 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.id",
	Title:        "The type of `host.cpu.model.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.model.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostCpuModelNamev1270 = &rule.AttributeRule{
	Name:         "type.host.cpu.model.name",
	Title:        "The type of `host.cpu.model.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.model.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostCpuSteppingv1270 = &rule.AttributeRule{
	Name:         "type.host.cpu.stepping",
	Title:        "The type of `host.cpu.stepping` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.stepping") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostCpuVendorIdv1270 = &rule.AttributeRule{
	Name:         "type.host.cpu.vendor.id",
	Title:        "The type of `host.cpu.vendor.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.cpu.vendor.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostIdv1270 = &rule.AttributeRule{
	Name:         "type.host.id",
	Title:        "The type of `host.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostImageIdv1270 = &rule.AttributeRule{
	Name:         "type.host.image.id",
	Title:        "The type of `host.image.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostImageNamev1270 = &rule.AttributeRule{
	Name:         "type.host.image.name",
	Title:        "The type of `host.image.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostImageVersionv1270 = &rule.AttributeRule{
	Name:         "type.host.image.version",
	Title:        "The type of `host.image.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.image.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostIpv1270 = &rule.AttributeRule{
	Name:         "type.host.ip",
	Title:        "The type of `host.ip` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "host.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostMacv1270 = &rule.AttributeRule{
	Name:         "type.host.mac",
	Title:        "The type of `host.mac` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "host.mac") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostNamev1270 = &rule.AttributeRule{
	Name:         "type.host.name",
	Title:        "The type of `host.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHostTypev1270 = &rule.AttributeRule{
	Name:         "type.host.type",
	Title:        "The type of `host.type` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "host.type") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpClientIpv1270 = &rule.AttributeRule{
	Name:         "type.http.client_ip",
	Title:        "The type of `http.client_ip` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.client_ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpHostv1270 = &rule.AttributeRule{
	Name:         "type.http.host",
	Title:        "The type of `http.host` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.host") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpMethodv1270 = &rule.AttributeRule{
	Name:         "type.http.method",
	Title:        "The type of `http.method` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpRequestBodySizev1270 = &rule.AttributeRule{
	Name:         "type.http.request.body.size",
	Title:        "The type of `http.request.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpRequestMethodOriginalv1270 = &rule.AttributeRule{
	Name:         "type.http.request.method_original",
	Title:        "The type of `http.request.method_original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.request.method_original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpRequestResendCountv1270 = &rule.AttributeRule{
	Name:         "type.http.request.resend_count",
	Title:        "The type of `http.request.resend_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.resend_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpRequestSizev1270 = &rule.AttributeRule{
	Name:         "type.http.request.size",
	Title:        "The type of `http.request.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpRequestContentLengthv1270 = &rule.AttributeRule{
	Name:         "type.http.request_content_length",
	Title:        "The type of `http.request_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpRequestContentLengthUncompressedv1270 = &rule.AttributeRule{
	Name:         "type.http.request_content_length_uncompressed",
	Title:        "The type of `http.request_content_length_uncompressed` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.request_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpResponseBodySizev1270 = &rule.AttributeRule{
	Name:         "type.http.response.body.size",
	Title:        "The type of `http.response.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpResponseSizev1270 = &rule.AttributeRule{
	Name:         "type.http.response.size",
	Title:        "The type of `http.response.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpResponseStatusCodev1270 = &rule.AttributeRule{
	Name:         "type.http.response.status_code",
	Title:        "The type of `http.response.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpResponseContentLengthv1270 = &rule.AttributeRule{
	Name:         "type.http.response_content_length",
	Title:        "The type of `http.response_content_length` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response_content_length") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpResponseContentLengthUncompressedv1270 = &rule.AttributeRule{
	Name:         "type.http.response_content_length_uncompressed",
	Title:        "The type of `http.response_content_length_uncompressed` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.response_content_length_uncompressed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpRoutev1270 = &rule.AttributeRule{
	Name:         "type.http.route",
	Title:        "The type of `http.route` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.route") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpSchemev1270 = &rule.AttributeRule{
	Name:         "type.http.scheme",
	Title:        "The type of `http.scheme` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpServerNamev1270 = &rule.AttributeRule{
	Name:         "type.http.server_name",
	Title:        "The type of `http.server_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpStatusCodev1270 = &rule.AttributeRule{
	Name:         "type.http.status_code",
	Title:        "The type of `http.status_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "http.status_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpTargetv1270 = &rule.AttributeRule{
	Name:         "type.http.target",
	Title:        "The type of `http.target` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.target") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpUrlv1270 = &rule.AttributeRule{
	Name:         "type.http.url",
	Title:        "The type of `http.url` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.url") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeHttpUserAgentv1270 = &rule.AttributeRule{
	Name:         "type.http.user_agent",
	Title:        "The type of `http.user_agent` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "http.user_agent") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeJvmBufferPoolNamev1270 = &rule.AttributeRule{
	Name:         "type.jvm.buffer.pool.name",
	Title:        "The type of `jvm.buffer.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.buffer.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeJvmGcActionv1270 = &rule.AttributeRule{
	Name:         "type.jvm.gc.action",
	Title:        "The type of `jvm.gc.action` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.gc.action") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeJvmGcNamev1270 = &rule.AttributeRule{
	Name:         "type.jvm.gc.name",
	Title:        "The type of `jvm.gc.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.gc.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeJvmMemoryPoolNamev1270 = &rule.AttributeRule{
	Name:         "type.jvm.memory.pool.name",
	Title:        "The type of `jvm.memory.pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "jvm.memory.pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeJvmThreadDaemonv1270 = &rule.AttributeRule{
	Name:         "type.jvm.thread.daemon",
	Title:        "The type of `jvm.thread.daemon` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "jvm.thread.daemon") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SClusterNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.name",
	Title:        "The type of `k8s.cluster.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cluster.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SClusterUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.cluster.uid",
	Title:        "The type of `k8s.cluster.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cluster.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SContainerNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.container.name",
	Title:        "The type of `k8s.container.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.container.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SContainerRestartCountv1270 = &rule.AttributeRule{
	Name:         "type.k8s.container.restart_count",
	Title:        "The type of `k8s.container.restart_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "k8s.container.restart_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SContainerStatusLastTerminatedReasonv1270 = &rule.AttributeRule{
	Name:         "type.k8s.container.status.last_terminated_reason",
	Title:        "The type of `k8s.container.status.last_terminated_reason` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.container.status.last_terminated_reason") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SCronjobNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.name",
	Title:        "The type of `k8s.cronjob.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cronjob.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SCronjobUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.cronjob.uid",
	Title:        "The type of `k8s.cronjob.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.cronjob.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SDaemonsetNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.name",
	Title:        "The type of `k8s.daemonset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.daemonset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SDaemonsetUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.daemonset.uid",
	Title:        "The type of `k8s.daemonset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.daemonset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SDeploymentNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.name",
	Title:        "The type of `k8s.deployment.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.deployment.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SDeploymentUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.deployment.uid",
	Title:        "The type of `k8s.deployment.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.deployment.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SJobNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.job.name",
	Title:        "The type of `k8s.job.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.job.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SJobUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.job.uid",
	Title:        "The type of `k8s.job.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.job.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SNamespaceNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.namespace.name",
	Title:        "The type of `k8s.namespace.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.namespace.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SNodeNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.node.name",
	Title:        "The type of `k8s.node.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.node.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SNodeUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.node.uid",
	Title:        "The type of `k8s.node.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.node.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SPodNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.pod.name",
	Title:        "The type of `k8s.pod.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.pod.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SPodUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.pod.uid",
	Title:        "The type of `k8s.pod.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.pod.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SReplicasetNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.name",
	Title:        "The type of `k8s.replicaset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.replicaset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SReplicasetUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.replicaset.uid",
	Title:        "The type of `k8s.replicaset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.replicaset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SStatefulsetNamev1270 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.name",
	Title:        "The type of `k8s.statefulset.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.statefulset.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeK8SStatefulsetUidv1270 = &rule.AttributeRule{
	Name:         "type.k8s.statefulset.uid",
	Title:        "The type of `k8s.statefulset.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "k8s.statefulset.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeLogFileNamev1270 = &rule.AttributeRule{
	Name:         "type.log.file.name",
	Title:        "The type of `log.file.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeLogFileNameResolvedv1270 = &rule.AttributeRule{
	Name:         "type.log.file.name_resolved",
	Title:        "The type of `log.file.name_resolved` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.name_resolved") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeLogFilePathv1270 = &rule.AttributeRule{
	Name:         "type.log.file.path",
	Title:        "The type of `log.file.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeLogFilePathResolvedv1270 = &rule.AttributeRule{
	Name:         "type.log.file.path_resolved",
	Title:        "The type of `log.file.path_resolved` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.file.path_resolved") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeLogRecordOriginalv1270 = &rule.AttributeRule{
	Name:         "type.log.record.original",
	Title:        "The type of `log.record.original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.record.original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeLogRecordUidv1270 = &rule.AttributeRule{
	Name:         "type.log.record.uid",
	Title:        "The type of `log.record.uid` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "log.record.uid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessageCompressedSizev1270 = &rule.AttributeRule{
	Name:         "type.message.compressed_size",
	Title:        "The type of `message.compressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.compressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessageIdv1270 = &rule.AttributeRule{
	Name:         "type.message.id",
	Title:        "The type of `message.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessageUncompressedSizev1270 = &rule.AttributeRule{
	Name:         "type.message.uncompressed_size",
	Title:        "The type of `message.uncompressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "message.uncompressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingBatchMessageCountv1270 = &rule.AttributeRule{
	Name:         "type.messaging.batch.message_count",
	Title:        "The type of `messaging.batch.message_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.batch.message_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingClientIdv1270 = &rule.AttributeRule{
	Name:         "type.messaging.client.id",
	Title:        "The type of `messaging.client.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.client.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingClient_Idv1270 = &rule.AttributeRule{
	Name:         "type.messaging.client_id",
	Title:        "The type of `messaging.client_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.client_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingConsumerGroupNamev1270 = &rule.AttributeRule{
	Name:         "type.messaging.consumer.group.name",
	Title:        "The type of `messaging.consumer.group.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.consumer.group.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationAnonymousv1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination.anonymous",
	Title:        "The type of `messaging.destination.anonymous` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination.anonymous") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationNamev1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination.name",
	Title:        "The type of `messaging.destination.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationPartitionIdv1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination.partition.id",
	Title:        "The type of `messaging.destination.partition.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.partition.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationSubscriptionNamev1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination.subscription.name",
	Title:        "The type of `messaging.destination.subscription.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.subscription.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationTemplatev1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination.template",
	Title:        "The type of `messaging.destination.template` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination.template") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationTemporaryv1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination.temporary",
	Title:        "The type of `messaging.destination.temporary` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination.temporary") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationPublishAnonymousv1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.anonymous",
	Title:        "The type of `messaging.destination_publish.anonymous` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.destination_publish.anonymous") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingDestinationPublishNamev1270 = &rule.AttributeRule{
	Name:         "type.messaging.destination_publish.name",
	Title:        "The type of `messaging.destination_publish.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.destination_publish.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingEventhubsConsumerGroupv1270 = &rule.AttributeRule{
	Name:         "type.messaging.eventhubs.consumer.group",
	Title:        "The type of `messaging.eventhubs.consumer.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.eventhubs.consumer.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingEventhubsMessageEnqueuedTimev1270 = &rule.AttributeRule{
	Name:         "type.messaging.eventhubs.message.enqueued_time",
	Title:        "The type of `messaging.eventhubs.message.enqueued_time` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.eventhubs.message.enqueued_time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingGcpPubsubMessageAckDeadlinev1270 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ack_deadline",
	Title:        "The type of `messaging.gcp_pubsub.message.ack_deadline` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.gcp_pubsub.message.ack_deadline") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingGcpPubsubMessageAckIdv1270 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ack_id",
	Title:        "The type of `messaging.gcp_pubsub.message.ack_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.gcp_pubsub.message.ack_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingGcpPubsubMessageDeliveryAttemptv1270 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.delivery_attempt",
	Title:        "The type of `messaging.gcp_pubsub.message.delivery_attempt` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.gcp_pubsub.message.delivery_attempt") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingGcpPubsubMessageOrderingKeyv1270 = &rule.AttributeRule{
	Name:         "type.messaging.gcp_pubsub.message.ordering_key",
	Title:        "The type of `messaging.gcp_pubsub.message.ordering_key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.gcp_pubsub.message.ordering_key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingKafkaConsumerGroupv1270 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.consumer.group",
	Title:        "The type of `messaging.kafka.consumer.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.kafka.consumer.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingKafkaDestinationPartitionv1270 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.destination.partition",
	Title:        "The type of `messaging.kafka.destination.partition` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.kafka.destination.partition") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingKafkaMessageKeyv1270 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.key",
	Title:        "The type of `messaging.kafka.message.key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.kafka.message.key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingKafkaMessageOffsetv1270 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.offset",
	Title:        "The type of `messaging.kafka.message.offset` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.kafka.message.offset") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingKafkaMessageTombstonev1270 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.message.tombstone",
	Title:        "The type of `messaging.kafka.message.tombstone` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "messaging.kafka.message.tombstone") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingKafkaOffsetv1270 = &rule.AttributeRule{
	Name:         "type.messaging.kafka.offset",
	Title:        "The type of `messaging.kafka.offset` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.kafka.offset") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingMessageBodySizev1270 = &rule.AttributeRule{
	Name:         "type.messaging.message.body.size",
	Title:        "The type of `messaging.message.body.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.message.body.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingMessageConversationIdv1270 = &rule.AttributeRule{
	Name:         "type.messaging.message.conversation_id",
	Title:        "The type of `messaging.message.conversation_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.message.conversation_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingMessageEnvelopeSizev1270 = &rule.AttributeRule{
	Name:         "type.messaging.message.envelope.size",
	Title:        "The type of `messaging.message.envelope.size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.message.envelope.size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingMessageIdv1270 = &rule.AttributeRule{
	Name:         "type.messaging.message.id",
	Title:        "The type of `messaging.message.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingOperationv1270 = &rule.AttributeRule{
	Name:         "type.messaging.operation",
	Title:        "The type of `messaging.operation` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.operation") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingOperationNamev1270 = &rule.AttributeRule{
	Name:         "type.messaging.operation.name",
	Title:        "The type of `messaging.operation.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.operation.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRabbitmqDestinationRoutingKeyv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.destination.routing_key",
	Title:        "The type of `messaging.rabbitmq.destination.routing_key` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rabbitmq.destination.routing_key") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRabbitmqMessageDeliveryTagv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rabbitmq.message.delivery_tag",
	Title:        "The type of `messaging.rabbitmq.message.delivery_tag` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rabbitmq.message.delivery_tag") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRocketmqClientGroupv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.client_group",
	Title:        "The type of `messaging.rocketmq.client_group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.client_group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRocketmqMessageDelayTimeLevelv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delay_time_level",
	Title:        "The type of `messaging.rocketmq.message.delay_time_level` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rocketmq.message.delay_time_level") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRocketmqMessageDeliveryTimestampv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.delivery_timestamp",
	Title:        "The type of `messaging.rocketmq.message.delivery_timestamp` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.rocketmq.message.delivery_timestamp") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRocketmqMessageGroupv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.group",
	Title:        "The type of `messaging.rocketmq.message.group` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.message.group") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRocketmqMessageKeysv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.keys",
	Title:        "The type of `messaging.rocketmq.message.keys` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "messaging.rocketmq.message.keys") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRocketmqMessageTagv1270 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.message.tag",
	Title:        "The type of `messaging.rocketmq.message.tag` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.message.tag") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingRocketmqNamespacev1270 = &rule.AttributeRule{
	Name:         "type.messaging.rocketmq.namespace",
	Title:        "The type of `messaging.rocketmq.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.rocketmq.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingServicebusDestinationSubscriptionNamev1270 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.destination.subscription_name",
	Title:        "The type of `messaging.servicebus.destination.subscription_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "messaging.servicebus.destination.subscription_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingServicebusMessageDeliveryCountv1270 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.message.delivery_count",
	Title:        "The type of `messaging.servicebus.message.delivery_count` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.servicebus.message.delivery_count") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeMessagingServicebusMessageEnqueuedTimev1270 = &rule.AttributeRule{
	Name:         "type.messaging.servicebus.message.enqueued_time",
	Title:        "The type of `messaging.servicebus.message.enqueued_time` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "messaging.servicebus.message.enqueued_time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetHostIpv1270 = &rule.AttributeRule{
	Name:         "type.net.host.ip",
	Title:        "The type of `net.host.ip` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.host.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetHostNamev1270 = &rule.AttributeRule{
	Name:         "type.net.host.name",
	Title:        "The type of `net.host.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.host.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetHostPortv1270 = &rule.AttributeRule{
	Name:         "type.net.host.port",
	Title:        "The type of `net.host.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetPeerIpv1270 = &rule.AttributeRule{
	Name:         "type.net.peer.ip",
	Title:        "The type of `net.peer.ip` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.peer.ip") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetPeerNamev1270 = &rule.AttributeRule{
	Name:         "type.net.peer.name",
	Title:        "The type of `net.peer.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetPeerPortv1270 = &rule.AttributeRule{
	Name:         "type.net.peer.port",
	Title:        "The type of `net.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetProtocolNamev1270 = &rule.AttributeRule{
	Name:         "type.net.protocol.name",
	Title:        "The type of `net.protocol.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetProtocolVersionv1270 = &rule.AttributeRule{
	Name:         "type.net.protocol.version",
	Title:        "The type of `net.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetSockHostAddrv1270 = &rule.AttributeRule{
	Name:         "type.net.sock.host.addr",
	Title:        "The type of `net.sock.host.addr` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.host.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetSockHostPortv1270 = &rule.AttributeRule{
	Name:         "type.net.sock.host.port",
	Title:        "The type of `net.sock.host.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.sock.host.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetSockPeerAddrv1270 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.addr",
	Title:        "The type of `net.sock.peer.addr` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.peer.addr") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetSockPeerNamev1270 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.name",
	Title:        "The type of `net.sock.peer.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "net.sock.peer.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetSockPeerPortv1270 = &rule.AttributeRule{
	Name:         "type.net.sock.peer.port",
	Title:        "The type of `net.sock.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "net.sock.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkCarrierIccv1270 = &rule.AttributeRule{
	Name:         "type.network.carrier.icc",
	Title:        "The type of `network.carrier.icc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.icc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkCarrierMccv1270 = &rule.AttributeRule{
	Name:         "type.network.carrier.mcc",
	Title:        "The type of `network.carrier.mcc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.mcc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkCarrierMncv1270 = &rule.AttributeRule{
	Name:         "type.network.carrier.mnc",
	Title:        "The type of `network.carrier.mnc` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.mnc") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkCarrierNamev1270 = &rule.AttributeRule{
	Name:         "type.network.carrier.name",
	Title:        "The type of `network.carrier.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.carrier.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkLocalAddressv1270 = &rule.AttributeRule{
	Name:         "type.network.local.address",
	Title:        "The type of `network.local.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.local.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkLocalPortv1270 = &rule.AttributeRule{
	Name:         "type.network.local.port",
	Title:        "The type of `network.local.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "network.local.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkPeerAddressv1270 = &rule.AttributeRule{
	Name:         "type.network.peer.address",
	Title:        "The type of `network.peer.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.peer.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkPeerPortv1270 = &rule.AttributeRule{
	Name:         "type.network.peer.port",
	Title:        "The type of `network.peer.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "network.peer.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkProtocolNamev1270 = &rule.AttributeRule{
	Name:         "type.network.protocol.name",
	Title:        "The type of `network.protocol.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.protocol.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeNetworkProtocolVersionv1270 = &rule.AttributeRule{
	Name:         "type.network.protocol.version",
	Title:        "The type of `network.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "network.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOciManifestDigestv1270 = &rule.AttributeRule{
	Name:         "type.oci.manifest.digest",
	Title:        "The type of `oci.manifest.digest` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "oci.manifest.digest") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOsBuildIdv1270 = &rule.AttributeRule{
	Name:         "type.os.build_id",
	Title:        "The type of `os.build_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.build_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOsDescriptionv1270 = &rule.AttributeRule{
	Name:         "type.os.description",
	Title:        "The type of `os.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOsNamev1270 = &rule.AttributeRule{
	Name:         "type.os.name",
	Title:        "The type of `os.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOsVersionv1270 = &rule.AttributeRule{
	Name:         "type.os.version",
	Title:        "The type of `os.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "os.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOtelLibraryNamev1270 = &rule.AttributeRule{
	Name:         "type.otel.library.name",
	Title:        "The type of `otel.library.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.library.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOtelLibraryVersionv1270 = &rule.AttributeRule{
	Name:         "type.otel.library.version",
	Title:        "The type of `otel.library.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.library.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOtelScopeNamev1270 = &rule.AttributeRule{
	Name:         "type.otel.scope.name",
	Title:        "The type of `otel.scope.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.scope.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOtelScopeVersionv1270 = &rule.AttributeRule{
	Name:         "type.otel.scope.version",
	Title:        "The type of `otel.scope.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.scope.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeOtelStatusDescriptionv1270 = &rule.AttributeRule{
	Name:         "type.otel.status_description",
	Title:        "The type of `otel.status_description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "otel.status_description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypePeerServicev1270 = &rule.AttributeRule{
	Name:         "type.peer.service",
	Title:        "The type of `peer.service` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "peer.service") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypePoolNamev1270 = &rule.AttributeRule{
	Name:         "type.pool.name",
	Title:        "The type of `pool.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "pool.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessCommandv1270 = &rule.AttributeRule{
	Name:         "type.process.command",
	Title:        "The type of `process.command` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.command") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessCommandArgsv1270 = &rule.AttributeRule{
	Name:         "type.process.command_args",
	Title:        "The type of `process.command_args` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "process.command_args") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessCommandLinev1270 = &rule.AttributeRule{
	Name:         "type.process.command_line",
	Title:        "The type of `process.command_line` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.command_line") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessCreationTimev1270 = &rule.AttributeRule{
	Name:         "type.process.creation.time",
	Title:        "The type of `process.creation.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.creation.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessExecutableNamev1270 = &rule.AttributeRule{
	Name:         "type.process.executable.name",
	Title:        "The type of `process.executable.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.executable.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessExecutablePathv1270 = &rule.AttributeRule{
	Name:         "type.process.executable.path",
	Title:        "The type of `process.executable.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.executable.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessExitCodev1270 = &rule.AttributeRule{
	Name:         "type.process.exit.code",
	Title:        "The type of `process.exit.code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.exit.code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessExitTimev1270 = &rule.AttributeRule{
	Name:         "type.process.exit.time",
	Title:        "The type of `process.exit.time` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.exit.time") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessGroupLeaderPidv1270 = &rule.AttributeRule{
	Name:         "type.process.group_leader.pid",
	Title:        "The type of `process.group_leader.pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.group_leader.pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessInteractivev1270 = &rule.AttributeRule{
	Name:         "type.process.interactive",
	Title:        "The type of `process.interactive` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "process.interactive") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessOwnerv1270 = &rule.AttributeRule{
	Name:         "type.process.owner",
	Title:        "The type of `process.owner` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.owner") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessParentPidv1270 = &rule.AttributeRule{
	Name:         "type.process.parent_pid",
	Title:        "The type of `process.parent_pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.parent_pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessPidv1270 = &rule.AttributeRule{
	Name:         "type.process.pid",
	Title:        "The type of `process.pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessRealUserIdv1270 = &rule.AttributeRule{
	Name:         "type.process.real_user.id",
	Title:        "The type of `process.real_user.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.real_user.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessRealUserNamev1270 = &rule.AttributeRule{
	Name:         "type.process.real_user.name",
	Title:        "The type of `process.real_user.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.real_user.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessRuntimeDescriptionv1270 = &rule.AttributeRule{
	Name:         "type.process.runtime.description",
	Title:        "The type of `process.runtime.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessRuntimeNamev1270 = &rule.AttributeRule{
	Name:         "type.process.runtime.name",
	Title:        "The type of `process.runtime.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessRuntimeVersionv1270 = &rule.AttributeRule{
	Name:         "type.process.runtime.version",
	Title:        "The type of `process.runtime.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.runtime.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessSavedUserIdv1270 = &rule.AttributeRule{
	Name:         "type.process.saved_user.id",
	Title:        "The type of `process.saved_user.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.saved_user.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessSavedUserNamev1270 = &rule.AttributeRule{
	Name:         "type.process.saved_user.name",
	Title:        "The type of `process.saved_user.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.saved_user.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessSessionLeaderPidv1270 = &rule.AttributeRule{
	Name:         "type.process.session_leader.pid",
	Title:        "The type of `process.session_leader.pid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.session_leader.pid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessUserIdv1270 = &rule.AttributeRule{
	Name:         "type.process.user.id",
	Title:        "The type of `process.user.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.user.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessUserNamev1270 = &rule.AttributeRule{
	Name:         "type.process.user.name",
	Title:        "The type of `process.user.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "process.user.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeProcessVpidv1270 = &rule.AttributeRule{
	Name:         "type.process.vpid",
	Title:        "The type of `process.vpid` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "process.vpid") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcJsonrpcErrorCodev1270 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_code",
	Title:        "The type of `rpc.jsonrpc.error_code` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.jsonrpc.error_code") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcJsonrpcErrorMessagev1270 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.error_message",
	Title:        "The type of `rpc.jsonrpc.error_message` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.error_message") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcJsonrpcRequestIdv1270 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.request_id",
	Title:        "The type of `rpc.jsonrpc.request_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.request_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcJsonrpcVersionv1270 = &rule.AttributeRule{
	Name:         "type.rpc.jsonrpc.version",
	Title:        "The type of `rpc.jsonrpc.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.jsonrpc.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcMessageCompressedSizev1270 = &rule.AttributeRule{
	Name:         "type.rpc.message.compressed_size",
	Title:        "The type of `rpc.message.compressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.message.compressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcMessageIdv1270 = &rule.AttributeRule{
	Name:         "type.rpc.message.id",
	Title:        "The type of `rpc.message.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.message.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcMessageUncompressedSizev1270 = &rule.AttributeRule{
	Name:         "type.rpc.message.uncompressed_size",
	Title:        "The type of `rpc.message.uncompressed_size` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "rpc.message.uncompressed_size") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcMethodv1270 = &rule.AttributeRule{
	Name:         "type.rpc.method",
	Title:        "The type of `rpc.method` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.method") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeRpcServicev1270 = &rule.AttributeRule{
	Name:         "type.rpc.service",
	Title:        "The type of `rpc.service` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "rpc.service") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeServerAddressv1270 = &rule.AttributeRule{
	Name:         "type.server.address",
	Title:        "The type of `server.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "server.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeServerPortv1270 = &rule.AttributeRule{
	Name:         "type.server.port",
	Title:        "The type of `server.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "server.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeServiceInstanceIdv1270 = &rule.AttributeRule{
	Name:         "type.service.instance.id",
	Title:        "The type of `service.instance.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.instance.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeServiceNamev1270 = &rule.AttributeRule{
	Name:         "type.service.name",
	Title:        "The type of `service.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeServiceNamespacev1270 = &rule.AttributeRule{
	Name:         "type.service.namespace",
	Title:        "The type of `service.namespace` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.namespace") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeServiceVersionv1270 = &rule.AttributeRule{
	Name:         "type.service.version",
	Title:        "The type of `service.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "service.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSessionIdv1270 = &rule.AttributeRule{
	Name:         "type.session.id",
	Title:        "The type of `session.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "session.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSessionPreviousIdv1270 = &rule.AttributeRule{
	Name:         "type.session.previous_id",
	Title:        "The type of `session.previous_id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "session.previous_id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSourceAddressv1270 = &rule.AttributeRule{
	Name:         "type.source.address",
	Title:        "The type of `source.address` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "source.address") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSourcePortv1270 = &rule.AttributeRule{
	Name:         "type.source.port",
	Title:        "The type of `source.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "source.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSystemCpuLogicalNumberv1270 = &rule.AttributeRule{
	Name:         "type.system.cpu.logical_number",
	Title:        "The type of `system.cpu.logical_number` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "system.cpu.logical_number") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSystemDevicev1270 = &rule.AttributeRule{
	Name:         "type.system.device",
	Title:        "The type of `system.device` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.device") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSystemFilesystemModev1270 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mode",
	Title:        "The type of `system.filesystem.mode` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.filesystem.mode") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeSystemFilesystemMountpointv1270 = &rule.AttributeRule{
	Name:         "type.system.filesystem.mountpoint",
	Title:        "The type of `system.filesystem.mountpoint` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "system.filesystem.mountpoint") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTelemetryDistroNamev1270 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.name",
	Title:        "The type of `telemetry.distro.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.distro.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTelemetryDistroVersionv1270 = &rule.AttributeRule{
	Name:         "type.telemetry.distro.version",
	Title:        "The type of `telemetry.distro.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.distro.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTelemetrySdkNamev1270 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.name",
	Title:        "The type of `telemetry.sdk.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.sdk.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTelemetrySdkVersionv1270 = &rule.AttributeRule{
	Name:         "type.telemetry.sdk.version",
	Title:        "The type of `telemetry.sdk.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "telemetry.sdk.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTestCaseNamev1270 = &rule.AttributeRule{
	Name:         "type.test.case.name",
	Title:        "The type of `test.case.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "test.case.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTestSuiteNamev1270 = &rule.AttributeRule{
	Name:         "type.test.suite.name",
	Title:        "The type of `test.suite.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "test.suite.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeThreadIdv1270 = &rule.AttributeRule{
	Name:         "type.thread.id",
	Title:        "The type of `thread.id` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "thread.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeThreadNamev1270 = &rule.AttributeRule{
	Name:         "type.thread.name",
	Title:        "The type of `thread.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "thread.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsCipherv1270 = &rule.AttributeRule{
	Name:         "type.tls.cipher",
	Title:        "The type of `tls.cipher` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.cipher") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientCertificatev1270 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate",
	Title:        "The type of `tls.client.certificate` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.certificate") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientCertificateChainv1270 = &rule.AttributeRule{
	Name:         "type.tls.client.certificate_chain",
	Title:        "The type of `tls.client.certificate_chain` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.client.certificate_chain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientHashMd5v1270 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.md5",
	Title:        "The type of `tls.client.hash.md5` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.md5") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientHashSha1v1270 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha1",
	Title:        "The type of `tls.client.hash.sha1` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.sha1") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientHashSha256v1270 = &rule.AttributeRule{
	Name:         "type.tls.client.hash.sha256",
	Title:        "The type of `tls.client.hash.sha256` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.hash.sha256") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientIssuerv1270 = &rule.AttributeRule{
	Name:         "type.tls.client.issuer",
	Title:        "The type of `tls.client.issuer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.issuer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientJa3v1270 = &rule.AttributeRule{
	Name:         "type.tls.client.ja3",
	Title:        "The type of `tls.client.ja3` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.ja3") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientNotAfterv1270 = &rule.AttributeRule{
	Name:         "type.tls.client.not_after",
	Title:        "The type of `tls.client.not_after` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.not_after") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientNotBeforev1270 = &rule.AttributeRule{
	Name:         "type.tls.client.not_before",
	Title:        "The type of `tls.client.not_before` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.not_before") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientServerNamev1270 = &rule.AttributeRule{
	Name:         "type.tls.client.server_name",
	Title:        "The type of `tls.client.server_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.server_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientSubjectv1270 = &rule.AttributeRule{
	Name:         "type.tls.client.subject",
	Title:        "The type of `tls.client.subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.client.subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsClientSupportedCiphersv1270 = &rule.AttributeRule{
	Name:         "type.tls.client.supported_ciphers",
	Title:        "The type of `tls.client.supported_ciphers` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.client.supported_ciphers") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsCurvev1270 = &rule.AttributeRule{
	Name:         "type.tls.curve",
	Title:        "The type of `tls.curve` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.curve") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsEstablishedv1270 = &rule.AttributeRule{
	Name:         "type.tls.established",
	Title:        "The type of `tls.established` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "tls.established") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsNextProtocolv1270 = &rule.AttributeRule{
	Name:         "type.tls.next_protocol",
	Title:        "The type of `tls.next_protocol` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.next_protocol") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsProtocolVersionv1270 = &rule.AttributeRule{
	Name:         "type.tls.protocol.version",
	Title:        "The type of `tls.protocol.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.protocol.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsResumedv1270 = &rule.AttributeRule{
	Name:         "type.tls.resumed",
	Title:        "The type of `tls.resumed` should be boolean",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeBool(sa, "tls.resumed") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerCertificatev1270 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate",
	Title:        "The type of `tls.server.certificate` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.certificate") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerCertificateChainv1270 = &rule.AttributeRule{
	Name:         "type.tls.server.certificate_chain",
	Title:        "The type of `tls.server.certificate_chain` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "tls.server.certificate_chain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerHashMd5v1270 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.md5",
	Title:        "The type of `tls.server.hash.md5` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.md5") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerHashSha1v1270 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha1",
	Title:        "The type of `tls.server.hash.sha1` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.sha1") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerHashSha256v1270 = &rule.AttributeRule{
	Name:         "type.tls.server.hash.sha256",
	Title:        "The type of `tls.server.hash.sha256` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.hash.sha256") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerIssuerv1270 = &rule.AttributeRule{
	Name:         "type.tls.server.issuer",
	Title:        "The type of `tls.server.issuer` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.issuer") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerJa3Sv1270 = &rule.AttributeRule{
	Name:         "type.tls.server.ja3s",
	Title:        "The type of `tls.server.ja3s` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.ja3s") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerNotAfterv1270 = &rule.AttributeRule{
	Name:         "type.tls.server.not_after",
	Title:        "The type of `tls.server.not_after` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.not_after") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerNotBeforev1270 = &rule.AttributeRule{
	Name:         "type.tls.server.not_before",
	Title:        "The type of `tls.server.not_before` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.not_before") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeTlsServerSubjectv1270 = &rule.AttributeRule{
	Name:         "type.tls.server.subject",
	Title:        "The type of `tls.server.subject` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "tls.server.subject") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlDomainv1270 = &rule.AttributeRule{
	Name:         "type.url.domain",
	Title:        "The type of `url.domain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.domain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlExtensionv1270 = &rule.AttributeRule{
	Name:         "type.url.extension",
	Title:        "The type of `url.extension` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.extension") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlFragmentv1270 = &rule.AttributeRule{
	Name:         "type.url.fragment",
	Title:        "The type of `url.fragment` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.fragment") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlFullv1270 = &rule.AttributeRule{
	Name:         "type.url.full",
	Title:        "The type of `url.full` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.full") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlOriginalv1270 = &rule.AttributeRule{
	Name:         "type.url.original",
	Title:        "The type of `url.original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlPathv1270 = &rule.AttributeRule{
	Name:         "type.url.path",
	Title:        "The type of `url.path` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.path") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlPortv1270 = &rule.AttributeRule{
	Name:         "type.url.port",
	Title:        "The type of `url.port` should be int",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeInt(sa, "url.port") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlQueryv1270 = &rule.AttributeRule{
	Name:         "type.url.query",
	Title:        "The type of `url.query` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.query") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlRegisteredDomainv1270 = &rule.AttributeRule{
	Name:         "type.url.registered_domain",
	Title:        "The type of `url.registered_domain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.registered_domain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlSchemev1270 = &rule.AttributeRule{
	Name:         "type.url.scheme",
	Title:        "The type of `url.scheme` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.scheme") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlSubdomainv1270 = &rule.AttributeRule{
	Name:         "type.url.subdomain",
	Title:        "The type of `url.subdomain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.subdomain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlTemplatev1270 = &rule.AttributeRule{
	Name:         "type.url.template",
	Title:        "The type of `url.template` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.template") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUrlTopLevelDomainv1270 = &rule.AttributeRule{
	Name:         "type.url.top_level_domain",
	Title:        "The type of `url.top_level_domain` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "url.top_level_domain") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserEmailv1270 = &rule.AttributeRule{
	Name:         "type.user.email",
	Title:        "The type of `user.email` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user.email") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserFullNamev1270 = &rule.AttributeRule{
	Name:         "type.user.full_name",
	Title:        "The type of `user.full_name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user.full_name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserHashv1270 = &rule.AttributeRule{
	Name:         "type.user.hash",
	Title:        "The type of `user.hash` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user.hash") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserIdv1270 = &rule.AttributeRule{
	Name:         "type.user.id",
	Title:        "The type of `user.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserNamev1270 = &rule.AttributeRule{
	Name:         "type.user.name",
	Title:        "The type of `user.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserRolesv1270 = &rule.AttributeRule{
	Name:         "type.user.roles",
	Title:        "The type of `user.roles` should be string[]",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStrSlice(sa, "user.roles") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserAgentNamev1270 = &rule.AttributeRule{
	Name:         "type.user_agent.name",
	Title:        "The type of `user_agent.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user_agent.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserAgentOriginalv1270 = &rule.AttributeRule{
	Name:         "type.user_agent.original",
	Title:        "The type of `user_agent.original` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user_agent.original") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityStable,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeUserAgentVersionv1270 = &rule.AttributeRule{
	Name:         "type.user_agent.version",
	Title:        "The type of `user_agent.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "user_agent.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeVcsRepositoryChangeIdv1270 = &rule.AttributeRule{
	Name:         "type.vcs.repository.change.id",
	Title:        "The type of `vcs.repository.change.id` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "vcs.repository.change.id") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeVcsRepositoryChangeTitlev1270 = &rule.AttributeRule{
	Name:         "type.vcs.repository.change.title",
	Title:        "The type of `vcs.repository.change.title` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "vcs.repository.change.title") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeVcsRepositoryRefNamev1270 = &rule.AttributeRule{
	Name:         "type.vcs.repository.ref.name",
	Title:        "The type of `vcs.repository.ref.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "vcs.repository.ref.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeVcsRepositoryRefRevisionv1270 = &rule.AttributeRule{
	Name:         "type.vcs.repository.ref.revision",
	Title:        "The type of `vcs.repository.ref.revision` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "vcs.repository.ref.revision") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeVcsRepositoryUrlFullv1270 = &rule.AttributeRule{
	Name:         "type.vcs.repository.url.full",
	Title:        "The type of `vcs.repository.url.full` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "vcs.repository.url.full") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeWebengineDescriptionv1270 = &rule.AttributeRule{
	Name:         "type.webengine.description",
	Title:        "The type of `webengine.description` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.description") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeWebengineNamev1270 = &rule.AttributeRule{
	Name:         "type.webengine.name",
	Title:        "The type of `webengine.name` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.name") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

var ruleTypeWebengineVersionv1270 = &rule.AttributeRule{
	Name:         "type.webengine.version",
	Title:        "The type of `webengine.version` should be string",
	Check:        func(sa *rule.SignalAttributes) bool { return valueTypeStr(sa, "webengine.version") },
	Severity:     rule.SeverityError,
	Stability:    rule.StabilityExperimental,
	Source:       "",
	Version:      "v1.27.0",
}

