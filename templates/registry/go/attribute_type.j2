{%- set version = params.version | camel_case -%}
{{- template.set_file_name("pkg/rule/attributes/" ~ "type_" ~ version ~ ".go") -}}
// Code generated by otel-lint. DO NOT EDIT.
package attributes

import (
	"github.com/ymtdzzz/otel-lint/pkg/rule"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

var RulesType{{ version }} = []*rule.AttributeRule{
{% for attr in ctx %}
{%- set attr_name = attr.name | pascal_case -%}
{#- Both `messaging.client.id` and `messaging.client_id` are converted to `MessagingClientId`... -#}
{% if attr.name == "messaging.client_id" %}
  {%- set attr_name = "MessagingClient_Id" -%}
{% endif %}
	ruleType{{ attr_name }}{{ version }},
{% endfor %}
}

{% for attr in ctx %}
{%- set attr_name = attr.name | pascal_case -%}
{% if attr.name == "messaging.client_id" %}
  {%- set attr_name = "MessagingClient_Id" -%}
{% endif %}
var ruleType{{ attr_name }}{{ version }} = &rule.AttributeRule{
	Name:         "type.{{attr.name}}",
	Title:        "The type of `{{ attr.name }}` is {{ attr.type }}",
	Check:        checkType{{ attr_name }}{{ version }},
	Severity:     rule.SeverityError,
	Stability:    rule.{{ attr.stability | map_text("stabilities", "StabilityExperimental") }},
	Source:       "",
}

func checkType{{ attr_name }}{{ version }}(a *rule.SignalAttributes) bool {
  val, ok := a.Get("{{ attr.name }}")
  if !ok {
    return true
  }
  {% if attr.type == "string" %}
  return val.Type() == pcommon.ValueTypeStr
  {% elif attr.type == "int" %}
  return val.Type() == pcommon.ValueTypeInt
  {% elif attr.type == "double" %}
  return val.Type() == pcommon.ValueTypeDouble
  {% elif attr.type == "boolean" %}
  return val.Type() == pcommon.ValueTypeBool
  {% elif attr.type == "string[]" %}
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(string); !ok {
      return false
    }
  }
  return true
  {% elif attr.type == "int[]" %}
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(int64); !ok {
      return false
    }
  }
  return true
  {% elif attr.type == "double[]" %}
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(float64); !ok {
      return false
    }
  }
  return true
  {% elif attr.type == "boolean[]" %}
  if val.Type() != pcommon.ValueTypeSlice {
    return false
  }
  for _, v := range val.Slice().AsRaw() {
    if _, ok := v.(bool); !ok {
      return false
    }
  }
  return true
  {% endif %}
}

{% endfor %}
